!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=74)}([function(e,t,n){e.exports=n(64)()},function(e,t,n){"use strict";e.exports=n(73)},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,u){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,o,i,a,u],c=0;(l=new Error(t.replace(/%s/g,function(){return s[c++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){"use strict";e.exports=function(){}},function(e,t,n){"use strict";n.r(t);var r=n(1),o=n(0),i=n.n(o),a=i.a.shape({trySubscribe:i.a.func.isRequired,tryUnsubscribe:i.a.func.isRequired,notifyNestedSubs:i.a.func.isRequired,isSubscribed:i.a.func.isRequired}),u=i.a.shape({subscribe:i.a.func.isRequired,dispatch:i.a.func.isRequired,getState:i.a.func.isRequired});function l(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"store",n=arguments[1]||t+"Subscription",o=function(e){function o(n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n,r));return i[t]=n.store,i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(o,e),o.prototype.getChildContext=function(){var e;return(e={})[t]=this[t],e[n]=null,e},o.prototype.render=function(){return r.Children.only(this.props.children)},o}(r.Component);return o.propTypes={store:u.isRequired,children:i.a.element.isRequired},o.childContextTypes=((e={})[t]=u.isRequired,e[n]=a,e),o}var s=l(),c=n(14),f=n.n(c),p=n(2),d=n.n(p);var h=null,m={notify:function(){}};var y=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.store=t,this.parentSub=n,this.onStateChange=r,this.unsubscribe=null,this.listeners=m}return e.prototype.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},e.prototype.notifyNestedSubs=function(){this.listeners.notify()},e.prototype.isSubscribed=function(){return Boolean(this.unsubscribe)},e.prototype.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.onStateChange):this.store.subscribe(this.onStateChange),this.listeners=function(){var e=[],t=[];return{clear:function(){t=h,e=h},notify:function(){for(var n=e=t,r=0;r<n.length;r++)n[r]()},get:function(){return t},subscribe:function(n){var r=!0;return t===e&&(t=e.slice()),t.push(n),function(){r&&e!==h&&(r=!1,t===e&&(t=e.slice()),t.splice(t.indexOf(n),1))}}}}())},e.prototype.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=m)},e}(),v=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var g=0,b={};function A(){}function w(e){var t,n,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=o.getDisplayName,l=void 0===i?function(e){return"ConnectAdvanced("+e+")"}:i,s=o.methodName,c=void 0===s?"connectAdvanced":s,p=o.renderCountProp,h=void 0===p?void 0:p,m=o.shouldHandleStateChanges,w=void 0===m||m,E=o.storeKey,C=void 0===E?"store":E,x=o.withRef,k=void 0!==x&&x,O=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(o,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef"]),S=C+"Subscription",_=g++,T=((t={})[C]=u,t[S]=a,t),P=((n={})[S]=a,n);return function(t){d()("function"==typeof t,"You must pass a component to the function returned by "+c+". Instead received "+JSON.stringify(t));var n=t.displayName||t.name||"Component",o=l(n),i=v({},O,{getDisplayName:l,methodName:c,renderCountProp:h,shouldHandleStateChanges:w,storeKey:C,withRef:k,displayName:o,wrappedComponentName:n,WrappedComponent:t}),a=function(n){function a(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,n.call(this,e,t));return r.version=_,r.state={},r.renderCount=0,r.store=e[C]||t[C],r.propsMode=Boolean(e[C]),r.setWrappedInstance=r.setWrappedInstance.bind(r),d()(r.store,'Could not find "'+C+'" in either the context or props of "'+o+'". Either wrap the root component in a <Provider>, or explicitly pass "'+C+'" as a prop to "'+o+'".'),r.initSelector(),r.initSubscription(),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(a,n),a.prototype.getChildContext=function(){var e,t=this.propsMode?null:this.subscription;return(e={})[S]=t||this.context[S],e},a.prototype.componentDidMount=function(){w&&(this.subscription.trySubscribe(),this.selector.run(this.props),this.selector.shouldComponentUpdate&&this.forceUpdate())},a.prototype.componentWillReceiveProps=function(e){this.selector.run(e)},a.prototype.shouldComponentUpdate=function(){return this.selector.shouldComponentUpdate},a.prototype.componentWillUnmount=function(){this.subscription&&this.subscription.tryUnsubscribe(),this.subscription=null,this.notifyNestedSubs=A,this.store=null,this.selector.run=A,this.selector.shouldComponentUpdate=!1},a.prototype.getWrappedInstance=function(){return d()(k,"To access the wrapped instance, you need to specify { withRef: true } in the options argument of the "+c+"() call."),this.wrappedInstance},a.prototype.setWrappedInstance=function(e){this.wrappedInstance=e},a.prototype.initSelector=function(){var t=e(this.store.dispatch,i);this.selector=function(e,t){var n={run:function(r){try{var o=e(t.getState(),r);(o!==n.props||n.error)&&(n.shouldComponentUpdate=!0,n.props=o,n.error=null)}catch(e){n.shouldComponentUpdate=!0,n.error=e}}};return n}(t,this.store),this.selector.run(this.props)},a.prototype.initSubscription=function(){if(w){var e=(this.propsMode?this.props:this.context)[S];this.subscription=new y(this.store,e,this.onStateChange.bind(this)),this.notifyNestedSubs=this.subscription.notifyNestedSubs.bind(this.subscription)}},a.prototype.onStateChange=function(){this.selector.run(this.props),this.selector.shouldComponentUpdate?(this.componentDidUpdate=this.notifyNestedSubsOnComponentDidUpdate,this.setState(b)):this.notifyNestedSubs()},a.prototype.notifyNestedSubsOnComponentDidUpdate=function(){this.componentDidUpdate=void 0,this.notifyNestedSubs()},a.prototype.isSubscribed=function(){return Boolean(this.subscription)&&this.subscription.isSubscribed()},a.prototype.addExtraProps=function(e){if(!(k||h||this.propsMode&&this.subscription))return e;var t=v({},e);return k&&(t.ref=this.setWrappedInstance),h&&(t[h]=this.renderCount++),this.propsMode&&this.subscription&&(t[S]=this.subscription),t},a.prototype.render=function(){var e=this.selector;if(e.shouldComponentUpdate=!1,e.error)throw e.error;return Object(r.createElement)(t,this.addExtraProps(e.props))},a}(r.Component);return a.WrappedComponent=t,a.displayName=o,a.childContextTypes=P,a.contextTypes=T,a.propTypes=T,f()(a,t)}}var E=Object.prototype.hasOwnProperty;function C(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function x(e,t){if(C(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!E.call(t,n[o])||!C(e[n[o]],t[n[o]]))return!1;return!0}var k=n(17),O=n(30),S="object"==typeof self&&self&&self.Object===Object&&self,_=(O.a||S||Function("return this")()).Symbol,T=Object.prototype;T.hasOwnProperty,T.toString,_&&_.toStringTag;Object.prototype.toString;_&&_.toStringTag;Object.getPrototypeOf,Object;var P=Function.prototype,R=Object.prototype,B=P.toString;R.hasOwnProperty,B.call(Object);function j(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function I(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function N(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=I(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=I(o),o=r(t,n)),o},r}}var M=[function(e){return"function"==typeof e?N(e):void 0},function(e){return e?void 0:j(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?j(function(t){return Object(k.bindActionCreators)(e,t)}):void 0}];var U=[function(e){return"function"==typeof e?N(e):void 0},function(e){return e?void 0:j(function(){return{}})}],D=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function L(e,t,n){return D({},n,e,t)}var F=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r=n.pure,o=n.areMergedPropsEqual,i=!1,a=void 0;return function(t,n,u){var l=e(t,n,u);return i?r&&o(l,a)||(a=l):(i=!0,a=l),a}}}(e):void 0},function(e){return e?void 0:function(){return L}}];function z(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function H(e,t,n,r,o){var i=o.areStatesEqual,a=o.areOwnPropsEqual,u=o.areStatePropsEqual,l=!1,s=void 0,c=void 0,f=void 0,p=void 0,d=void 0;function h(o,l){var h=!a(l,c),m=!i(o,s);return s=o,c=l,h&&m?(f=e(s,c),t.dependsOnOwnProps&&(p=t(r,c)),d=n(f,p,c)):h?(e.dependsOnOwnProps&&(f=e(s,c)),t.dependsOnOwnProps&&(p=t(r,c)),d=n(f,p,c)):m?function(){var t=e(s,c),r=!u(t,f);return f=t,r&&(d=n(f,p,c)),d}():d}return function(o,i){return l?h(o,i):function(o,i){return f=e(s=o,c=i),p=t(r,c),d=n(f,p,c),l=!0,d}(o,i)}}function G(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),u=r(e,i),l=o(e,i);return(i.pure?H:z)(a,u,l,e,i)}var q=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function W(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function V(e,t){return e===t}var $=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.connectHOC,n=void 0===t?w:t,r=e.mapStateToPropsFactories,o=void 0===r?U:r,i=e.mapDispatchToPropsFactories,a=void 0===i?M:i,u=e.mergePropsFactories,l=void 0===u?F:u,s=e.selectorFactory,c=void 0===s?G:s;return function(e,t,r){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},u=i.pure,s=void 0===u||u,f=i.areStatesEqual,p=void 0===f?V:f,d=i.areOwnPropsEqual,h=void 0===d?x:d,m=i.areStatePropsEqual,y=void 0===m?x:m,v=i.areMergedPropsEqual,g=void 0===v?x:v,b=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(i,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),A=W(e,o,"mapStateToProps"),w=W(t,a,"mapDispatchToProps"),E=W(r,l,"mergeProps");return n(c,q({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:A,initMapDispatchToProps:w,initMergeProps:E,pure:s,areStatesEqual:p,areOwnPropsEqual:h,areStatePropsEqual:y,areMergedPropsEqual:g},b))}}();n.d(t,"Provider",function(){return s}),n.d(t,"createProvider",function(){return l}),n.d(t,"connectAdvanced",function(){return w}),n.d(t,"connect",function(){return $})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.albums=function(e=[],{type:t,payload:n}){switch(t){case r:return n;case i:return[...e,n];default:return e}},t.album=function(e={},{type:t,payload:n}){switch(t){case o:{const{albums:e,albumId:t}=n,r=e.filter(e=>e._id===t);return r[0]}default:return e}},t.images=function(e=[],{type:t,payload:n}){switch(t){case a:return n;case u:return[...e,n];default:return e}};const r=t.ALBUMS_LOAD="ALBUMS_LOAD",o=t.ALBUM_LOAD="ALBUM_LOAD",i=t.ALBUM_ADD="ALBUM_ADD",a=t.IMAGES_LOAD="IMAGES_LOAD",u=t.IMAGE_ADD="IMAGE_ADD";t.getAlbums=(e=>e.albums),t.getAlbum=(e=>e.album),t.getImages=(e=>e.images)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.user=function(e=null,{type:t,payload:n}){switch(t){case r:return n;case o:return null;default:return e}},t.checkedAuth=function(e=!1,{type:t}){switch(t){case i:return!0;default:return e}};const r=t.USER_AUTH="USER_AUTH",o=t.LOGOUT="LOGOUT",i=t.CHECKED_AUTH="CHECKED_AUTH";t.getUser=(e=>e.user),t.getCheckedAuth=(e=>e.checkedAuth)},function(e,t,n){"use strict";n.r(t);var r=n(3),o=n.n(r),i=n(1),a=n.n(i),u=n(0),l=n.n(u),s=n(4),c=n.n(s),f=n(2),p=n.n(f);function d(e){return"/"===e.charAt(0)}function h(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var m=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],r=t&&t.split("/")||[],o=e&&d(e),i=t&&d(t),a=o||i;if(e&&d(e)?r=n:n.length&&(r.pop(),r=r.concat(n)),!r.length)return"/";var u=void 0;if(r.length){var l=r[r.length-1];u="."===l||".."===l||""===l}else u=!1;for(var s=0,c=r.length;c>=0;c--){var f=r[c];"."===f?h(r,c):".."===f?(h(r,c),s++):s&&(h(r,c),s--)}if(!a)for(;s--;s)r.unshift("..");!a||""===r[0]||r[0]&&d(r[0])||r.unshift("");var p=r.join("/");return u&&"/"!==p.substr(-1)&&(p+="/"),p},y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var v=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every(function(t,r){return e(t,n[r])});var r=void 0===t?"undefined":y(t);if(r!==(void 0===n?"undefined":y(n)))return!1;if("object"===r){var o=t.valueOf(),i=n.valueOf();if(o!==t||i!==n)return e(o,i);var a=Object.keys(t),u=Object.keys(n);return a.length===u.length&&a.every(function(r){return e(t[r],n[r])})}return!1},g=function(e){return"/"===e.charAt(0)?e:"/"+e},b=function(e){return"/"===e.charAt(0)?e.substr(1):e},A=function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)},w=function(e,t){return A(e,t)?e.substr(t.length):e},E=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},C=function(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o},x=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},k=function(e,t,n,r){var o=void 0;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=x({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=m(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o},O=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&v(e.state,t.state)},S=function(){var e=null,t=[];return{setPrompt:function(t){return c()(null==e,"A history supports only one prompt at a time"),e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):(c()(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),o(!0)):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0,r=function(){n&&e.apply(void 0,arguments)};return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}},_=!("undefined"==typeof window||!window.document||!window.document.createElement),T=function(e,t,n){return e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)},P=function(e,t,n){return e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)},R=function(e,t){return t(window.confirm(e))},B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},j=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},I=function(){try{return window.history.state||{}}catch(e){return{}}},N=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};p()(_,"Browser history needs a DOM");var t=window.history,n=function(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history}(),r=!(-1===window.navigator.userAgent.indexOf("Trident")),o=e.forceRefresh,i=void 0!==o&&o,a=e.getUserConfirmation,u=void 0===a?R:a,l=e.keyLength,s=void 0===l?6:l,f=e.basename?E(g(e.basename)):"",d=function(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return c()(!f||A(i,f),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+i+'" to begin with "'+f+'".'),f&&(i=w(i,f)),k(i,r,n)},h=function(){return Math.random().toString(36).substr(2,s)},m=S(),y=function(e){j(G,e),G.length=t.length,m.notifyListeners(G.location,G.action)},v=function(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||O(d(e.state))},b=function(){O(d(I()))},x=!1,O=function(e){x?(x=!1,y()):m.confirmTransitionTo(e,"POP",u,function(t){t?y({action:"POP",location:e}):N(e)})},N=function(e){var t=G.location,n=U.indexOf(t.key);-1===n&&(n=0);var r=U.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(x=!0,L(o))},M=d(I()),U=[M.key],D=function(e){return f+C(e)},L=function(e){t.go(e)},F=0,z=function(e){1===(F+=e)?(T(window,"popstate",v),r&&T(window,"hashchange",b)):0===F&&(P(window,"popstate",v),r&&P(window,"hashchange",b))},H=!1,G={length:t.length,action:"POP",location:M,createHref:D,push:function(e,r){c()(!("object"===(void 0===e?"undefined":B(e))&&void 0!==e.state&&void 0!==r),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var o=k(e,r,h(),G.location);m.confirmTransitionTo(o,"PUSH",u,function(e){if(e){var r=D(o),a=o.key,u=o.state;if(n)if(t.pushState({key:a,state:u},null,r),i)window.location.href=r;else{var l=U.indexOf(G.location.key),s=U.slice(0,-1===l?0:l+1);s.push(o.key),U=s,y({action:"PUSH",location:o})}else c()(void 0===u,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}})},replace:function(e,r){c()(!("object"===(void 0===e?"undefined":B(e))&&void 0!==e.state&&void 0!==r),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var o=k(e,r,h(),G.location);m.confirmTransitionTo(o,"REPLACE",u,function(e){if(e){var r=D(o),a=o.key,u=o.state;if(n)if(t.replaceState({key:a,state:u},null,r),i)window.location.replace(r);else{var l=U.indexOf(G.location.key);-1!==l&&(U[l]=o.key),y({action:"REPLACE",location:o})}else c()(void 0===u,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}})},go:L,goBack:function(){return L(-1)},goForward:function(){return L(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=m.setPrompt(e);return H||(z(1),H=!0),function(){return H&&(H=!1,z(-1)),t()}},listen:function(e){var t=m.appendListener(e);return z(1),function(){z(-1),t()}}};return G},M=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},U={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+b(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:b,decodePath:g},slash:{encodePath:g,decodePath:g}},D=function(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)},L=function(e){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+e)},F=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};p()(_,"Hash history needs a DOM");var t=window.history,n=-1===window.navigator.userAgent.indexOf("Firefox"),r=e.getUserConfirmation,o=void 0===r?R:r,i=e.hashType,a=void 0===i?"slash":i,u=e.basename?E(g(e.basename)):"",l=U[a],s=l.encodePath,f=l.decodePath,d=function(){var e=f(D());return c()(!u||A(e,u),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+e+'" to begin with "'+u+'".'),u&&(e=w(e,u)),k(e)},h=S(),m=function(e){M(W,e),W.length=t.length,h.notifyListeners(W.location,W.action)},y=!1,v=null,b=function(){var e=D(),t=s(e);if(e!==t)L(t);else{var n=d(),r=W.location;if(!y&&O(r,n))return;if(v===C(n))return;v=null,x(n)}},x=function(e){y?(y=!1,m()):h.confirmTransitionTo(e,"POP",o,function(t){t?m({action:"POP",location:e}):B(e)})},B=function(e){var t=W.location,n=F.lastIndexOf(C(t));-1===n&&(n=0);var r=F.lastIndexOf(C(e));-1===r&&(r=0);var o=n-r;o&&(y=!0,z(o))},j=D(),I=s(j);j!==I&&L(I);var N=d(),F=[C(N)],z=function(e){c()(n,"Hash history go(n) causes a full page reload in this browser"),t.go(e)},H=0,G=function(e){1===(H+=e)?T(window,"hashchange",b):0===H&&P(window,"hashchange",b)},q=!1,W={length:t.length,action:"POP",location:N,createHref:function(e){return"#"+s(u+C(e))},push:function(e,t){c()(void 0===t,"Hash history cannot push state; it is ignored");var n=k(e,void 0,void 0,W.location);h.confirmTransitionTo(n,"PUSH",o,function(e){if(e){var t=C(n),r=s(u+t);if(D()!==r){v=t,function(e){window.location.hash=e}(r);var o=F.lastIndexOf(C(W.location)),i=F.slice(0,-1===o?0:o+1);i.push(t),F=i,m({action:"PUSH",location:n})}else c()(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),m()}})},replace:function(e,t){c()(void 0===t,"Hash history cannot replace state; it is ignored");var n=k(e,void 0,void 0,W.location);h.confirmTransitionTo(n,"REPLACE",o,function(e){if(e){var t=C(n),r=s(u+t);D()!==r&&(v=t,L(r));var o=F.indexOf(C(W.location));-1!==o&&(F[o]=t),m({action:"REPLACE",location:n})}})},go:z,goBack:function(){return z(-1)},goForward:function(){return z(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=h.setPrompt(e);return q||(G(1),q=!0),function(){return q&&(q=!1,G(-1)),t()}},listen:function(e){var t=h.appendListener(e);return G(1),function(){G(-1),t()}}};return W},z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},H=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},G=function(e,t,n){return Math.min(Math.max(e,t),n)},q=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.getUserConfirmation,n=e.initialEntries,r=void 0===n?["/"]:n,o=e.initialIndex,i=void 0===o?0:o,a=e.keyLength,u=void 0===a?6:a,l=S(),s=function(e){H(y,e),y.length=y.entries.length,l.notifyListeners(y.location,y.action)},f=function(){return Math.random().toString(36).substr(2,u)},p=G(i,0,r.length-1),d=r.map(function(e){return k(e,void 0,"string"==typeof e?f():e.key||f())}),h=C,m=function(e){var n=G(y.index+e,0,y.entries.length-1),r=y.entries[n];l.confirmTransitionTo(r,"POP",t,function(e){e?s({action:"POP",location:r,index:n}):s()})},y={length:d.length,action:"POP",location:d[p],index:p,entries:d,createHref:h,push:function(e,n){c()(!("object"===(void 0===e?"undefined":z(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var r=k(e,n,f(),y.location);l.confirmTransitionTo(r,"PUSH",t,function(e){if(e){var t=y.index+1,n=y.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),s({action:"PUSH",location:r,index:t,entries:n})}})},replace:function(e,n){c()(!("object"===(void 0===e?"undefined":z(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var r=k(e,n,f(),y.location);l.confirmTransitionTo(r,"REPLACE",t,function(e){e&&(y.entries[y.index]=r,s({action:"REPLACE",location:r}))})},go:m,goBack:function(){return m(-1)},goForward:function(){return m(1)},canGo:function(e){var t=y.index+e;return t>=0&&t<y.entries.length},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return l.setPrompt(e)},listen:function(e){return l.appendListener(e)}};return y},W=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function V(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var $=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=V(this,e.call.apply(e,[this].concat(i))),r.state={match:r.computeMatch(r.props.history.location.pathname)},V(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:W({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}},t.prototype.computeMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}},t.prototype.componentWillMount=function(){var e=this,t=this.props,n=t.children,r=t.history;p()(null==n||1===a.a.Children.count(n),"A <Router> may have only one child element"),this.unlisten=r.listen(function(){e.setState({match:e.computeMatch(r.location.pathname)})})},t.prototype.componentWillReceiveProps=function(e){o()(this.props.history===e.history,"You cannot change <Router history>")},t.prototype.componentWillUnmount=function(){this.unlisten()},t.prototype.render=function(){var e=this.props.children;return e?a.a.Children.only(e):null},t}(a.a.Component);$.propTypes={history:l.a.object.isRequired,children:l.a.node},$.contextTypes={router:l.a.object},$.childContextTypes={router:l.a.object.isRequired};var Y=$,Q=Y;function K(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var X=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=K(this,e.call.apply(e,[this].concat(i))),r.history=N(r.props),K(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.")},t.prototype.render=function(){return a.a.createElement(Q,{history:this.history,children:this.props.children})},t}(a.a.Component);X.propTypes={basename:l.a.string,forceRefresh:l.a.bool,getUserConfirmation:l.a.func,keyLength:l.a.number,children:l.a.node};var Z=X;function J(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var ee=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=J(this,e.call.apply(e,[this].concat(i))),r.history=F(r.props),J(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},t.prototype.render=function(){return a.a.createElement(Q,{history:this.history,children:this.props.children})},t}(a.a.Component);ee.propTypes={basename:l.a.string,getUserConfirmation:l.a.func,hashType:l.a.oneOf(["hashbang","noslash","slash"]),children:l.a.node};var te=ee,ne=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function re(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var oe=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},ie=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=re(this,e.call.apply(e,[this].concat(i))),r.handleClick=function(e){if(r.props.onClick&&r.props.onClick(e),!e.defaultPrevented&&0===e.button&&!r.props.target&&!oe(e)){e.preventDefault();var t=r.context.router.history,n=r.props,o=n.replace,i=n.to;o?t.replace(i):t.push(i)}},re(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),n=e.innerRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["replace","to","innerRef"]);p()(this.context.router,"You should not use <Link> outside a <Router>"),p()(void 0!==t,'You must specify the "to" property');var o=this.context.router.history,i="string"==typeof t?k(t,null,null,o.location):t,u=o.createHref(i);return a.a.createElement("a",ne({},r,{onClick:this.handleClick,href:u,ref:n}))},t}(a.a.Component);ie.propTypes={onClick:l.a.func,target:l.a.string,replace:l.a.bool,to:l.a.oneOfType([l.a.string,l.a.object]).isRequired,innerRef:l.a.oneOfType([l.a.string,l.a.func])},ie.defaultProps={replace:!1},ie.contextTypes={router:l.a.shape({history:l.a.shape({push:l.a.func.isRequired,replace:l.a.func.isRequired,createHref:l.a.func.isRequired}).isRequired}).isRequired};var ae=ie;function ue(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var le=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=ue(this,e.call.apply(e,[this].concat(i))),r.history=q(r.props),ue(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.")},t.prototype.render=function(){return a.a.createElement(Y,{history:this.history,children:this.props.children})},t}(a.a.Component);le.propTypes={initialEntries:l.a.array,initialIndex:l.a.number,getUserConfirmation:l.a.func,keyLength:l.a.number,children:l.a.node};var se=le,ce=n(13),fe=n.n(ce),pe={},de=0,he=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2];"string"==typeof t&&(t={path:t});var r=t,o=r.path,i=r.exact,a=void 0!==i&&i,u=r.strict,l=void 0!==u&&u,s=r.sensitive,c=void 0!==s&&s;if(null==o)return n;var f=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=pe[n]||(pe[n]={});if(r[e])return r[e];var o=[],i={re:fe()(e,o,t),keys:o};return de<1e4&&(r[e]=i,de++),i}(o,{end:a,strict:l,sensitive:c}),p=f.re,d=f.keys,h=p.exec(e);if(!h)return null;var m=h[0],y=h.slice(1),v=e===m;return a&&!v?null:{path:o,url:"/"===o&&""===m?"/":m,isExact:v,params:d.reduce(function(e,t,n){return e[t.name]=y[n],e},{})}},me=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function ye(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var ve=function(e){return 0===a.a.Children.count(e)},ge=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=ye(this,e.call.apply(e,[this].concat(i))),r.state={match:r.computeMatch(r.props,r.context.router)},ye(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:me({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}},t.prototype.computeMatch=function(e,t){var n=e.computedMatch,r=e.location,o=e.path,i=e.strict,a=e.exact,u=e.sensitive;if(n)return n;p()(t,"You should not use <Route> or withRouter() outside a <Router>");var l=t.route,s=(r||l.location).pathname;return he(s,{path:o,strict:i,exact:a,sensitive:u},l.match)},t.prototype.componentWillMount=function(){o()(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"),o()(!(this.props.component&&this.props.children&&!ve(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored"),o()(!(this.props.render&&this.props.children&&!ve(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")},t.prototype.componentWillReceiveProps=function(e,t){o()(!(e.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'),this.setState({match:this.computeMatch(e,t.router)})},t.prototype.render=function(){var e=this.state.match,t=this.props,n=t.children,r=t.component,o=t.render,i=this.context.router,u=i.history,l=i.route,s=i.staticContext,c={match:e,location:this.props.location||l.location,history:u,staticContext:s};return r?e?a.a.createElement(r,c):null:o?e?o(c):null:"function"==typeof n?n(c):n&&!ve(n)?a.a.Children.only(n):null},t}(a.a.Component);ge.propTypes={computedMatch:l.a.object,path:l.a.string,exact:l.a.bool,strict:l.a.bool,sensitive:l.a.bool,component:l.a.func,render:l.a.func,children:l.a.oneOfType([l.a.func,l.a.node]),location:l.a.object},ge.contextTypes={router:l.a.shape({history:l.a.object.isRequired,route:l.a.object.isRequired,staticContext:l.a.object})},ge.childContextTypes={router:l.a.object.isRequired};var be=ge,Ae=be,we=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ee="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var Ce=function(e){var t=e.to,n=e.exact,r=e.strict,o=e.location,i=e.activeClassName,u=e.className,l=e.activeStyle,s=e.style,c=e.isActive,f=e["aria-current"],p=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","aria-current"]),d="object"===(void 0===t?"undefined":Ee(t))?t.pathname:t,h=d&&d.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1");return a.a.createElement(Ae,{path:h,exact:n,strict:r,location:o,children:function(e){var n=e.location,r=e.match,o=!!(c?c(r,n):r);return a.a.createElement(ae,we({to:t,className:o?[u,i].filter(function(e){return e}).join(" "):u,style:o?we({},s,l):s,"aria-current":o&&f||null},p))}})};Ce.propTypes={to:ae.propTypes.to,exact:l.a.bool,strict:l.a.bool,location:l.a.object,activeClassName:l.a.string,className:l.a.string,activeStyle:l.a.object,style:l.a.object,isActive:l.a.func,"aria-current":l.a.oneOf(["page","step","location","date","time","true"])},Ce.defaultProps={activeClassName:"active","aria-current":"page"};var xe=Ce;var ke=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.enable=function(e){this.unblock&&this.unblock(),this.unblock=this.context.router.history.block(e)},t.prototype.disable=function(){this.unblock&&(this.unblock(),this.unblock=null)},t.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Prompt> outside a <Router>"),this.props.when&&this.enable(this.props.message)},t.prototype.componentWillReceiveProps=function(e){e.when?this.props.when&&this.props.message===e.message||this.enable(e.message):this.disable()},t.prototype.componentWillUnmount=function(){this.disable()},t.prototype.render=function(){return null},t}(a.a.Component);ke.propTypes={when:l.a.bool,message:l.a.oneOfType([l.a.func,l.a.string]).isRequired},ke.defaultProps={when:!0},ke.contextTypes={router:l.a.shape({history:l.a.shape({block:l.a.func.isRequired}).isRequired}).isRequired};var Oe=ke,Se={},_e=0,Te=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"/",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"/"===e?e:function(e){var t=e,n=Se[t]||(Se[t]={});if(n[e])return n[e];var r=fe.a.compile(e);return _e<1e4&&(n[e]=r,_e++),r}(e)(t,{pretty:!0})},Pe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var Re=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.isStatic=function(){return this.context.router&&this.context.router.staticContext},t.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Redirect> outside a <Router>"),this.isStatic()&&this.perform()},t.prototype.componentDidMount=function(){this.isStatic()||this.perform()},t.prototype.componentDidUpdate=function(e){var t=k(e.to),n=k(this.props.to);O(t,n)?o()(!1,"You tried to redirect to the same route you're currently on: \""+n.pathname+n.search+'"'):this.perform()},t.prototype.computeTo=function(e){var t=e.computedMatch,n=e.to;return t?"string"==typeof n?Te(n,t.params):Pe({},n,{pathname:Te(n.pathname,t.params)}):n},t.prototype.perform=function(){var e=this.context.router.history,t=this.props.push,n=this.computeTo(this.props);t?e.push(n):e.replace(n)},t.prototype.render=function(){return null},t}(a.a.Component);Re.propTypes={computedMatch:l.a.object,push:l.a.bool,from:l.a.string,to:l.a.oneOfType([l.a.string,l.a.object]).isRequired},Re.defaultProps={push:!1},Re.contextTypes={router:l.a.shape({history:l.a.shape({push:l.a.func.isRequired,replace:l.a.func.isRequired}).isRequired,staticContext:l.a.object}).isRequired};var Be=Re,je=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function Ie(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var Ne=function(e){return"/"===e.charAt(0)?e:"/"+e},Me=function(e,t){return e?je({},t,{pathname:Ne(e)+t.pathname}):t},Ue=function(e){return"string"==typeof e?e:C(e)},De=function(e){return function(){p()(!1,"You cannot %s with <StaticRouter>",e)}},Le=function(){},Fe=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=Ie(this,e.call.apply(e,[this].concat(i))),r.createHref=function(e){return Ne(r.props.basename+Ue(e))},r.handlePush=function(e){var t=r.props,n=t.basename,o=t.context;o.action="PUSH",o.location=Me(n,k(e)),o.url=Ue(o.location)},r.handleReplace=function(e){var t=r.props,n=t.basename,o=t.context;o.action="REPLACE",o.location=Me(n,k(e)),o.url=Ue(o.location)},r.handleListen=function(){return Le},r.handleBlock=function(){return Le},Ie(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:{staticContext:this.props.context}}},t.prototype.componentWillMount=function(){o()(!this.props.history,"<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.")},t.prototype.render=function(){var e=this.props,t=e.basename,n=(e.context,e.location),r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["basename","context","location"]),o={createHref:this.createHref,action:"POP",location:function(e,t){if(!e)return t;var n=Ne(e);return 0!==t.pathname.indexOf(n)?t:je({},t,{pathname:t.pathname.substr(n.length)})}(t,k(n)),push:this.handlePush,replace:this.handleReplace,go:De("go"),goBack:De("goBack"),goForward:De("goForward"),listen:this.handleListen,block:this.handleBlock};return a.a.createElement(Y,je({},r,{history:o}))},t}(a.a.Component);Fe.propTypes={basename:l.a.string,context:l.a.object.isRequired,location:l.a.oneOfType([l.a.string,l.a.object])},Fe.defaultProps={basename:"",location:"/"},Fe.childContextTypes={router:l.a.object.isRequired};var ze=Fe;var He=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Switch> outside a <Router>")},t.prototype.componentWillReceiveProps=function(e){o()(!(e.location&&!this.props.location),'<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.')},t.prototype.render=function(){var e=this.context.router.route,t=this.props.children,n=this.props.location||e.location,r=void 0,o=void 0;return a.a.Children.forEach(t,function(t){if(null==r&&a.a.isValidElement(t)){var i=t.props,u=i.path,l=i.exact,s=i.strict,c=i.sensitive,f=i.from,p=u||f;o=t,r=he(n.pathname,{path:p,exact:l,strict:s,sensitive:c},e.match)}}),r?a.a.cloneElement(o,{location:n,computedMatch:r}):null},t}(a.a.Component);He.contextTypes={router:l.a.shape({route:l.a.object.isRequired}).isRequired},He.propTypes={children:l.a.node,location:l.a.object};var Ge=He,qe=Te,We=he,Ve=n(14),$e=n.n(Ve),Ye=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var Qe=function(e){var t=function(t){var n=t.wrappedComponentRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["wrappedComponentRef"]);return a.a.createElement(be,{children:function(t){return a.a.createElement(e,Ye({},r,t,{ref:n}))}})};return t.displayName="withRouter("+(e.displayName||e.name)+")",t.WrappedComponent=e,t.propTypes={wrappedComponentRef:l.a.func},$e()(t,e)};n.d(t,"BrowserRouter",function(){return Z}),n.d(t,"HashRouter",function(){return te}),n.d(t,"Link",function(){return ae}),n.d(t,"MemoryRouter",function(){return se}),n.d(t,"NavLink",function(){return xe}),n.d(t,"Prompt",function(){return Oe}),n.d(t,"Redirect",function(){return Be}),n.d(t,"Route",function(){return Ae}),n.d(t,"Router",function(){return Q}),n.d(t,"StaticRouter",function(){return ze}),n.d(t,"Switch",function(){return Ge}),n.d(t,"generatePath",function(){return qe}),n.d(t,"matchPath",function(){return We}),n.d(t,"withRouter",function(){return Qe})},function(e,t,n){var r={},o=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),i=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),a=null,u=0,l=[],s=n(53);function c(e,t){for(var n=0;n<e.length;n++){var o=e[n],i=r[o.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](o.parts[a]);for(;a<o.parts.length;a++)i.parts.push(y(o.parts[a],t))}else{var u=[];for(a=0;a<o.parts.length;a++)u.push(y(o.parts[a],t));r[o.id]={id:o.id,refs:1,parts:u}}}}function f(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],u={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(u):n.push(r[a]={id:a,parts:[u]})}return n}function p(e,t){var n=i(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),l.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=i(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function d(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=l.indexOf(e);t>=0&&l.splice(t,1)}function h(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),m(t,e.attrs),p(e,t),t}function m(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function y(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var l=u++;n=a||(a=h(t)),r=g.bind(null,n,l,!1),o=g.bind(null,n,l,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",m(t,e.attrs),p(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=s(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),u=e.href;e.href=URL.createObjectURL(a),u&&URL.revokeObjectURL(u)}.bind(null,n,t),o=function(){d(n),n.href&&URL.revokeObjectURL(n.href)}):(n=h(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){d(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=o()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=f(e,t);return c(n,t),function(e){for(var o=[],i=0;i<n.length;i++){var a=n[i];(u=r[a.id]).refs--,o.push(u)}e&&c(f(e,t),t);for(i=0;i<o.length;i++){var u;if(0===(u=o[i]).refs){for(var l=0;l<u.parts.length;l++)u.parts[l]();delete r[u.id]}}}};var v=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function g(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=v(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=function(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}(r),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadAlbums=function(){return{type:r.ALBUMS_LOAD,payload:(0,o.getAllAlbums)()}},t.createAlbum=function(e){return{type:r.ALBUM_ADD,payload:(0,o.postAlbum)(e)}},t.loadAlbum=function(e){return(t,n)=>{const i=n(),a=(0,r.getAlbums)(i);t({type:r.ALBUM_LOAD,payload:{albums:a,albumId:e}}),(0,o.getImagesByAlbum)(e).then(e=>{t({type:r.IMAGES_LOAD,payload:e})})}},t.loadImages=function(){return e=>{(0,o.getAllImages)().then(t=>{e({type:r.IMAGES_LOAD,payload:t})})}},t.createImage=function(e){return t=>{(0,o.postImage)(e).then(e=>{t({type:r.IMAGE_ADD,payload:e})})}};var r=n(6),o=n(20)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=u(r),i=u(n(0)),a=u(n(51));function u(e){return e&&e.__esModule?e:{default:e}}class l extends r.Component{render(){const{title:e,url:t}=this.props;return o.default.createElement("div",{className:a.default.thumbnail,style:{backgroundImage:`url(${t})`}},o.default.createElement("h2",null,e))}}t.default=l,l.propTypes={url:i.default.string.isRequired,title:i.default.string.isRequired}},function(e,t,n){var r=n(60);e.exports=h,e.exports.parse=i,e.exports.compile=function(e,t){return l(i(e,t))},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,u="",l=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],p=n[1],d=n.index;if(u+=e.slice(a,d),a=d+f.length,p)u+=p[1];else{var h=e[a],m=n[2],y=n[3],v=n[4],g=n[5],b=n[6],A=n[7];u&&(r.push(u),u="");var w=null!=m&&null!=h&&h!==m,E="+"===b||"*"===b,C="?"===b||"*"===b,x=n[2]||l,k=v||g;r.push({name:y||i++,prefix:m||"",delimiter:x,optional:C,repeat:E,partial:w,asterisk:!!A,pattern:k?c(k):A?".*":"[^"+s(x)+"]+?"})}}return a<e.length&&(u+=e.substr(a)),u&&r.push(u),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function u(e){return encodeURI(e).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function l(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,o){for(var i="",l=n||{},s=(o||{}).pretty?a:encodeURIComponent,c=0;c<e.length;c++){var f=e[c];if("string"!=typeof f){var p,d=l[f.name];if(null==d){if(f.optional){f.partial&&(i+=f.prefix);continue}throw new TypeError('Expected "'+f.name+'" to be defined')}if(r(d)){if(!f.repeat)throw new TypeError('Expected "'+f.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(f.optional)continue;throw new TypeError('Expected "'+f.name+'" to not be empty')}for(var h=0;h<d.length;h++){if(p=s(d[h]),!t[c].test(p))throw new TypeError('Expected all "'+f.name+'" to match "'+f.pattern+'", but received `'+JSON.stringify(p)+"`");i+=(0===h?f.prefix:f.delimiter)+p}}else{if(p=f.asterisk?u(d):s(d),!t[c].test(p))throw new TypeError('Expected "'+f.name+'" to match "'+f.pattern+'", but received "'+p+'"');i+=f.prefix+p}}else i+=f}return i}}function s(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function f(e,t){return e.keys=t,e}function p(e){return e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",u=0;u<e.length;u++){var l=e[u];if("string"==typeof l)a+=s(l);else{var c=s(l.prefix),d="(?:"+l.pattern+")";t.push(l),l.repeat&&(d+="(?:"+c+d+")*"),a+=d=l.optional?l.partial?c+"("+d+")?":"(?:"+c+"("+d+"))?":c+"("+d+")"}}var h=s(n.delimiter||"/"),m=a.slice(-h.length)===h;return o||(a=(m?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&m?"":"(?="+h+"|$)",f(new RegExp("^"+a,p(n)),t)}function h(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return f(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(h(e[o],t,n).source);return f(new RegExp("(?:"+r.join("|")+")",p(n)),t)}(e,t,n):function(e,t,n){return d(i(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";var r={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i=Object.defineProperty,a=Object.getOwnPropertyNames,u=Object.getOwnPropertySymbols,l=Object.getOwnPropertyDescriptor,s=Object.getPrototypeOf,c=s&&s(Object);e.exports=function e(t,n,f){if("string"!=typeof n){if(c){var p=s(n);p&&p!==c&&e(t,p,f)}var d=a(n);u&&(d=d.concat(u(n)));for(var h=0;h<d.length;++h){var m=d[h];if(!(r[m]||o[m]||f&&f[m])){var y=l(n,m);try{i(t,m,y)}catch(e){}}}return t}return t}},function(e,t,n){var r=n(49);"string"==typeof r&&(r=[[e.i,r,""]]);var o={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(9)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.tryLoadUser=t.logout=t.signin=t.signup=void 0;var r=n(7),o=n(23),i=n(20);const a=e=>t=>({type:r.USER_AUTH,payload:e(t)}),u=(t.signup=a(i.signup),t.signin=a(i.signin),t.logout=(()=>({type:r.LOGOUT})),()=>({type:r.CHECKED_AUTH}));t.tryLoadUser=(()=>e=>{const t=(0,o.getStoredUser)();if(!t||!t.token)return e(u());(0,i.verifyUser)(t.token).then(()=>e({type:r.USER_AUTH,payload:t})).catch(()=>{(0,o.clearStoredUser)()}).then(()=>{e(u())})})},function(e,t,n){"use strict";n.r(t),n.d(t,"createStore",function(){return l}),n.d(t,"combineReducers",function(){return c}),n.d(t,"bindActionCreators",function(){return p}),n.d(t,"applyMiddleware",function(){return h}),n.d(t,"compose",function(){return d}),n.d(t,"__DO_NOT_USE__ActionTypes",function(){return o});var r=n(18),o={INIT:"@@redux/INIT"+Math.random().toString(36).substring(7).split("").join("."),REPLACE:"@@redux/REPLACE"+Math.random().toString(36).substring(7).split("").join(".")},i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function u(e){if("object"!==(void 0===e?"undefined":i(e))||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function l(e,t,n){var a;if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(l)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var s=e,c=t,f=[],p=f,d=!1;function h(){p===f&&(p=f.slice())}function m(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return c}function y(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return h(),p.push(e),function(){if(t){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,h();var n=p.indexOf(e);p.splice(n,1)}}}function v(e){if(!u(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,c=s(c,e)}finally{d=!1}for(var t=f=p,n=0;n<t.length;n++){(0,t[n])()}return e}return v({type:o.INIT}),(a={dispatch:v,subscribe:y,getState:m,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");s=e,v({type:o.REPLACE})}})[r.a]=function(){var e,t=y;return(e={subscribe:function(e){if("object"!==(void 0===e?"undefined":i(e))||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(m())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e},a}function s(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function c(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var i=t[r];0,"function"==typeof e[i]&&(n[i]=e[i])}var a=Object.keys(n);var u=void 0;try{!function(e){Object.keys(e).forEach(function(t){var n=e[t];if(void 0===n(void 0,{type:o.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:"@@redux/PROBE_UNKNOWN_ACTION_"+Math.random().toString(36).substring(7).split("").join(".")}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+o.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(e){u=e}return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];if(u)throw u;for(var r=!1,o={},i=0;i<a.length;i++){var l=a[i],c=n[l],f=e[l],p=c(f,t);if(void 0===p){var d=s(l,t);throw new Error(d)}o[l]=p,r=r||p!==f}return r?o:e}}function f(e,t){return function(){return t(e.apply(this,arguments))}}function p(e,t){if("function"==typeof e)return f(e,t);if("object"!==(void 0===e?"undefined":i(e))||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":void 0===e?"undefined":i(e))+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(e),r={},o=0;o<n.length;o++){var a=n[o],u=e[a];"function"==typeof u&&(r[a]=f(u,t))}return r}function d(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}function h(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=e.apply(void 0,r),u=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},l={getState:i.getState,dispatch:function(){return u.apply(void 0,arguments)}},s=t.map(function(e){return e(l)});return u=d.apply(void 0,s)(i.dispatch),a({},i,{dispatch:u})}}}},function(e,t,n){"use strict";(function(e,r){var o,i=n(29);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(24),n(62)(e))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=s(n(1)),i=s(n(0)),a=n(5),u=n(7),l=n(8);function s(e){return e&&e.__esModule?e:{default:e}}const c=e=>{let{user:t,component:n,render:i}=e,a=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["user","component","render"]);return o.default.createElement(l.Route,r({},a,{render:e=>t?n?o.default.createElement(n,e):i?i(e):null:o.default.createElement(l.Redirect,{to:{pathname:"/auth/signin",state:{from:e.location.pathname}}})}))};c.protoTypes={user:i.default.object,component:i.default.func,render:i.default.func,location:i.default.object},t.default=(0,a.connect)(e=>({user:(0,u.getUser)(e)}),null)(c)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.verifyUser=t.signup=t.signin=t.postImage=t.getImagesByAlbum=t.getAllImages=t.postAlbum=t.getAllAlbums=void 0;var r=n(23);t.getAllAlbums=(()=>(0,r.get)("/api/albums")),t.postAlbum=(e=>(0,r.post)("/api/albums",e)),t.getAllImages=(()=>(0,r.get)("/api/images")),t.getImagesByAlbum=(e=>(0,r.get)(`/api/images?albumId=${e}`)),t.postImage=(e=>(0,r.post)("/api/images",e)),t.signin=(e=>(0,r.post)("/api/auth/signin",e)),t.signup=(e=>(0,r.post)("/api/auth/signup",e)),t.verifyUser=(e=>(0,r.get)("/api/auth/verify",{header:{Authorization:e}}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.error=function(e=null,{type:t,payload:n}){switch(t){case r:return n;case o:return null;default:return e}},t.loading=function(e=!1,{type:t}){switch(t){case i:return!0;case a:return!1;default:return e}};const r=t.ERROR="ERROR",o=t.ERROR_CLEAR="ERROR_CLEAR",i=t.LOADING_START="LOADING_START",a=t.LOADING_END="LOADING_END";t.getError=(e=>e.error),t.getLoading=(e=>e.loading)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(17),o=s(n(59)),i=s(n(58)),a=n(21),u=n(7),l=n(6);function s(e){return e&&e.__esModule?e:{default:e}}const c=(0,r.combineReducers)({albums:l.albums,album:l.album,images:l.images,user:u.user,error:a.error,loading:a.loading,checkedAuth:u.checkedAuth}),f=window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__||r.compose,p=(0,r.createStore)(c,f((0,r.applyMiddleware)(o.default,i.default)));t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.del=t.put=t.post=t.get=t.clearStoredUser=t.getStoredUser=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(e){return e&&e.__esModule?e:{default:e}}(n(22)),i=n(7);let a="";const u=window.localStorage;o.default.subscribe(()=>{const e=(0,i.getUser)(o.default.getState()),t=e&&e.token||"";t!==a&&((a=t)?u.setItem("user",JSON.stringify(e)):l())});t.getStoredUser=(()=>{const e=u.getItem("user");try{return JSON.parse(e)}catch(e){l()}});const l=t.clearStoredUser=(()=>u.removeItem("user"));function s(e,t={},n){return n&&(t.body=JSON.stringify(n)),a&&(t.headers||(t.headers={}),t.headers.Authorization=a),fetch(e,t).then(e=>[e.ok,e.json()]).then(([e,t])=>{if(e)return t;throw t.message||t.error||t.errors||t})}const c={"content-type":"application/json"};t.get=((e,t={})=>s(e,r({method:"GET"},t))),t.post=((e,t)=>s(e,{method:"POST",headers:c},t)),t.put=((e,t)=>s(e,{method:"PUT",headers:c},t)),t.del=((e,t)=>s(e,{method:"DELETE",headers:c},t))},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,i,a,u,l){if(r(t),!e){var s;if(void 0===t)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,o,i,a,u,l],f=0;(s=new Error(t.replace(/%s/g,function(){return c[f++]}))).name="Invariant Violation"}throw s.framesToPop=1,s}}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,u=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var s in n=Object(arguments[l]))o.call(n,s)&&(u[s]=n[s]);if(r){a=r(n);for(var c=0;c<a.length;c++)i.call(n,a[c])&&(u[a[c]]=n[a[c]])}}return u}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.a=n}).call(this,n(24))},function(e,t,n){(e.exports=n(10)(!0)).push([e.i,'/*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n  line-height: 1.15; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  margin: 0;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type="button"]:-moz-focusring,\n[type="reset"]:-moz-focusring,\n[type="submit"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n[type="checkbox"],\n[type="radio"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type="search"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}\n',"",{version:3,sources:["/Users/stephaniesmith/ACL/FullStack/SnapShot/SnapShot-App/node_modules/normalize.css/normalize.css"],names:[],mappings:"AAAA,4EAA4E;;AAE5E;gFACgF;;AAEhF;;;GAGG;;AAEH;EACE,kBAAkB,CAAC,OAAO;EAC1B,+BAA+B,CAAC,OAAO;CACxC;;AAED;gFACgF;;AAEhF;;GAEG;;AAEH;EACE,UAAU;CACX;;AAED;;;GAGG;;AAEH;EACE,eAAe;EACf,iBAAiB;CAClB;;AAED;gFACgF;;AAEhF;;;GAGG;;AAEH;EACE,wBAAwB,CAAC,OAAO;EAChC,UAAU,CAAC,OAAO;EAClB,kBAAkB,CAAC,OAAO;CAC3B;;AAED;;;GAGG;;AAEH;EACE,kCAAkC,CAAC,OAAO;EAC1C,eAAe,CAAC,OAAO;CACxB;;AAED;gFACgF;;AAEhF;;GAEG;;AAEH;EACE,8BAA8B;CAC/B;;AAED;;;GAGG;;AAEH;EACE,oBAAoB,CAAC,OAAO;EAC5B,2BAA2B,CAAC,OAAO;EACnC,0CAAkC;UAAlC,kCAAkC,CAAC,OAAO;CAC3C;;AAED;;GAEG;;AAEH;;EAEE,oBAAoB;CACrB;;AAED;;;GAGG;;AAEH;;;EAGE,kCAAkC,CAAC,OAAO;EAC1C,eAAe,CAAC,OAAO;CACxB;;AAED;;GAEG;;AAEH;EACE,eAAe;CAChB;;AAED;;;GAGG;;AAEH;;EAEE,eAAe;EACf,eAAe;EACf,mBAAmB;EACnB,yBAAyB;CAC1B;;AAED;EACE,gBAAgB;CACjB;;AAED;EACE,YAAY;CACb;;AAED;gFACgF;;AAEhF;;GAEG;;AAEH;EACE,mBAAmB;CACpB;;AAED;gFACgF;;AAEhF;;;GAGG;;AAEH;;;;;EAKE,qBAAqB,CAAC,OAAO;EAC7B,gBAAgB,CAAC,OAAO;EACxB,kBAAkB,CAAC,OAAO;EAC1B,UAAU,CAAC,OAAO;CACnB;;AAED;;;GAGG;;AAEH;QACQ,OAAO;EACb,kBAAkB;CACnB;;AAED;;;GAGG;;AAEH;SACS,OAAO;EACd,qBAAqB;CACtB;;AAED;;GAEG;;AAEH;;;;EAIE,2BAA2B;CAC5B;;AAED;;GAEG;;AAEH;;;;EAIE,mBAAmB;EACnB,WAAW;CACZ;;AAED;;GAEG;;AAEH;;;;EAIE,+BAA+B;CAChC;;AAED;;GAEG;;AAEH;EACE,+BAA+B;CAChC;;AAED;;;;;GAKG;;AAEH;EACE,uBAAuB,CAAC,OAAO;EAC/B,eAAe,CAAC,OAAO;EACvB,eAAe,CAAC,OAAO;EACvB,gBAAgB,CAAC,OAAO;EACxB,WAAW,CAAC,OAAO;EACnB,oBAAoB,CAAC,OAAO;CAC7B;;AAED;;GAEG;;AAEH;EACE,yBAAyB;CAC1B;;AAED;;GAEG;;AAEH;EACE,eAAe;CAChB;;AAED;;;GAGG;;AAEH;;EAEE,uBAAuB,CAAC,OAAO;EAC/B,WAAW,CAAC,OAAO;CACpB;;AAED;;GAEG;;AAEH;;EAEE,aAAa;CACd;;AAED;;;GAGG;;AAEH;EACE,8BAA8B,CAAC,OAAO;EACtC,qBAAqB,CAAC,OAAO;CAC9B;;AAED;;GAEG;;AAEH;EACE,yBAAyB;CAC1B;;AAED;;;GAGG;;AAEH;EACE,2BAA2B,CAAC,OAAO;EACnC,cAAc,CAAC,OAAO;CACvB;;AAED;gFACgF;;AAEhF;;GAEG;;AAEH;EACE,eAAe;CAChB;;AAED;;GAEG;;AAEH;EACE,mBAAmB;CACpB;;AAED;gFACgF;;AAEhF;;GAEG;;AAEH;EACE,cAAc;CACf;;AAED;;GAEG;;AAEH;EACE,cAAc;CACf",file:"normalize.css",sourcesContent:['/*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n  line-height: 1.15; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  margin: 0;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type="button"]:-moz-focusring,\n[type="reset"]:-moz-focusring,\n[type="submit"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n[type="checkbox"],\n[type="radio"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type="search"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}\n'],sourceRoot:""}])},function(e,t,n){var r=n(31);"string"==typeof r&&(r=[[e.i,r,""]]);var o={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(9)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(10)(!0)).push([e.i,"@import url(https://fonts.googleapis.com/css?family=Roboto:100,400,500,900,900i);",""]),t.push([e.i,".vAsrSUXHLz_nZPXoVz-yh {\n  height: 100vh;\n  width: 100vw;\n  display: grid;\n  grid-template-rows: 100vh 1fr;\n  overflow-x: hidden;\n  overflow-y: auto;\n  -webkit-perspective: 1px;\n          perspective: 1px;\n  margin: 0;\n}\n\n.vAsrSUXHLz_nZPXoVz-yh main {\n    min-height: 100vh;\n    width: 100%;\n    height: -webkit-fit-content;\n    height: -moz-fit-content;\n    height: fit-content;\n    padding-top: 2em;\n    padding-bottom: 2em;\n    background-color: white;\n\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    -webkit-transform: translateZ(0);\n            transform: translateZ(0);\n    top: 100vh;\n  }\n\n.vAsrSUXHLz_nZPXoVz-yh main nav {\n      width: 100%;\n      height: 3em;\n      display: flex;\n      justify-content: center;\n    }\n\n.vAsrSUXHLz_nZPXoVz-yh main nav a {\n        text-decoration: none;\n        color: black;\n        font-family: Roboto, Helvetica;\n        font-weight: 100;\n        font-size: 1em;\n        margin: .25em .75em;\n      }","",{version:3,sources:["/Users/stephaniesmith/ACL/FullStack/SnapShot/SnapShot-App/src/components/app/App.css"],names:[],mappings:"AAEA;EACE,cAAc;EACd,aAAa;EACb,cAAc;EACd,8BAA8B;EAC9B,mBAAmB;EACnB,iBAAiB;EACjB,yBAAiB;UAAjB,iBAAiB;EACjB,UAAU;CAkCX;;AAhCC;IACE,kBAAkB;IAClB,YAAY;IACZ,4BAAoB;IAApB,yBAAoB;IAApB,oBAAoB;IACpB,iBAAiB;IACjB,oBAAoB;IACpB,wBAAwB;;IAExB,mBAAmB;IACnB,OAAO;IACP,QAAQ;IACR,SAAS;IACT,UAAU;IACV,iCAAyB;YAAzB,yBAAyB;IACzB,WAAW;GAiBZ;;AAfC;MACE,YAAY;MACZ,YAAY;MACZ,cAAc;MACd,wBAAwB;KAUzB;;AARC;QACE,sBAAsB;QACtB,aAAa;QACb,+BAA+B;QAC/B,iBAAiB;QACjB,eAAe;QACf,oBAAoB;OACrB",file:"App.css",sourcesContent:["@import url('https://fonts.googleapis.com/css?family=Roboto:100,400,500,900,900i');\n\n:local(.app) {\n  height: 100vh;\n  width: 100vw;\n  display: grid;\n  grid-template-rows: 100vh 1fr;\n  overflow-x: hidden;\n  overflow-y: auto;\n  perspective: 1px;\n  margin: 0;\n\n  main {\n    min-height: 100vh;\n    width: 100%;\n    height: fit-content;\n    padding-top: 2em;\n    padding-bottom: 2em;\n    background-color: white;\n\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    transform: translateZ(0);\n    top: 100vh;\n\n    nav {\n      width: 100%;\n      height: 3em;\n      display: flex;\n      justify-content: center;\n      \n      a {\n        text-decoration: none;\n        color: black;\n        font-family: Roboto, Helvetica;\n        font-weight: 100;\n        font-size: 1em;\n        margin: .25em .75em;\n      }\n    }\n  }\n}"],sourceRoot:""}]),t.locals={app:"vAsrSUXHLz_nZPXoVz-yh"}},function(e,t,n){var r=n(33);"string"==typeof r&&(r=[[e.i,r,""]]);var o={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(9)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=a(r),i=a(n(0));function a(e){return e&&e.__esModule?e:{default:e}}class u extends r.Component{render(){const{label:e,children:t}=this.props;return o.default.createElement("div",null,e&&o.default.createElement("label",null,e,":"),o.default.createElement("div",null,t))}}u.propTypes={label:i.default.string,children:i.default.element},t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=u(r),i=u(n(0)),a=u(n(35));function u(e){return e&&e.__esModule?e:{default:e}}class l extends r.Component{constructor(...e){var t;return t=super(...e),this.state={name:"",email:"",password:""},this.handleChange=(({target:e})=>{this.setState({[e.name]:e.value})}),this.handleSubmit=(e=>{e.preventDefault(),this.props.submit(this.state)}),t}render(){const{action:e,allowName:t=!1}=this.props,{name:n,email:r,password:i}=this.state;return o.default.createElement("form",{onSubmit:this.handleSubmit},t&&o.default.createElement(a.default,{label:"name"},o.default.createElement("input",{name:"name",value:n,onChange:this.handleChange})),o.default.createElement(a.default,{label:"email"},o.default.createElement("input",{name:"email",value:r,onChange:this.handleChange})),o.default.createElement(a.default,{label:"password"},o.default.createElement("input",{type:"password",name:"password",value:i,onChange:this.handleChange})),o.default.createElement(a.default,{label:"password"},o.default.createElement("button",null,e)))}}t.default=l,l.propTypes={submit:i.default.func.isRequired,action:i.default.string.isRequired,allowName:i.default.bool}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=f(r),i=f(n(0)),a=n(8),u=n(5),l=n(16),s=n(7),c=f(n(36));function f(e){return e&&e.__esModule?e:{default:e}}class p extends r.Component{render(){const{user:e,signin:t,signup:n,location:r}=this.props,i=r.state?r.state.from:"/";return e?o.default.createElement(a.Redirect,{to:i}):o.default.createElement("div",null,o.default.createElement(a.Switch,null,o.default.createElement(a.Route,{path:"/auth/signin",component:()=>o.default.createElement("div",null,o.default.createElement("p",null,"Don't have an account?"," ",o.default.createElement(a.Link,{to:"/auth/signup"},"Sign Up")),o.default.createElement(c.default,{action:"Sign In",submit:t}))}),o.default.createElement(a.Route,{path:"/auth/signup",component:()=>o.default.createElement("div",null,o.default.createElement("p",null,"Already have an account? ",o.default.createElement(a.Link,{to:"/auth/signin"},"Sign In")),o.default.createElement(c.default,{action:"Sign Up",submit:n,allowName:!0}))}),o.default.createElement(a.Redirect,{to:"/auth/signin"})))}}p.propTypes={user:i.default.object,signin:i.default.func.isRequired,signup:i.default.func.isRequired,location:i.default.object},t.default=(0,u.connect)(e=>({user:(0,s.getUser)(e)}),{signup:l.signup,signin:l.signin})(p)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=f(r),i=f(n(0)),a=n(5),u=n(6),l=n(11),s=f(n(12)),c=f(n(15));function f(e){return e&&e.__esModule?e:{default:e}}class p extends r.Component{componentDidMount(){this.props.loadImages()}render(){const{images:e}=this.props;return e?o.default.createElement("div",{className:c.default.albums},e.map(e=>o.default.createElement(s.default,{key:e._id,url:e.url,title:e.title}))):null}}p.propTypes={loadImages:i.default.func.isRequired,images:i.default.array},t.default=(0,a.connect)(e=>({images:(0,u.getImages)(e)}),{loadImages:l.loadImages})(p)},function(e,t,n){e.exports=n.p+"b170aceb7658e55cadd4120b9c617cc9.png"},function(e,t,n){(t=e.exports=n(10)(!0)).push([e.i,".F0gPOfREPPpLBJEicPB5J {\n  font-family: Roboto, Helvetica;\n  margin: 0 5em;\n}\n\n  .F0gPOfREPPpLBJEicPB5J a {\n    width: -webkit-fit-content;\n    width: -moz-fit-content;\n    width: fit-content;\n    text-decoration: none;\n  }","",{version:3,sources:["/Users/stephaniesmith/ACL/FullStack/SnapShot/SnapShot-App/src/components/about/About.css"],names:[],mappings:"AAAA;EACE,+BAA+B;EAC/B,cAAc;CAMf;;EAJC;IACE,2BAAmB;IAAnB,wBAAmB;IAAnB,mBAAmB;IACnB,sBAAsB;GACvB",file:"About.css",sourcesContent:[":local(.about) {\n  font-family: Roboto, Helvetica;\n  margin: 0 5em;\n\n  a {\n    width: fit-content;\n    text-decoration: none;\n  }\n}"],sourceRoot:""}]),t.locals={about:"F0gPOfREPPpLBJEicPB5J"}},function(e,t,n){var r=n(40);"string"==typeof r&&(r=[[e.i,r,""]]);var o={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(9)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=l(r),i=l(n(12)),a=l(n(41)),u=l(n(39));function l(e){return e&&e.__esModule?e:{default:e}}t.default=class extends r.Component{render(){return o.default.createElement("div",{className:a.default.about},o.default.createElement("a",{href:"https://happy-northcutt-c0992c.netlify.com/"},o.default.createElement(i.default,{url:u.default,title:"Hello"})),o.default.createElement("h1",null,"I am Stephanie."),o.default.createElement("h2",null,"I made this site. Here is a little about me."),o.default.createElement("p",null,"Full-Stack JavaScript developer with a degree in industrial design. I have passion for collaborating, growth, and analyzing code to find solutions. As an avid hiker and creative, you can find me in the mountains making videos about the PNW."))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=l(r),i=l(n(0)),a=n(5),u=n(6);function l(e){return e&&e.__esModule?e:{default:e}}class s extends r.Component{constructor(...e){var t;return t=super(...e),this.state={index:0},t}handleIndex(e){event.preventDefault();const{index:t}=this.state;this.setState({index:t+e})}render(){const{images:e}=this.props,{index:t}=this.state,{title:n,description:r,url:i}=e[t];return o.default.createElement("div",null,o.default.createElement("button",{onClick:()=>this.handleIndex(-1),disabled:0===t},"back"),o.default.createElement("button",{onClick:()=>this.handleIndex(1),disabled:t===e.length-1},"next"),o.default.createElement("div",null,o.default.createElement("h2",null,n),o.default.createElement("img",{src:i}),o.default.createElement("p",null,r)))}}s.propTypes={images:i.default.array},t.default=(0,a.connect)(e=>({images:(0,u.getImages)(e)}),null)(s)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=l(r),i=l(n(0)),a=n(5),u=n(6);function l(e){return e&&e.__esModule?e:{default:e}}class s extends r.Component{render(){const{images:e}=this.props;return o.default.createElement("ul",null,e&&e.map(e=>o.default.createElement("li",{key:e._id},o.default.createElement("h3",null,e.title),o.default.createElement("p",null,e.description),o.default.createElement("p",null,e.title))))}}s.propTypes={images:i.default.array},t.default=(0,a.connect)(e=>({images:(0,u.getImages)(e)}),null)(s)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=p(r),i=n(8),a=p(n(12)),u=n(6),l=p(n(0)),s=n(5),c=p(n(15)),f=n(7);function p(e){return e&&e.__esModule?e:{default:e}}class d extends r.Component{render(){const{images:e,album:t,user:n}=this.props;return o.default.createElement("div",{className:c.default.albums},n&&o.default.createElement(i.Link,{to:`/albums/${t._id}/images/new`},o.default.createElement(a.default,{url:"https://dharmamerchantservices.com/wp-content/uploads/2015/06/add.png",title:""})),e&&e.map(e=>o.default.createElement(a.default,{key:e._id,url:e.url,title:e.title})))}}d.propTypes={album:l.default.object,images:l.default.array,user:l.default.object},t.default=(0,s.connect)(e=>({album:(0,u.getAlbum)(e),images:(0,u.getImages)(e),user:(0,f.getUser)(e)}),null)(d)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=n(1),i=c(o),a=c(n(0)),u=n(5),l=n(11),s=n(6);function c(e){return e&&e.__esModule?e:{default:e}}const f={title:"",description:"",url:""};class p extends o.Component{constructor(...e){var t;return t=super(...e),this.state={edit:null},this.handleChange=(({target:e})=>{this.setState(({edit:t})=>({edit:r({},t,{[e.placeholder]:e.value})}))}),this.handleSubmit=(e=>{e.preventDefault(),this.props.createImage(this.state.edit),this.setState({edit:r({},f)})}),t}static getDerivedStateFromProps({image:e},{edit:t}){return t?null:{edit:r({},e||f)}}componentDidMount(){this.setState({edit:r({albumId:this.props.albumId},this.state.edit)})}render(){const{title:e,description:t,url:n}=this.state;return i.default.createElement("form",{onSubmit:this.handleSubmit},i.default.createElement("input",{placeholder:"title",value:e,onChange:this.handleChange}),i.default.createElement("input",{placeholder:"description",value:t,onChange:this.handleChange}),i.default.createElement("input",{placeholder:"url",value:n,onChange:this.handleChange}),i.default.createElement("button",{type:"submit"},"Add Image"))}}p.propTypes={createImage:a.default.func.isRequired,albumId:a.default.string.isRequired},t.default=(0,u.connect)(e=>({images:(0,s.getImages)(e),albumId:(0,s.getAlbum)(e)._id}),{createImage:l.createImage})(p)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=m(r),i=m(n(0)),a=n(5),u=n(8),l=m(n(19)),s=n(6),c=n(11),f=m(n(46)),p=m(n(45)),d=m(n(44)),h=m(n(43));function m(e){return e&&e.__esModule?e:{default:e}}class y extends r.Component{componentDidMount(){this.props.loadAlbum(this.props.match.params.id)}render(){const{album:e}=this.props,{title:t,description:n,posterImage:r}=e;return o.default.createElement(u.BrowserRouter,null,o.default.createElement("div",null,t?o.default.createElement("h1",null,t):o.default.createElement("h1",null,"No title"),n?o.default.createElement("p",null,n):o.default.createElement("p",null,"No description"),r?o.default.createElement("img",{src:r}):o.default.createElement("h1",null,"No Cover Image"),o.default.createElement("nav",null,o.default.createElement(u.Link,{to:`/albums/${e._id}/images/thumbnail`},"Thumbnails")," ",o.default.createElement(u.Link,{to:`/albums/${e._id}/images/list`},"Image Details")," ",o.default.createElement(u.Link,{to:`/albums/${e._id}/images/gallery`},"Image Gallery")," "),o.default.createElement("div",null,o.default.createElement(u.Switch,null,o.default.createElement(u.Route,{path:`/albums/${e._id}/images/thumbnail`,component:p.default}),o.default.createElement(u.Route,{path:`/albums/${e._id}/images/gallery`,component:h.default}),o.default.createElement(u.Route,{path:`/albums/${e._id}/images/list`,component:d.default}),o.default.createElement(l.default,{path:`/albums/${e._id}/images/new`,component:f.default}),o.default.createElement(u.Redirect,{to:`/albums/${e._id}/images/thumbnail`})))))}}y.propTypes={album:i.default.object,images:i.default.array,match:i.default.object,loadAlbum:i.default.func.isRequired},t.default=(0,a.connect)(e=>({album:(0,s.getAlbum)(e),images:(0,s.getImages)(e)}),{loadAlbum:c.loadAlbum})(y)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=n(1),i=c(o),a=c(n(0)),u=n(5),l=n(11),s=n(6);function c(e){return e&&e.__esModule?e:{default:e}}const f={title:"",description:"",posterImage:""};class p extends o.Component{constructor(...e){var t;return t=super(...e),this.state={edit:null},this.handleChange=(({target:e})=>{this.setState(({edit:t})=>({edit:r({},t,{[e.placeholder]:e.value})}))}),this.handleSubmit=(e=>{e.preventDefault(),this.props.createAlbum(this.state.edit),this.setState({edit:r({},f)})}),t}static getDerivedStateFromProps({album:e},{edit:t}){return t?null:{edit:r({},e||f)}}render(){const{title:e,description:t,posterImage:n}=this.state;return i.default.createElement("form",{onSubmit:this.handleSubmit},i.default.createElement("input",{placeholder:"title",value:e,onChange:this.handleChange}),i.default.createElement("input",{placeholder:"description",value:t,onChange:this.handleChange}),i.default.createElement("input",{placeholder:"posterImage",value:n,onChange:this.handleChange}),i.default.createElement("button",{type:"submit"},"Add Album"))}}p.propTypes={createAlbum:a.default.func.isRequired},t.default=(0,u.connect)(e=>({albums:(0,s.getAlbums)(e)}),{createAlbum:l.createAlbum})(p)},function(e,t,n){(t=e.exports=n(10)(!0)).push([e.i,"._3P6B85OBm2jqh3QiiwUVR1 {\n  display: grid;\n  grid-column-gap: 2rem;\n  grid-row-gap: 2rem;\n  align-content: space-evenly;\n  margin: 0 auto;\n}\n\n  ._3P6B85OBm2jqh3QiiwUVR1 a {\n    text-decoration: none;\n  }\n\n@media (min-width: 800px) {\n\n  ._3P6B85OBm2jqh3QiiwUVR1 {\n    max-width: 700px;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n  }\n}\n\n@media (min-width: 1150px) {\n\n  ._3P6B85OBm2jqh3QiiwUVR1 {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    max-width: 1050px;\n  }\n}","",{version:3,sources:["/Users/stephaniesmith/ACL/FullStack/SnapShot/SnapShot-App/src/components/albums/Albums.css"],names:[],mappings:"AAAA;EACE,cAAc;EACd,sBAAsB;EACtB,mBAAmB;EACnB,4BAA4B;EAC5B,eAAe;CAgBhB;;EAdC;IACE,sBAAsB;GACvB;;AAED;;EAXF;IAYI,iBAAiB;IACjB,cAAc;IACd,+BAA+B;GAOlC;CANE;;AACD;;EAhBF;IAiBI,cAAc;IACd,mCAAmC;IACnC,kBAAkB;GAErB;CADE",file:"Albums.css",sourcesContent:[":local(.albums) {\n  display: grid;\n  grid-column-gap: 2rem;\n  grid-row-gap: 2rem;\n  align-content: space-evenly;\n  margin: 0 auto;\n\n  a {\n    text-decoration: none;\n  }\n\n  @media (min-width: 800px) {\n    max-width: 700px;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n  }\n  @media (min-width: 1150px) {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    max-width: 1050px;\n  }\n}"],sourceRoot:""}]),t.locals={albums:"_3P6B85OBm2jqh3QiiwUVR1"}},function(e,t,n){(t=e.exports=n(10)(!0)).push([e.i,"._2ayxfbQ2YqEhpcvn71N7cd {\n  height: 100vw;\n  width: 100vw;\n  max-width: 325px;\n  max-height: 325px;\n  margin: auto;\n  color: black;\n  font-family: Roboto, Helvetica;\n  font-weight: 100;\n  font-size: 1em;\n  box-shadow: 2px 2px 10px rgba(82, 82, 82, 0.66);\n  overflow: hidden;\n  background-repeat: no-repeat;\n  background-position: center; \n  background-size: cover;\n}\n  \n  ._2ayxfbQ2YqEhpcvn71N7cd h2 {\n    width: -webkit-fit-content;\n    width: -moz-fit-content;\n    width: fit-content;\n    margin: .25em .5em;\n    font-size: 3em;\n    text-decoration: none;\n    color: white;\n    text-shadow: 1.5px 1.5px 5px rgba(82, 82, 82, 0.66);\n  }\n  \n@media (min-width: 700px) {\n  \n  ._2ayxfbQ2YqEhpcvn71N7cd {\n    height: 50vw;\n    width: 50vw;\n  }\n}\n  \n@media (min-width: 1050px) {\n  \n  ._2ayxfbQ2YqEhpcvn71N7cd {\n    height: 33vw;\n    width: 33vw;\n  }\n}\n","",{version:3,sources:["/Users/stephaniesmith/ACL/FullStack/SnapShot/SnapShot-App/src/components/thumbnail/Thumbnail.css"],names:[],mappings:"AAAA;EACE,cAAc;EACd,aAAa;EACb,iBAAiB;EACjB,kBAAkB;EAClB,aAAa;EACb,aAAa;EACb,+BAA+B;EAC/B,iBAAiB;EACjB,eAAe;EACf,gDAAgD;EAChD,iBAAiB;EACjB,6BAA6B;EAC7B,4BAA4B;EAC5B,uBAAuB;CAoBxB;;EAlBC;IACE,2BAAmB;IAAnB,wBAAmB;IAAnB,mBAAmB;IACnB,mBAAmB;IACnB,eAAe;IACf,sBAAsB;IACtB,aAAa;IACb,oDAAoD;GACrD;;AAED;;EAzBF;IA0BI,aAAa;IACb,YAAY;GAOf;CANE;;AAED;;EA9BF;IA+BI,aAAa;IACb,YAAY;GAEf;CADE",file:"Thumbnail.css",sourcesContent:[":local(.thumbnail) {\n  height: 100vw;\n  width: 100vw;\n  max-width: 325px;\n  max-height: 325px;\n  margin: auto;\n  color: black;\n  font-family: Roboto, Helvetica;\n  font-weight: 100;\n  font-size: 1em;\n  box-shadow: 2px 2px 10px rgba(82, 82, 82, 0.66);\n  overflow: hidden;\n  background-repeat: no-repeat;\n  background-position: center; \n  background-size: cover;\n  \n  h2 {\n    width: fit-content;\n    margin: .25em .5em;\n    font-size: 3em;\n    text-decoration: none;\n    color: white;\n    text-shadow: 1.5px 1.5px 5px rgba(82, 82, 82, 0.66);\n  }\n\n  @media (min-width: 700px) {\n    height: 50vw;\n    width: 50vw;\n  }\n\n  @media (min-width: 1050px) {\n    height: 33vw;\n    width: 33vw;\n  }\n}\n"],sourceRoot:""}]),t.locals={thumbnail:"_2ayxfbQ2YqEhpcvn71N7cd"}},function(e,t,n){var r=n(50);"string"==typeof r&&(r=[[e.i,r,""]]);var o={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(9)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=p(r),i=p(n(0)),a=n(8),u=n(5),l=n(6),s=n(11),c=p(n(12)),f=p(n(15));function p(e){return e&&e.__esModule?e:{default:e}}class d extends r.Component{componentDidMount(){this.props.loadAlbums()}render(){const{albums:e}=this.props;return e?o.default.createElement("div",{className:f.default.albums},o.default.createElement(a.Link,{to:"/albums/new"},o.default.createElement(c.default,{url:"https://dharmamerchantservices.com/wp-content/uploads/2015/06/add.png",title:""})),e.map(e=>o.default.createElement(a.Link,{key:e._id,to:`/albums/${e._id}/images/thumbnail`},o.default.createElement(c.default,{url:e.posterImage,title:e.title})))):null}}d.propTypes={loadAlbums:i.default.func.isRequired,albums:i.default.array},t.default=(0,u.connect)(e=>({albums:(0,l.getAlbums)(e)}),{loadAlbums:s.loadAlbums})(d)},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){(t=e.exports=n(10)(!0)).push([e.i,"@import url(https://fonts.googleapis.com/css?family=Roboto:900);",""]),t.push([e.i,"._3AGlt-Gg3cJwjElbNhHvxZ {\n  width: 100vw;\n  font-family: 'Roboto';\n  display: grid;\n  grid-template-rows: 100vh 50px;\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  -webkit-transform: translateZ(-1px) scale(2);\n          transform: translateZ(-1px) scale(2);\n}\n\n._3AGlt-Gg3cJwjElbNhHvxZ img {\n      height: 100vh;\n      position: absolute;\n      margin-left: 50%;\n      -webkit-transform: translateX(-54%);\n              transform: translateX(-54%);\n      z-index: -1;\n      box-shadow: inset 0 -4em 15em black;\n      }\n\n._3AGlt-Gg3cJwjElbNhHvxZ h1 {\n      font-weight: 900i;\n      color: white;\n      font-size: 5em;\n      width: -webkit-fit-content;\n      width: -moz-fit-content;\n      width: fit-content;\n      margin: 45vh auto auto auto;\n    }\n\n._3AGlt-Gg3cJwjElbNhHvxZ nav {\n  //   background-color: aqua;\n  //   position: relative;\n  //   margin: 0 auto;\n  //   text-align: center;\n  }","",{version:3,sources:["/Users/stephaniesmith/ACL/FullStack/SnapShot/SnapShot-App/src/components/app/Header.css"],names:[],mappings:"AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,cAAc;EACd,+BAA+B;EAC/B,mBAAmB;EACnB,OAAO;EACP,QAAQ;EACR,SAAS;EACT,UAAU;EACV,6CAAqC;UAArC,qCAAqC;CAyBtC;;AAvBG;MACE,cAAc;MACd,mBAAmB;MACnB,iBAAiB;MACjB,oCAA4B;cAA5B,4BAA4B;MAC5B,YAAY;MACZ,oCAAoC;OACnC;;AAEH;MACE,kBAAkB;MAClB,aAAa;MACb,eAAe;MACf,2BAAmB;MAAnB,wBAAmB;MAAnB,mBAAmB;MACnB,4BAA4B;KAC7B;;AAEH;EACA,4BAA4B;EAC5B,wBAAwB;EACxB,oBAAoB;EACpB,wBAAwB;GACvB",file:"Header.css",sourcesContent:["@import url('https://fonts.googleapis.com/css?family=Roboto:900');\n\n:local(.header) {\n  width: 100vw;\n  font-family: 'Roboto';\n  display: grid;\n  grid-template-rows: 100vh 50px;\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  transform: translateZ(-1px) scale(2);\n     \n    img {\n      height: 100vh;\n      position: absolute;\n      margin-left: 50%;\n      transform: translateX(-54%);\n      z-index: -1;\n      box-shadow: inset 0 -4em 15em black;\n      }\n  \n    h1 {\n      font-weight: 900i;\n      color: white;\n      font-size: 5em;\n      width: fit-content;\n      margin: 45vh auto auto auto;\n    }\n\n  nav {\n  //   background-color: aqua;\n  //   position: relative;\n  //   margin: 0 auto;\n  //   text-align: center;\n  }\n}"],sourceRoot:""}]),t.locals={header:"_3AGlt-Gg3cJwjElbNhHvxZ"}},function(e,t,n){var r=n(54);"string"==typeof r&&(r=[[e.i,r,""]]);var o={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};n(9)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){e.exports=n.p+"9eea6e9d6269317288c58822474e49dd.jpg"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=c(r),i=(n(8),c(n(0))),a=n(5),u=n(7),l=(n(16),c(n(56))),s=c(n(55));function c(e){return e&&e.__esModule?e:{default:e}}class f extends r.Component{render(){const{user:e}=this.props;return o.default.createElement("header",{className:s.default.header},o.default.createElement("img",{src:l.default}),o.default.createElement("h1",null,"SnapShot"),e&&o.default.createElement("span",null,"Hello ",e.name,"!"))}}f.propTypes={user:i.default.object},t.default=(0,a.connect)(e=>({user:(0,u.getUser)(e)}),null)(f)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(21);t.default=(({dispatch:e})=>t=>n=>{const{type:o,payload:i}=n;return(e=>e&&"function"==typeof e.then)(i)?(e({type:r.LOADING_START}),i.then(t=>(e({type:r.LOADING_END}),e({type:o,payload:t})),t=>{throw e({type:r.LOADING_END}),e({type:r.ERROR,payload:t}),t})):t(n)})},function(e,t,n){"use strict";function r(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}n.r(t);var o=r();o.withExtraArgument=r,t.default=o},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=b(r),i=b(n(0)),a=n(8),u=n(5),l=n(16),s=n(7),c=b(n(19)),f=b(n(57)),p=b(n(52)),d=b(n(48)),h=b(n(47)),m=b(n(42)),y=b(n(38)),v=b(n(37)),g=b(n(34));function b(e){return e&&e.__esModule?e:{default:e}}class A extends r.Component{constructor(...e){var t;return t=super(...e),this.handleLogout=(()=>{this.props.logout()}),t}componentDidMount(){this.props.tryLoadUser()}render(){const{checkedAuth:e,user:t}=this.props;return o.default.createElement(a.BrowserRouter,null,o.default.createElement("div",{className:g.default.app},o.default.createElement(f.default,null),o.default.createElement("main",null,o.default.createElement("nav",null,o.default.createElement(a.Link,{to:"/albums"},"Albums")," ",o.default.createElement(a.Link,{to:"/about"},"About")," ",o.default.createElement(a.Link,{to:"/images"},"Images")," ",t?o.default.createElement(a.Link,{to:"/",onClick:this.handleLogout},"Logout"):o.default.createElement(a.Link,{to:"/auth"},"Login")),e&&o.default.createElement(a.Switch,null,o.default.createElement(a.Route,{exact:!0,path:"/",component:p.default}),o.default.createElement(a.Route,{path:"/auth",component:v.default}),o.default.createElement(c.default,{path:"/albums/new",component:d.default}),o.default.createElement(a.Route,{path:"/albums/:id/images/thumbnail",component:h.default}),o.default.createElement(a.Route,{path:"/albums",component:p.default}),o.default.createElement(a.Route,{path:"/about",component:m.default}),o.default.createElement(a.Route,{path:"/images",component:y.default}),o.default.createElement(a.Redirect,{to:"/"})))))}}A.propTypes={logout:i.default.func.isRequired,tryLoadUser:i.default.func.isRequired,checkedAuth:i.default.bool.isRequired,user:i.default.object},t.default=(0,u.connect)(e=>({checkedAuth:(0,s.getCheckedAuth)(e),user:(0,s.getUser)(e)}),{tryLoadUser:l.tryLoadUser,logout:l.logout})(A)},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=n(63);function o(){}e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=o,n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t,n){"use strict";var r=n(65);e.exports=function(e){return r(e)&&3==e.nodeType}},function(e,t,n){"use strict";var r=n(66);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(o(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;for(var a=0;a<n.length;a++)if(!r.call(t,n[a])||!o(e[n[a]],t[n[a]]))return!1;return!0}},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},function(e,t,n){"use strict";
/** @license React v16.4.1
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(27),o=n(1),i=n(70),a=n(28),u=n(25),l=n(69),s=n(68),c=n(67),f=n(26);function p(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,o=0;o<t;o++)n+="&args[]="+encodeURIComponent(arguments[o+1]);r(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}o||p("227");var d={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,r,o,i,a,u,l){(function(e,t,n,r,o,i,a,u,l){this._hasCaughtError=!1,this._caughtError=null;var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}).apply(d,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,i,a,u,l){if(d.invokeGuardedCallback.apply(this,arguments),d.hasCaughtError()){var s=d.clearCaughtError();d._hasRethrowError||(d._hasRethrowError=!0,d._rethrowError=s)}},rethrowCaughtError:function(){return function(){if(d._hasRethrowError){var e=d._rethrowError;throw d._rethrowError=null,d._hasRethrowError=!1,e}}.apply(d,arguments)},hasCaughtError:function(){return d._hasCaughtError},clearCaughtError:function(){if(d._hasCaughtError){var e=d._caughtError;return d._caughtError=null,d._hasCaughtError=!1,e}p("198")}};var h=null,m={};function y(){if(h)for(var e in m){var t=m[e],n=h.indexOf(e);if(-1<n||p("96",e),!g[n])for(var r in t.extractEvents||p("97",e),g[n]=t,n=t.eventTypes){var o=void 0,i=n[r],a=t,u=r;b.hasOwnProperty(u)&&p("99",u),b[u]=i;var l=i.phasedRegistrationNames;if(l){for(o in l)l.hasOwnProperty(o)&&v(l[o],a,u);o=!0}else i.registrationName?(v(i.registrationName,a,u),o=!0):o=!1;o||p("98",r,e)}}}function v(e,t,n){A[e]&&p("100",e),A[e]=t,w[e]=t.eventTypes[n].dependencies}var g=[],b={},A={},w={};function E(e){h&&p("101"),h=Array.prototype.slice.call(e),y()}function C(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];m.hasOwnProperty(t)&&m[t]===r||(m[t]&&p("102",t),m[t]=r,n=!0)}n&&y()}var x={plugins:g,eventNameDispatchConfigs:b,registrationNameModules:A,registrationNameDependencies:w,possibleRegistrationNames:null,injectEventPluginOrder:E,injectEventPluginsByName:C},k=null,O=null,S=null;function _(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=S(r),d.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function T(e,t){return null==t&&p("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function P(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var R=null;function B(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)_(e,t,n[o],r[o]);else n&&_(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function j(e){return B(e,!0)}function I(e){return B(e,!1)}var N={injectEventPluginOrder:E,injectEventPluginsByName:C};function M(e,t){var n=e.stateNode;if(!n)return null;var r=k(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&p("231",t,typeof n),n)}function U(e,t){null!==e&&(R=T(R,e)),e=R,R=null,e&&(P(e,t?j:I),R&&p("95"),d.rethrowCaughtError())}function D(e,t,n,r){for(var o=null,i=0;i<g.length;i++){var a=g[i];a&&(a=a.extractEvents(e,t,n,r))&&(o=T(o,a))}U(o,!1)}var L={injection:N,getListener:M,runEventsInBatch:U,runExtractedEventsInBatch:D},F=Math.random().toString(36).slice(2),z="__reactInternalInstance$"+F,H="__reactEventHandlers$"+F;function G(e){if(e[z])return e[z];for(;!e[z];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[z]).tag||6===e.tag?e:null}function q(e){if(5===e.tag||6===e.tag)return e.stateNode;p("33")}function W(e){return e[H]||null}var V={precacheFiberNode:function(e,t){t[z]=e},getClosestInstanceFromNode:G,getInstanceFromNode:function(e){return!(e=e[z])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:q,getFiberCurrentPropsFromNode:W,updateFiberProps:function(e,t){e[H]=t}};function $(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Y(e,t,n){for(var r=[];e;)r.push(e),e=$(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function Q(e,t,n){(t=M(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=T(n._dispatchListeners,t),n._dispatchInstances=T(n._dispatchInstances,e))}function K(e){e&&e.dispatchConfig.phasedRegistrationNames&&Y(e._targetInst,Q,e)}function X(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;Y(t=t?$(t):null,Q,e)}}function Z(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=M(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=T(n._dispatchListeners,t),n._dispatchInstances=T(n._dispatchInstances,e))}function J(e){e&&e.dispatchConfig.registrationName&&Z(e._targetInst,null,e)}function ee(e){P(e,K)}function te(e,t,n,r){if(n&&r)e:{for(var o=n,i=r,a=0,u=o;u;u=$(u))a++;u=0;for(var l=i;l;l=$(l))u++;for(;0<a-u;)o=$(o),a--;for(;0<u-a;)i=$(i),u--;for(;a--;){if(o===i||o===i.alternate)break e;o=$(o),i=$(i)}o=null}else o=null;for(i=o,o=[];n&&n!==i&&(null===(a=n.alternate)||a!==i);)o.push(n),n=$(n);for(n=[];r&&r!==i&&(null===(a=r.alternate)||a!==i);)n.push(r),r=$(r);for(r=0;r<o.length;r++)Z(o[r],"bubbled",e);for(e=n.length;0<e--;)Z(n[e],"captured",t)}var ne={accumulateTwoPhaseDispatches:ee,accumulateTwoPhaseDispatchesSkipTarget:function(e){P(e,X)},accumulateEnterLeaveDispatches:te,accumulateDirectDispatches:function(e){P(e,J)}};function re(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var oe={animationend:re("Animation","AnimationEnd"),animationiteration:re("Animation","AnimationIteration"),animationstart:re("Animation","AnimationStart"),transitionend:re("Transition","TransitionEnd")},ie={},ae={};function ue(e){if(ie[e])return ie[e];if(!oe[e])return e;var t,n=oe[e];for(t in n)if(n.hasOwnProperty(t)&&t in ae)return ie[e]=n[t];return e}i.canUseDOM&&(ae=document.createElement("div").style,"AnimationEvent"in window||(delete oe.animationend.animation,delete oe.animationiteration.animation,delete oe.animationstart.animation),"TransitionEvent"in window||delete oe.transitionend.transition);var le=ue("animationend"),se=ue("animationiteration"),ce=ue("animationstart"),fe=ue("transitionend"),pe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),de=null;function he(){return!de&&i.canUseDOM&&(de="textContent"in document.documentElement?"textContent":"innerText"),de}var me={_root:null,_startText:null,_fallbackText:null};function ye(){if(me._fallbackText)return me._fallbackText;var e,t,n=me._startText,r=n.length,o=ve(),i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return me._fallbackText=o.slice(e,1<t?1-t:void 0),me._fallbackText}function ve(){return"value"in me._root?me._root.value:me._root[he()]}var ge="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),be={type:null,target:null,currentTarget:u.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function Ae(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?u.thatReturnsTrue:u.thatReturnsFalse,this.isPropagationStopped=u.thatReturnsFalse,this}function we(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function Ee(e){e instanceof this||p("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Ce(e){e.eventPool=[],e.getPooled=we,e.release=Ee}a(Ae.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=u.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=u.thatReturnsTrue)},persist:function(){this.isPersistent=u.thatReturnsTrue},isPersistent:u.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<ge.length;t++)this[ge[t]]=null}}),Ae.Interface=be,Ae.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return a(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=a({},r.Interface,e),n.extend=r.extend,Ce(n),n},Ce(Ae);var xe=Ae.extend({data:null}),ke=Ae.extend({data:null}),Oe=[9,13,27,32],Se=i.canUseDOM&&"CompositionEvent"in window,_e=null;i.canUseDOM&&"documentMode"in document&&(_e=document.documentMode);var Te=i.canUseDOM&&"TextEvent"in window&&!_e,Pe=i.canUseDOM&&(!Se||_e&&8<_e&&11>=_e),Re=String.fromCharCode(32),Be={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},je=!1;function Ie(e,t){switch(e){case"keyup":return-1!==Oe.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Ne(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Me=!1;var Ue={eventTypes:Be,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(Se)e:{switch(e){case"compositionstart":o=Be.compositionStart;break e;case"compositionend":o=Be.compositionEnd;break e;case"compositionupdate":o=Be.compositionUpdate;break e}o=void 0}else Me?Ie(e,n)&&(o=Be.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=Be.compositionStart);return o?(Pe&&(Me||o!==Be.compositionStart?o===Be.compositionEnd&&Me&&(i=ye()):(me._root=r,me._startText=ve(),Me=!0)),o=xe.getPooled(o,t,n,r),i?o.data=i:null!==(i=Ne(n))&&(o.data=i),ee(o),i=o):i=null,(e=Te?function(e,t){switch(e){case"compositionend":return Ne(t);case"keypress":return 32!==t.which?null:(je=!0,Re);case"textInput":return(e=t.data)===Re&&je?null:e;default:return null}}(e,n):function(e,t){if(Me)return"compositionend"===e||!Se&&Ie(e,t)?(e=ye(),me._root=null,me._startText=null,me._fallbackText=null,Me=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Pe?null:t.data;default:return null}}(e,n))?((t=ke.getPooled(Be.beforeInput,t,n,r)).data=e,ee(t)):t=null,null===i?t:null===t?i:[i,t]}},De=null,Le={injectFiberControlledHostComponent:function(e){De=e}},Fe=null,ze=null;function He(e){if(e=O(e)){De&&"function"==typeof De.restoreControlledState||p("194");var t=k(e.stateNode);De.restoreControlledState(e.stateNode,e.type,t)}}function Ge(e){Fe?ze?ze.push(e):ze=[e]:Fe=e}function qe(){return null!==Fe||null!==ze}function We(){if(Fe){var e=Fe,t=ze;if(ze=Fe=null,He(e),t)for(e=0;e<t.length;e++)He(t[e])}}var Ve={injection:Le,enqueueStateRestore:Ge,needsStateRestore:qe,restoreStateIfNeeded:We};function $e(e,t){return e(t)}function Ye(e,t,n){return e(t,n)}function Qe(){}var Ke=!1;function Xe(e,t){if(Ke)return e(t);Ke=!0;try{return $e(e,t)}finally{Ke=!1,qe()&&(Qe(),We())}}var Ze={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Je(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Ze[e.type]:"textarea"===t}function et(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function tt(e,t){return!(!i.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function nt(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function rt(e){e._valueTracker||(e._valueTracker=function(e){var t=nt(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function ot(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=nt(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var it=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,at="function"==typeof Symbol&&Symbol.for,ut=at?Symbol.for("react.element"):60103,lt=at?Symbol.for("react.portal"):60106,st=at?Symbol.for("react.fragment"):60107,ct=at?Symbol.for("react.strict_mode"):60108,ft=at?Symbol.for("react.profiler"):60114,pt=at?Symbol.for("react.provider"):60109,dt=at?Symbol.for("react.context"):60110,ht=at?Symbol.for("react.async_mode"):60111,mt=at?Symbol.for("react.forward_ref"):60112,yt=at?Symbol.for("react.timeout"):60113,vt="function"==typeof Symbol&&Symbol.iterator;function gt(e){return null===e||void 0===e?null:"function"==typeof(e=vt&&e[vt]||e["@@iterator"])?e:null}function bt(e){var t=e.type;if("function"==typeof t)return t.displayName||t.name;if("string"==typeof t)return t;switch(t){case ht:return"AsyncMode";case dt:return"Context.Consumer";case st:return"ReactFragment";case lt:return"ReactPortal";case ft:return"Profiler("+e.pendingProps.id+")";case pt:return"Context.Provider";case ct:return"StrictMode";case yt:return"Timeout"}if("object"==typeof t&&null!==t)switch(t.$$typeof){case mt:return""!==(e=t.render.displayName||t.render.name||"")?"ForwardRef("+e+")":"ForwardRef"}return null}function At(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var n=e._debugOwner,r=e._debugSource,o=bt(e),i=null;n&&(i=bt(n)),n=r,o="\n    in "+(o||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":i?" (created by "+i+")":"");break e;default:o=""}t+=o,e=e.return}while(e);return t}var wt=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Et={},Ct={};function xt(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var kt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){kt[e]=new xt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];kt[t]=new xt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){kt[e]=new xt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){kt[e]=new xt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){kt[e]=new xt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){kt[e]=new xt(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){kt[e]=new xt(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){kt[e]=new xt(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){kt[e]=new xt(e,5,!1,e.toLowerCase(),null)});var Ot=/[\-:]([a-z])/g;function St(e){return e[1].toUpperCase()}function _t(e,t,n,r){var o=kt.hasOwnProperty(t)?kt[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||void 0===t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!Ct.hasOwnProperty(e)||!Et.hasOwnProperty(e)&&(wt.test(e)?Ct[e]=!0:(Et[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function Tt(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Pt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Nt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Rt(e,t){null!=(t=t.checked)&&_t(e,"checked",t,!1)}function Bt(e,t){Rt(e,t);var n=Nt(t.value);null!=n&&("number"===t.type?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n)),t.hasOwnProperty("value")?It(e,t.type,n):t.hasOwnProperty("defaultValue")&&It(e,t.type,Nt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function jt(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){t=""+e._wrapperState.initialValue;var r=e.value;n||t===r||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==n&&(e.name=n)}function It(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Nt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(Ot,St);kt[t]=new xt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(Ot,St);kt[t]=new xt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(Ot,St);kt[t]=new xt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),kt.tabIndex=new xt("tabIndex",1,!1,"tabindex",null);var Mt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Ut(e,t,n){return(e=Ae.getPooled(Mt.change,e,t,n)).type="change",Ge(n),ee(e),e}var Dt=null,Lt=null;function Ft(e){U(e,!1)}function zt(e){if(ot(q(e)))return e}function Ht(e,t){if("change"===e)return t}var Gt=!1;function qt(){Dt&&(Dt.detachEvent("onpropertychange",Wt),Lt=Dt=null)}function Wt(e){"value"===e.propertyName&&zt(Lt)&&Xe(Ft,e=Ut(Lt,e,et(e)))}function Vt(e,t,n){"focus"===e?(qt(),Lt=n,(Dt=t).attachEvent("onpropertychange",Wt)):"blur"===e&&qt()}function $t(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return zt(Lt)}function Yt(e,t){if("click"===e)return zt(t)}function Qt(e,t){if("input"===e||"change"===e)return zt(t)}i.canUseDOM&&(Gt=tt("input")&&(!document.documentMode||9<document.documentMode));var Kt={eventTypes:Mt,_isInputEventSupported:Gt,extractEvents:function(e,t,n,r){var o=t?q(t):window,i=void 0,a=void 0,u=o.nodeName&&o.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===o.type?i=Ht:Je(o)?Gt?i=Qt:(i=$t,a=Vt):(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Yt),i&&(i=i(e,t)))return Ut(i,n,r);a&&a(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&It(o,"number",o.value)}},Xt=Ae.extend({view:null,detail:null}),Zt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Jt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Zt[e])&&!!t[e]}function en(){return Jt}var tn=Xt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:en,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),nn=tn.extend({pointerId:null,width:null,height:null,pressure:null,tiltX:null,tiltY:null,pointerType:null,isPrimary:null}),rn={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},on={eventTypes:rn,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=t,t=(t=n.relatedTarget||n.toElement)?G(t):null):i=null,i===t)return null;var a=void 0,u=void 0,l=void 0,s=void 0;return"mouseout"===e||"mouseover"===e?(a=tn,u=rn.mouseLeave,l=rn.mouseEnter,s="mouse"):"pointerout"!==e&&"pointerover"!==e||(a=nn,u=rn.pointerLeave,l=rn.pointerEnter,s="pointer"),e=null==i?o:q(i),o=null==t?o:q(t),(u=a.getPooled(u,i,n,r)).type=s+"leave",u.target=e,u.relatedTarget=o,(n=a.getPooled(l,t,n,r)).type=s+"enter",n.target=o,n.relatedTarget=e,te(u,n,i,t),[u,n]}};function an(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function un(e){2!==an(e)&&p("188")}function ln(e){var t=e.alternate;if(!t)return 3===(t=an(e))&&p("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var a=o.child;a;){if(a===n)return un(o),e;if(a===r)return un(o),t;a=a.sibling}p("188")}if(n.return!==r.return)n=o,r=i;else{a=!1;for(var u=o.child;u;){if(u===n){a=!0,n=o,r=i;break}if(u===r){a=!0,r=o,n=i;break}u=u.sibling}if(!a){for(u=i.child;u;){if(u===n){a=!0,n=i,r=o;break}if(u===r){a=!0,r=i,n=o;break}u=u.sibling}a||p("189")}}n.alternate!==r&&p("190")}return 3!==n.tag&&p("188"),n.stateNode.current===n?e:t}function sn(e){if(!(e=ln(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var cn=Ae.extend({animationName:null,elapsedTime:null,pseudoElement:null}),fn=Ae.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),pn=Xt.extend({relatedTarget:null});function dn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var hn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},mn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},yn=Xt.extend({key:function(e){if(e.key){var t=hn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=dn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?mn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:en,charCode:function(e){return"keypress"===e.type?dn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?dn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),vn=tn.extend({dataTransfer:null}),gn=Xt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:en}),bn=Ae.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),An=tn.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),wn=[["abort","abort"],[le,"animationEnd"],[se,"animationIteration"],[ce,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[fe,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],En={},Cn={};function xn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},En[e]=t,Cn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){xn(e,!0)}),wn.forEach(function(e){xn(e,!1)});var kn={eventTypes:En,isInteractiveTopLevelEventType:function(e){return void 0!==(e=Cn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=Cn[e];if(!o)return null;switch(e){case"keypress":if(0===dn(n))return null;case"keydown":case"keyup":e=yn;break;case"blur":case"focus":e=pn;break;case"click":if(2===n.button)return null;case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=tn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=vn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=gn;break;case le:case se:case ce:e=cn;break;case fe:e=bn;break;case"scroll":e=Xt;break;case"wheel":e=An;break;case"copy":case"cut":case"paste":e=fn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=nn;break;default:e=Ae}return ee(t=e.getPooled(o,t,n,r)),t}},On=kn.isInteractiveTopLevelEventType,Sn=[];function _n(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=G(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],D(e.topLevelType,t,e.nativeEvent,et(e.nativeEvent))}var Tn=!0;function Pn(e){Tn=!!e}function Rn(e,t){if(!t)return null;var n=(On(e)?jn:In).bind(null,e);t.addEventListener(e,n,!1)}function Bn(e,t){if(!t)return null;var n=(On(e)?jn:In).bind(null,e);t.addEventListener(e,n,!0)}function jn(e,t){Ye(In,e,t)}function In(e,t){if(Tn){var n=et(t);if(null===(n=G(n))||"number"!=typeof n.tag||2===an(n)||(n=null),Sn.length){var r=Sn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Xe(_n,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>Sn.length&&Sn.push(e)}}}var Nn={get _enabled(){return Tn},setEnabled:Pn,isEnabled:function(){return Tn},trapBubbledEvent:Rn,trapCapturedEvent:Bn,dispatchEvent:In},Mn={},Un=0,Dn="_reactListenersID"+(""+Math.random()).slice(2);function Ln(e){return Object.prototype.hasOwnProperty.call(e,Dn)||(e[Dn]=Un++,Mn[e[Dn]]={}),Mn[e[Dn]]}function Fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function zn(e,t){var n,r=Fn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Fn(r)}}function Hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Gn=i.canUseDOM&&"documentMode"in document&&11>=document.documentMode,qn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Wn=null,Vn=null,$n=null,Yn=!1;function Qn(e,t){if(Yn||null==Wn||Wn!==l())return null;var n=Wn;return"selectionStart"in n&&Hn(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,$n&&s($n,n)?null:($n=n,(e=Ae.getPooled(qn.select,Vn,e,t)).type="select",e.target=Wn,ee(e),e)}var Kn={eventTypes:qn,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=Ln(i),o=w.onSelect;for(var a=0;a<o.length;a++){var u=o[a];if(!i.hasOwnProperty(u)||!i[u]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?q(t):window,e){case"focus":(Je(i)||"true"===i.contentEditable)&&(Wn=i,Vn=t,$n=null);break;case"blur":$n=Vn=Wn=null;break;case"mousedown":Yn=!0;break;case"contextmenu":case"mouseup":return Yn=!1,Qn(n,r);case"selectionchange":if(Gn)break;case"keydown":case"keyup":return Qn(n,r)}return null}};N.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),k=V.getFiberCurrentPropsFromNode,O=V.getInstanceFromNode,S=V.getNodeFromInstance,N.injectEventPluginsByName({SimpleEventPlugin:kn,EnterLeaveEventPlugin:on,ChangeEventPlugin:Kt,SelectEventPlugin:Kn,BeforeInputEventPlugin:Ue});var Xn="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,Zn=Date,Jn=setTimeout,er=clearTimeout,tr=void 0;if("object"==typeof performance&&"function"==typeof performance.now){var nr=performance;tr=function(){return nr.now()}}else tr=function(){return Zn.now()};var rr=void 0,or=void 0;if(i.canUseDOM){var ir="function"==typeof Xn?Xn:function(){p("276")},ar=null,ur=null,lr=-1,sr=!1,cr=!1,fr=0,pr=33,dr=33,hr={didTimeout:!1,timeRemaining:function(){var e=fr-tr();return 0<e?e:0}},mr=function(e,t){var n=e.scheduledCallback,r=!1;try{n(t),r=!0}finally{or(e),r||(sr=!0,window.postMessage(yr,"*"))}},yr="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===yr&&(sr=!1,null!==ar)){if(null!==ar){var t=tr();if(!(-1===lr||lr>t)){e=-1;for(var n=[],r=ar;null!==r;){var o=r.timeoutTime;-1!==o&&o<=t?n.push(r):-1!==o&&(-1===e||o<e)&&(e=o),r=r.next}if(0<n.length)for(hr.didTimeout=!0,t=0,r=n.length;t<r;t++)mr(n[t],hr);lr=e}}for(e=tr();0<fr-e&&null!==ar;)e=ar,hr.didTimeout=!1,mr(e,hr),e=tr();null===ar||cr||(cr=!0,ir(vr))}},!1);var vr=function(e){cr=!1;var t=e-fr+dr;t<dr&&pr<dr?(8>t&&(t=8),dr=t<pr?pr:t):pr=t,fr=e+dr,sr||(sr=!0,window.postMessage(yr,"*"))};rr=function(e,t){var n=-1;return null!=t&&"number"==typeof t.timeout&&(n=tr()+t.timeout),(-1===lr||-1!==n&&n<lr)&&(lr=n),e={scheduledCallback:e,timeoutTime:n,prev:null,next:null},null===ar?ar=e:null!==(t=e.prev=ur)&&(t.next=e),ur=e,cr||(cr=!0,ir(vr)),e},or=function(e){if(null!==e.prev||ar===e){var t=e.next,n=e.prev;e.next=null,e.prev=null,null!==t?null!==n?(n.next=t,t.prev=n):(t.prev=null,ar=t):null!==n?(n.next=null,ur=n):ur=ar=null}}}else{var gr=new Map;rr=function(e){var t={scheduledCallback:e,timeoutTime:0,next:null,prev:null},n=Jn(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})});return gr.set(e,n),t},or=function(e){var t=gr.get(e.scheduledCallback);gr.delete(e),er(t)}}function br(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return o.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function Ar(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function wr(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function Er(e,t){return null!=t.dangerouslySetInnerHTML&&p("91"),a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Cr(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&p("92"),Array.isArray(t)&&(1>=t.length||p("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function xr(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function kr(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var Or={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Sr(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function _r(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Sr(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Tr=void 0,Pr=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction(function(){return e(t,n)})}:e}(function(e,t){if(e.namespaceURI!==Or.svg||"innerHTML"in e)e.innerHTML=t;else{for((Tr=Tr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=Tr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function Rr(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var Br={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},jr=["Webkit","ms","Moz","O"];function Ir(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,i=t[n];o=null==i||"boolean"==typeof i||""===i?"":r||"number"!=typeof i||0===i||Br.hasOwnProperty(o)&&Br[o]?(""+i).trim():i+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Br).forEach(function(e){jr.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Br[t]=Br[e]})});var Nr=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Mr(e,t,n){t&&(Nr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&p("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&p("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||p("61")),null!=t.style&&"object"!=typeof t.style&&p("62",n()))}function Ur(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Dr=u.thatReturns("");function Lr(e,t){var n=Ln(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=w[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":Bn("scroll",e);break;case"focus":case"blur":Bn("focus",e),Bn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":tt(o,!0)&&Bn(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===pe.indexOf(o)&&Rn(o,e)}n[o]=!0}}}function Fr(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===Or.html&&(r=Sr(e)),r===Or.html?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function zr(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function Hr(e,t,n,r){var o=Ur(t,n);switch(t){case"iframe":case"object":Rn("load",e);var i=n;break;case"video":case"audio":for(i=0;i<pe.length;i++)Rn(pe[i],e);i=n;break;case"source":Rn("error",e),i=n;break;case"img":case"image":case"link":Rn("error",e),Rn("load",e),i=n;break;case"form":Rn("reset",e),Rn("submit",e),i=n;break;case"details":Rn("toggle",e),i=n;break;case"input":Pt(e,n),i=Tt(e,n),Rn("invalid",e),Lr(r,"onChange");break;case"option":i=br(e,n);break;case"select":wr(e,n),i=a({},n,{value:void 0}),Rn("invalid",e),Lr(r,"onChange");break;case"textarea":Cr(e,n),i=Er(e,n),Rn("invalid",e),Lr(r,"onChange");break;default:i=n}Mr(t,i,Dr);var l,s=i;for(l in s)if(s.hasOwnProperty(l)){var c=s[l];"style"===l?Ir(e,c):"dangerouslySetInnerHTML"===l?null!=(c=c?c.__html:void 0)&&Pr(e,c):"children"===l?"string"==typeof c?("textarea"!==t||""!==c)&&Rr(e,c):"number"==typeof c&&Rr(e,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(A.hasOwnProperty(l)?null!=c&&Lr(r,l):null!=c&&_t(e,l,c,o))}switch(t){case"input":rt(e),jt(e,n,!1);break;case"textarea":rt(e),kr(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?Ar(e,!!n.multiple,t,!1):null!=n.defaultValue&&Ar(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=u)}}function Gr(e,t,n,r,o){var i=null;switch(t){case"input":n=Tt(e,n),r=Tt(e,r),i=[];break;case"option":n=br(e,n),r=br(e,r),i=[];break;case"select":n=a({},n,{value:void 0}),r=a({},r,{value:void 0}),i=[];break;case"textarea":n=Er(e,n),r=Er(e,r),i=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=u)}Mr(t,r,Dr),t=e=void 0;var l=null;for(e in n)if(!r.hasOwnProperty(e)&&n.hasOwnProperty(e)&&null!=n[e])if("style"===e){var s=n[e];for(t in s)s.hasOwnProperty(t)&&(l||(l={}),l[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(A.hasOwnProperty(e)?i||(i=[]):(i=i||[]).push(e,null));for(e in r){var c=r[e];if(s=null!=n?n[e]:void 0,r.hasOwnProperty(e)&&c!==s&&(null!=c||null!=s))if("style"===e)if(s){for(t in s)!s.hasOwnProperty(t)||c&&c.hasOwnProperty(t)||(l||(l={}),l[t]="");for(t in c)c.hasOwnProperty(t)&&s[t]!==c[t]&&(l||(l={}),l[t]=c[t])}else l||(i||(i=[]),i.push(e,l)),l=c;else"dangerouslySetInnerHTML"===e?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(i=i||[]).push(e,""+c)):"children"===e?s===c||"string"!=typeof c&&"number"!=typeof c||(i=i||[]).push(e,""+c):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(A.hasOwnProperty(e)?(null!=c&&Lr(o,e),i||s===c||(i=[])):(i=i||[]).push(e,c))}return l&&(i=i||[]).push("style",l),i}function qr(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&Rt(e,o),Ur(n,r),r=Ur(n,o);for(var i=0;i<t.length;i+=2){var a=t[i],u=t[i+1];"style"===a?Ir(e,u):"dangerouslySetInnerHTML"===a?Pr(e,u):"children"===a?Rr(e,u):_t(e,a,u,r)}switch(n){case"input":Bt(e,o);break;case"textarea":xr(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Ar(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?Ar(e,!!o.multiple,o.defaultValue,!0):Ar(e,!!o.multiple,o.multiple?[]:"",!1))}}function Wr(e,t,n,r,o){switch(t){case"iframe":case"object":Rn("load",e);break;case"video":case"audio":for(r=0;r<pe.length;r++)Rn(pe[r],e);break;case"source":Rn("error",e);break;case"img":case"image":case"link":Rn("error",e),Rn("load",e);break;case"form":Rn("reset",e),Rn("submit",e);break;case"details":Rn("toggle",e);break;case"input":Pt(e,n),Rn("invalid",e),Lr(o,"onChange");break;case"select":wr(e,n),Rn("invalid",e),Lr(o,"onChange");break;case"textarea":Cr(e,n),Rn("invalid",e),Lr(o,"onChange")}for(var i in Mr(t,n,Dr),r=null,n)if(n.hasOwnProperty(i)){var a=n[i];"children"===i?"string"==typeof a?e.textContent!==a&&(r=["children",a]):"number"==typeof a&&e.textContent!==""+a&&(r=["children",""+a]):A.hasOwnProperty(i)&&null!=a&&Lr(o,i)}switch(t){case"input":rt(e),jt(e,n,!0);break;case"textarea":rt(e),kr(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=u)}return r}function Vr(e,t){return e.nodeValue!==t}var $r={createElement:Fr,createTextNode:zr,setInitialProperties:Hr,diffProperties:Gr,updateProperties:qr,diffHydratedProperties:Wr,diffHydratedText:Vr,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(Bt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=W(r);o||p("90"),ot(r),Bt(r,o)}}}break;case"textarea":xr(e,n);break;case"select":null!=(t=n.value)&&Ar(e,!!n.multiple,t,!1)}}},Yr=null,Qr=null;function Kr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Xr(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html}var Zr=tr,Jr=rr,eo=or;function to(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function no(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var ro=[],oo=-1;function io(e){return{current:e}}function ao(e){0>oo||(e.current=ro[oo],ro[oo]=null,oo--)}function uo(e,t){ro[++oo]=e.current,e.current=t}var lo=io(f),so=io(!1),co=f;function fo(e){return ho(e)?co:lo.current}function po(e,t){var n=e.type.contextTypes;if(!n)return f;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function ho(e){return 2===e.tag&&null!=e.type.childContextTypes}function mo(e){ho(e)&&(ao(so),ao(lo))}function yo(e){ao(so),ao(lo)}function vo(e,t,n){lo.current!==f&&p("168"),uo(lo,t),uo(so,n)}function go(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var o in n=n.getChildContext())o in r||p("108",bt(e)||"Unknown",o);return a({},t,n)}function bo(e){if(!ho(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||f,co=lo.current,uo(lo,t),uo(so,so.current),!0}function Ao(e,t){var n=e.stateNode;if(n||p("169"),t){var r=go(e,co);n.__reactInternalMemoizedMergedChildContext=r,ao(so),ao(lo),uo(lo,r)}else ao(so);uo(so,t)}function wo(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function Eo(e,t,n){var r=e.alternate;return null===r?((r=new wo(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Co(e,t,n){var r=e.type,o=e.key;if(e=e.props,"function"==typeof r)var i=r.prototype&&r.prototype.isReactComponent?2:0;else if("string"==typeof r)i=5;else switch(r){case st:return xo(e.children,t,n,o);case ht:i=11,t|=3;break;case ct:i=11,t|=2;break;case ft:return(r=new wo(15,e,o,4|t)).type=ft,r.expirationTime=n,r;case yt:i=16,t|=2;break;default:e:{switch("object"==typeof r&&null!==r?r.$$typeof:null){case pt:i=13;break e;case dt:i=12;break e;case mt:i=14;break e;default:p("130",null==r?r:typeof r,"")}i=void 0}}return(t=new wo(i,e,o,t)).type=r,t.expirationTime=n,t}function xo(e,t,n,r){return(e=new wo(10,e,r,t)).expirationTime=n,e}function ko(e,t,n){return(e=new wo(6,e,null,t)).expirationTime=n,e}function Oo(e,t,n){return(t=new wo(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function So(e,t,n){return e={current:t=new wo(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e}var _o=null,To=null;function Po(e){return function(t){try{return e(t)}catch(e){}}}function Ro(e){"function"==typeof _o&&_o(e)}function Bo(e){"function"==typeof To&&To(e)}var jo=!1;function Io(e){return{expirationTime:0,baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function No(e){return{expirationTime:e.expirationTime,baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Mo(e){return{expirationTime:e,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function Uo(e,t,n){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t),(0===e.expirationTime||e.expirationTime>n)&&(e.expirationTime=n)}function Do(e,t,n){var r=e.alternate;if(null===r){var o=e.updateQueue,i=null;null===o&&(o=e.updateQueue=Io(e.memoizedState))}else o=e.updateQueue,i=r.updateQueue,null===o?null===i?(o=e.updateQueue=Io(e.memoizedState),i=r.updateQueue=Io(r.memoizedState)):o=e.updateQueue=No(i):null===i&&(i=r.updateQueue=No(o));null===i||o===i?Uo(o,t,n):null===o.lastUpdate||null===i.lastUpdate?(Uo(o,t,n),Uo(i,t,n)):(Uo(o,t,n),i.lastUpdate=t)}function Lo(e,t,n){var r=e.updateQueue;null===(r=null===r?e.updateQueue=Io(e.memoizedState):Fo(e,r)).lastCapturedUpdate?r.firstCapturedUpdate=r.lastCapturedUpdate=t:(r.lastCapturedUpdate.next=t,r.lastCapturedUpdate=t),(0===r.expirationTime||r.expirationTime>n)&&(r.expirationTime=n)}function Fo(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=No(t)),t}function zo(e,t,n,r,o,i){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(i,r,o):e;case 3:e.effectTag=-1025&e.effectTag|64;case 0:if(null===(o="function"==typeof(e=n.payload)?e.call(i,r,o):e)||void 0===o)break;return a({},r,o);case 2:jo=!0}return r}function Ho(e,t,n,r,o){if(jo=!1,!(0===t.expirationTime||t.expirationTime>o)){for(var i=(t=Fo(e,t)).baseState,a=null,u=0,l=t.firstUpdate,s=i;null!==l;){var c=l.expirationTime;c>o?(null===a&&(a=l,i=s),(0===u||u>c)&&(u=c)):(s=zo(e,0,l,s,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(c=null,l=t.firstCapturedUpdate;null!==l;){var f=l.expirationTime;f>o?(null===c&&(c=l,null===a&&(i=s)),(0===u||u>f)&&(u=f)):(s=zo(e,0,l,s,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===a&&(t.lastUpdate=null),null===c?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===c&&(i=s),t.baseState=i,t.firstUpdate=a,t.firstCapturedUpdate=c,t.expirationTime=u,e.memoizedState=s}}function Go(e,t){"function"!=typeof e&&p("191",e),e.call(t)}function qo(e,t,n){for(null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),e=t.firstEffect,t.firstEffect=t.lastEffect=null;null!==e;){var r=e.callback;null!==r&&(e.callback=null,Go(r,n)),e=e.nextEffect}for(e=t.firstCapturedEffect,t.firstCapturedEffect=t.lastCapturedEffect=null;null!==e;)null!==(t=e.callback)&&(e.callback=null,Go(t,n)),e=e.nextEffect}function Wo(e,t){return{value:e,source:t,stack:At(t)}}var Vo=io(null),$o=io(null),Yo=io(0);function Qo(e){var t=e.type._context;uo(Yo,t._changedBits),uo($o,t._currentValue),uo(Vo,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode}function Ko(e){var t=Yo.current,n=$o.current;ao(Vo),ao($o),ao(Yo),(e=e.type._context)._currentValue=n,e._changedBits=t}var Xo={},Zo=io(Xo),Jo=io(Xo),ei=io(Xo);function ti(e){return e===Xo&&p("174"),e}function ni(e,t){uo(ei,t),uo(Jo,e),uo(Zo,Xo);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:_r(null,"");break;default:t=_r(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}ao(Zo),uo(Zo,t)}function ri(e){ao(Zo),ao(Jo),ao(ei)}function oi(e){Jo.current===e&&(ao(Zo),ao(Jo))}function ii(e,t,n){var r=e.memoizedState;r=null===(t=t(n,r))||void 0===t?r:a({},r,t),e.memoizedState=r,null!==(e=e.updateQueue)&&0===e.expirationTime&&(e.baseState=r)}var ai={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===an(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=ga(),o=Mo(r=ya(r,e));o.payload=t,void 0!==n&&null!==n&&(o.callback=n),Do(e,o,r),va(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=ga(),o=Mo(r=ya(r,e));o.tag=1,o.payload=t,void 0!==n&&null!==n&&(o.callback=n),Do(e,o,r),va(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=ga(),r=Mo(n=ya(n,e));r.tag=2,void 0!==t&&null!==t&&(r.callback=t),Do(e,r,n),va(e,n)}};function ui(e,t,n,r,o,i){var a=e.stateNode;return e=e.type,"function"==typeof a.shouldComponentUpdate?a.shouldComponentUpdate(n,o,i):!e.prototype||!e.prototype.isPureReactComponent||(!s(t,n)||!s(r,o))}function li(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ai.enqueueReplaceState(t,t.state,null)}function si(e,t){var n=e.type,r=e.stateNode,o=e.pendingProps,i=fo(e);r.props=o,r.state=e.memoizedState,r.refs=f,r.context=po(e,i),null!==(i=e.updateQueue)&&(Ho(e,i,o,r,t),r.state=e.memoizedState),"function"==typeof(i=e.type.getDerivedStateFromProps)&&(ii(e,i,o),r.state=e.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(n=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),n!==r.state&&ai.enqueueReplaceState(r,r.state,null),null!==(i=e.updateQueue)&&(Ho(e,i,o,r,t),r.state=e.memoizedState)),"function"==typeof r.componentDidMount&&(e.effectTag|=4)}var ci=Array.isArray;function fi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&p("110"),r=n.stateNode),r||p("147",e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs===f?r.refs={}:r.refs;null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&p("148"),n._owner||p("254",e)}return e}function pi(e,t){"textarea"!==e.type&&p("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function di(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Eo(e,t,n)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function a(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=ko(n,e.mode,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function l(e,t,n,r){return null!==t&&t.type===n.type?((r=o(t,n.props,r)).ref=fi(e,t,n),r.return=e,r):((r=Co(n,e.mode,r)).ref=fi(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Oo(n,e.mode,r)).return=e,t):((t=o(t,n.children||[],r)).return=e,t)}function c(e,t,n,r,i){return null===t||10!==t.tag?((t=xo(n,e.mode,r,i)).return=e,t):((t=o(t,n,r)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=ko(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ut:return(n=Co(t,e.mode,n)).ref=fi(e,null,t),n.return=e,n;case lt:return(t=Oo(t,e.mode,n)).return=e,t}if(ci(t)||gt(t))return(t=xo(t,e.mode,n,null)).return=e,t;pi(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ut:return n.key===o?n.type===st?c(e,t,n.props.children,r,o):l(e,t,n,r):null;case lt:return n.key===o?s(e,t,n,r):null}if(ci(n)||gt(n))return null!==o?null:c(e,t,n,r,null);pi(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ut:return e=e.get(null===r.key?n:r.key)||null,r.type===st?c(t,e,r.props.children,o,r.key):l(t,e,r,o);case lt:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(ci(r)||gt(r))return c(t,e=e.get(n)||null,r,o,null);pi(t,r)}return null}function m(o,a,u,l){for(var s=null,c=null,p=a,m=a=0,y=null;null!==p&&m<u.length;m++){p.index>m?(y=p,p=null):y=p.sibling;var v=d(o,p,u[m],l);if(null===v){null===p&&(p=y);break}e&&p&&null===v.alternate&&t(o,p),a=i(v,a,m),null===c?s=v:c.sibling=v,c=v,p=y}if(m===u.length)return n(o,p),s;if(null===p){for(;m<u.length;m++)(p=f(o,u[m],l))&&(a=i(p,a,m),null===c?s=p:c.sibling=p,c=p);return s}for(p=r(o,p);m<u.length;m++)(y=h(p,o,m,u[m],l))&&(e&&null!==y.alternate&&p.delete(null===y.key?m:y.key),a=i(y,a,m),null===c?s=y:c.sibling=y,c=y);return e&&p.forEach(function(e){return t(o,e)}),s}function y(o,a,u,l){var s=gt(u);"function"!=typeof s&&p("150"),null==(u=s.call(u))&&p("151");for(var c=s=null,m=a,y=a=0,v=null,g=u.next();null!==m&&!g.done;y++,g=u.next()){m.index>y?(v=m,m=null):v=m.sibling;var b=d(o,m,g.value,l);if(null===b){m||(m=v);break}e&&m&&null===b.alternate&&t(o,m),a=i(b,a,y),null===c?s=b:c.sibling=b,c=b,m=v}if(g.done)return n(o,m),s;if(null===m){for(;!g.done;y++,g=u.next())null!==(g=f(o,g.value,l))&&(a=i(g,a,y),null===c?s=g:c.sibling=g,c=g);return s}for(m=r(o,m);!g.done;y++,g=u.next())null!==(g=h(m,o,y,g.value,l))&&(e&&null!==g.alternate&&m.delete(null===g.key?y:g.key),a=i(g,a,y),null===c?s=g:c.sibling=g,c=g);return e&&m.forEach(function(e){return t(o,e)}),s}return function(e,r,i,u){var l="object"==typeof i&&null!==i&&i.type===st&&null===i.key;l&&(i=i.props.children);var s="object"==typeof i&&null!==i;if(s)switch(i.$$typeof){case ut:e:{for(s=i.key,l=r;null!==l;){if(l.key===s){if(10===l.tag?i.type===st:l.type===i.type){n(e,l.sibling),(r=o(l,i.type===st?i.props.children:i.props,u)).ref=fi(e,l,i),r.return=e,e=r;break e}n(e,l);break}t(e,l),l=l.sibling}i.type===st?((r=xo(i.props.children,e.mode,u,i.key)).return=e,e=r):((u=Co(i,e.mode,u)).ref=fi(e,r,i),u.return=e,e=u)}return a(e);case lt:e:{for(l=i.key;null!==r;){if(r.key===l){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[],u)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Oo(i,e.mode,u)).return=e,e=r}return a(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i,u)).return=e,e=r):(n(e,r),(r=ko(i,e.mode,u)).return=e,e=r),a(e);if(ci(i))return m(e,r,i,u);if(gt(i))return y(e,r,i,u);if(s&&pi(e,i),void 0===i&&!l)switch(e.tag){case 2:case 1:p("152",(u=e.type).displayName||u.name||"Component")}return n(e,r)}}var hi=di(!0),mi=di(!1),yi=null,vi=null,gi=!1;function bi(e,t){var n=new wo(5,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ai(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function wi(e){if(gi){var t=vi;if(t){var n=t;if(!Ai(e,t)){if(!(t=to(n))||!Ai(e,t))return e.effectTag|=2,gi=!1,void(yi=e);bi(yi,n)}yi=e,vi=no(t)}else e.effectTag|=2,gi=!1,yi=e}}function Ei(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;yi=e}function Ci(e){if(e!==yi)return!1;if(!gi)return Ei(e),gi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Xr(t,e.memoizedProps))for(t=vi;t;)bi(e,t),t=to(t);return Ei(e),vi=yi?to(e.stateNode):null,!0}function xi(){vi=yi=null,gi=!1}function ki(e,t,n){Oi(e,t,n,t.expirationTime)}function Oi(e,t,n,r){t.child=null===e?mi(t,null,n,r):hi(t,e.child,n,r)}function Si(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function _i(e,t,n,r,o){Si(e,t);var i=0!=(64&t.effectTag);if(!n&&!i)return r&&Ao(t,!1),Ri(e,t);n=t.stateNode,it.current=t;var a=i?null:n.render();return t.effectTag|=1,i&&(Oi(e,t,null,o),t.child=null),Oi(e,t,a,o),t.memoizedState=n.state,t.memoizedProps=n.props,r&&Ao(t,!0),t.child}function Ti(e){var t=e.stateNode;t.pendingContext?vo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&vo(0,t.context,!1),ni(e,t.containerInfo)}function Pi(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){switch(o.tag){case 12:var i=0|o.stateNode;if(o.type===t&&0!=(i&n)){for(i=o;null!==i;){var a=i.alternate;if(0===i.expirationTime||i.expirationTime>r)i.expirationTime=r,null!==a&&(0===a.expirationTime||a.expirationTime>r)&&(a.expirationTime=r);else{if(null===a||!(0===a.expirationTime||a.expirationTime>r))break;a.expirationTime=r}i=i.return}i=null}else i=o.child;break;case 13:i=o.type===e.type?null:o.child;break;default:i=o.child}if(null!==i)i.return=o;else for(i=o;null!==i;){if(i===e){i=null;break}if(null!==(o=i.sibling)){o.return=i.return,i=o;break}i=i.return}o=i}}function Ri(e,t){if(null!==e&&t.child!==e.child&&p("153"),null!==t.child){var n=Eo(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Eo(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function Bi(e,t,n){if(0===t.expirationTime||t.expirationTime>n){switch(t.tag){case 3:Ti(t);break;case 2:bo(t);break;case 4:ni(t,t.stateNode.containerInfo);break;case 13:Qo(t)}return null}switch(t.tag){case 0:null!==e&&p("155");var r=t.type,o=t.pendingProps,i=fo(t);return r=r(o,i=po(t,i)),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(i=t.type,t.tag=2,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,"function"==typeof(i=i.getDerivedStateFromProps)&&ii(t,i,o),o=bo(t),r.updater=ai,t.stateNode=r,r._reactInternalFiber=t,si(t,n),e=_i(e,t,!0,o,n)):(t.tag=1,ki(e,t,r),t.memoizedProps=o,e=t.child),e;case 1:return o=t.type,n=t.pendingProps,so.current||t.memoizedProps!==n?(o=o(n,r=po(t,r=fo(t))),t.effectTag|=1,ki(e,t,o),t.memoizedProps=n,e=t.child):e=Ri(e,t),e;case 2:if(o=bo(t),null===e)if(null===t.stateNode){var a=t.pendingProps,u=t.type;r=fo(t);var l=2===t.tag&&null!=t.type.contextTypes;a=new u(a,i=l?po(t,r):f),t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,a.updater=ai,t.stateNode=a,a._reactInternalFiber=t,l&&((l=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,l.__reactInternalMemoizedMaskedChildContext=i),si(t,n),r=!0}else{u=t.type,r=t.stateNode,l=t.memoizedProps,i=t.pendingProps,r.props=l;var s=r.context;a=po(t,a=fo(t));var c=u.getDerivedStateFromProps;(u="function"==typeof c||"function"==typeof r.getSnapshotBeforeUpdate)||"function"!=typeof r.UNSAFE_componentWillReceiveProps&&"function"!=typeof r.componentWillReceiveProps||(l!==i||s!==a)&&li(t,r,i,a),jo=!1;var d=t.memoizedState;s=r.state=d;var h=t.updateQueue;null!==h&&(Ho(t,h,i,r,n),s=t.memoizedState),l!==i||d!==s||so.current||jo?("function"==typeof c&&(ii(t,c,i),s=t.memoizedState),(l=jo||ui(t,l,i,d,s,a))?(u||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||("function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount()),"function"==typeof r.componentDidMount&&(t.effectTag|=4)):("function"==typeof r.componentDidMount&&(t.effectTag|=4),t.memoizedProps=i,t.memoizedState=s),r.props=i,r.state=s,r.context=a,r=l):("function"==typeof r.componentDidMount&&(t.effectTag|=4),r=!1)}else u=t.type,r=t.stateNode,i=t.memoizedProps,l=t.pendingProps,r.props=i,s=r.context,a=po(t,a=fo(t)),(u="function"==typeof(c=u.getDerivedStateFromProps)||"function"==typeof r.getSnapshotBeforeUpdate)||"function"!=typeof r.UNSAFE_componentWillReceiveProps&&"function"!=typeof r.componentWillReceiveProps||(i!==l||s!==a)&&li(t,r,l,a),jo=!1,s=t.memoizedState,d=r.state=s,null!==(h=t.updateQueue)&&(Ho(t,h,l,r,n),d=t.memoizedState),i!==l||s!==d||so.current||jo?("function"==typeof c&&(ii(t,c,l),d=t.memoizedState),(c=jo||ui(t,i,l,s,d,a))?(u||"function"!=typeof r.UNSAFE_componentWillUpdate&&"function"!=typeof r.componentWillUpdate||("function"==typeof r.componentWillUpdate&&r.componentWillUpdate(l,d,a),"function"==typeof r.UNSAFE_componentWillUpdate&&r.UNSAFE_componentWillUpdate(l,d,a)),"function"==typeof r.componentDidUpdate&&(t.effectTag|=4),"function"==typeof r.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof r.componentDidUpdate||i===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof r.getSnapshotBeforeUpdate||i===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),t.memoizedProps=l,t.memoizedState=d),r.props=l,r.state=d,r.context=a,r=c):("function"!=typeof r.componentDidUpdate||i===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof r.getSnapshotBeforeUpdate||i===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),r=!1);return _i(e,t,r,o,n);case 3:return Ti(t),null!==(o=t.updateQueue)?(r=null!==(r=t.memoizedState)?r.element:null,Ho(t,o,t.pendingProps,null,n),(o=t.memoizedState.element)===r?(xi(),e=Ri(e,t)):(r=t.stateNode,(r=(null===e||null===e.child)&&r.hydrate)&&(vi=no(t.stateNode.containerInfo),yi=t,r=gi=!0),r?(t.effectTag|=2,t.child=mi(t,null,o,n)):(xi(),ki(e,t,o)),e=t.child)):(xi(),e=Ri(e,t)),e;case 5:return ti(ei.current),(o=ti(Zo.current))!==(r=_r(o,t.type))&&(uo(Jo,t),uo(Zo,r)),null===e&&wi(t),o=t.type,l=t.memoizedProps,r=t.pendingProps,i=null!==e?e.memoizedProps:null,so.current||l!==r||((l=1&t.mode&&!!r.hidden)&&(t.expirationTime=1073741823),l&&1073741823===n)?(l=r.children,Xr(o,r)?l=null:i&&Xr(o,i)&&(t.effectTag|=16),Si(e,t),1073741823!==n&&1&t.mode&&r.hidden?(t.expirationTime=1073741823,t.memoizedProps=r,e=null):(ki(e,t,l),t.memoizedProps=r,e=t.child)):e=Ri(e,t),e;case 6:return null===e&&wi(t),t.memoizedProps=t.pendingProps,null;case 16:return null;case 4:return ni(t,t.stateNode.containerInfo),o=t.pendingProps,so.current||t.memoizedProps!==o?(null===e?t.child=hi(t,null,o,n):ki(e,t,o),t.memoizedProps=o,e=t.child):e=Ri(e,t),e;case 14:return o=t.type.render,n=t.pendingProps,r=t.ref,so.current||t.memoizedProps!==n||r!==(null!==e?e.ref:null)?(ki(e,t,o=o(n,r)),t.memoizedProps=n,e=t.child):e=Ri(e,t),e;case 10:return n=t.pendingProps,so.current||t.memoizedProps!==n?(ki(e,t,n),t.memoizedProps=n,e=t.child):e=Ri(e,t),e;case 11:return n=t.pendingProps.children,so.current||null!==n&&t.memoizedProps!==n?(ki(e,t,n),t.memoizedProps=n,e=t.child):e=Ri(e,t),e;case 15:return n=t.pendingProps,t.memoizedProps===n?e=Ri(e,t):(ki(e,t,n.children),t.memoizedProps=n,e=t.child),e;case 13:return function(e,t,n){var r=t.type._context,o=t.pendingProps,i=t.memoizedProps,a=!0;if(so.current)a=!1;else if(i===o)return t.stateNode=0,Qo(t),Ri(e,t);var u=o.value;if(t.memoizedProps=o,null===i)u=1073741823;else if(i.value===o.value){if(i.children===o.children&&a)return t.stateNode=0,Qo(t),Ri(e,t);u=0}else{var l=i.value;if(l===u&&(0!==l||1/l==1/u)||l!=l&&u!=u){if(i.children===o.children&&a)return t.stateNode=0,Qo(t),Ri(e,t);u=0}else if(u="function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,u):1073741823,0==(u|=0)){if(i.children===o.children&&a)return t.stateNode=0,Qo(t),Ri(e,t)}else Pi(t,r,u,n)}return t.stateNode=u,Qo(t),ki(e,t,o.children),t.child}(e,t,n);case 12:e:if(r=t.type,i=t.pendingProps,l=t.memoizedProps,o=r._currentValue,a=r._changedBits,so.current||0!==a||l!==i){if(t.memoizedProps=i,void 0!==(u=i.unstable_observedBits)&&null!==u||(u=1073741823),t.stateNode=u,0!=(a&u))Pi(t,r,a,n);else if(l===i){e=Ri(e,t);break e}n=(n=i.children)(o),t.effectTag|=1,ki(e,t,n),e=t.child}else e=Ri(e,t);return e;default:p("156")}}function ji(e){e.effectTag|=4}var Ii=void 0,Ni=void 0,Mi=void 0;function Ui(e,t){var n=t.pendingProps;switch(t.tag){case 1:return null;case 2:return mo(t),null;case 3:ri(),yo();var r=t.stateNode;return r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Ci(t),t.effectTag&=-3),Ii(t),null;case 5:oi(t),r=ti(ei.current);var o=t.type;if(null!==e&&null!=t.stateNode){var i=e.memoizedProps,a=t.stateNode,u=ti(Zo.current);a=Gr(a,o,i,n,r),Ni(e,t,a,o,i,n,r,u),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!n)return null===t.stateNode&&p("166"),null;if(e=ti(Zo.current),Ci(t))n=t.stateNode,o=t.type,i=t.memoizedProps,n[z]=t,n[H]=i,r=Wr(n,o,i,e,r),t.updateQueue=r,null!==r&&ji(t);else{(e=Fr(o,n,r,e))[z]=t,e[H]=n;e:for(i=t.child;null!==i;){if(5===i.tag||6===i.tag)e.appendChild(i.stateNode);else if(4!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)break e;i=i.return}i.sibling.return=i.return,i=i.sibling}Hr(e,o,n,r),Kr(o,n)&&ji(t),t.stateNode=e}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Mi(e,t,e.memoizedProps,n);else{if("string"!=typeof n)return null===t.stateNode&&p("166"),null;r=ti(ei.current),ti(Zo.current),Ci(t)?(r=t.stateNode,n=t.memoizedProps,r[z]=t,Vr(r,n)&&ji(t)):((r=zr(n,r))[z]=t,t.stateNode=r)}return null;case 14:case 16:case 10:case 11:case 15:return null;case 4:return ri(),Ii(t),null;case 13:return Ko(t),null;case 12:return null;case 0:p("167");default:p("156")}}function Di(e,t){var n=t.source;null===t.stack&&null!==n&&At(n),null!==n&&bt(n),t=t.value,null!==e&&2===e.tag&&bt(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}function Li(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){ha(e,t)}else t.current=null}function Fi(e){switch(Bo(e),e.tag){case 2:Li(e);var t=e.stateNode;if("function"==typeof t.componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){ha(e,t)}break;case 5:Li(e);break;case 4:Gi(e)}}function zi(e){return 5===e.tag||3===e.tag||4===e.tag}function Hi(e){e:{for(var t=e.return;null!==t;){if(zi(t)){var n=t;break e}t=t.return}p("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:p("161")}16&n.effectTag&&(Rr(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||zi(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)if(n)if(r){var i=t,a=o.stateNode,u=n;8===i.nodeType?i.parentNode.insertBefore(a,u):i.insertBefore(a,u)}else t.insertBefore(o.stateNode,n);else r?(i=t,a=o.stateNode,8===i.nodeType?i.parentNode.insertBefore(a,i):i.appendChild(a)):t.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function Gi(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&p("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var i=t,a=i;;)if(Fi(a),null!==a.child&&4!==a.tag)a.child.return=a,a=a.child;else{if(a===i)break;for(;null===a.sibling;){if(null===a.return||a.return===i)break e;a=a.return}a.sibling.return=a.return,a=a.sibling}o?(i=r,a=t.stateNode,8===i.nodeType?i.parentNode.removeChild(a):i.removeChild(a)):r.removeChild(t.stateNode)}else if(4===t.tag?r=t.stateNode.containerInfo:Fi(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function qi(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&(n[H]=r,qr(n,i,o,e,r))}break;case 6:null===t.stateNode&&p("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 15:case 16:break;default:p("163")}}function Wi(e,t,n){(n=Mo(n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Xa(r),Di(e,t)},n}function Vi(e,t,n){(n=Mo(n)).tag=3;var r=e.stateNode;return null!==r&&"function"==typeof r.componentDidCatch&&(n.callback=function(){null===sa?sa=new Set([this]):sa.add(this);var n=t.value,r=t.stack;Di(e,t),this.componentDidCatch(n,{componentStack:null!==r?r:""})}),n}function $i(e,t,n,r,o,i){n.effectTag|=512,n.firstEffect=n.lastEffect=null,r=Wo(r,n),e=t;do{switch(e.tag){case 3:return e.effectTag|=1024,void Lo(e,r=Wi(e,r,i),i);case 2:if(t=r,n=e.stateNode,0==(64&e.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&(null===sa||!sa.has(n)))return e.effectTag|=1024,void Lo(e,r=Vi(e,t,i),i)}e=e.return}while(null!==e)}function Yi(e){switch(e.tag){case 2:mo(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return ri(),yo(),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return oi(e),null;case 16:return 1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 4:return ri(),null;case 13:return Ko(e),null;default:return null}}Ii=function(){},Ni=function(e,t,n){(t.updateQueue=n)&&ji(t)},Mi=function(e,t,n,r){n!==r&&ji(t)};var Qi=Zr(),Ki=2,Xi=Qi,Zi=0,Ji=0,ea=!1,ta=null,na=null,ra=0,oa=-1,ia=!1,aa=null,ua=!1,la=!1,sa=null;function ca(){if(null!==ta)for(var e=ta.return;null!==e;){var t=e;switch(t.tag){case 2:mo(t);break;case 3:ri(),yo();break;case 5:oi(t);break;case 4:ri();break;case 13:Ko(t)}e=e.return}na=null,ra=0,oa=-1,ia=!1,ta=null,la=!1}function fa(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){t=Ui(t,e);var o=e;if(1073741823===ra||1073741823!==o.expirationTime){var i=0;switch(o.tag){case 3:case 2:var a=o.updateQueue;null!==a&&(i=a.expirationTime)}for(a=o.child;null!==a;)0!==a.expirationTime&&(0===i||i>a.expirationTime)&&(i=a.expirationTime),a=a.sibling;o.expirationTime=i}if(null!==t)return t;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){la=!0;break}e=n}else{if(null!==(e=Yi(e)))return e.effectTag&=511,e;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;e=n}}return null}function pa(e){var t=Bi(e.alternate,e,ra);return null===t&&(t=fa(e)),it.current=null,t}function da(e,t,n){ea&&p("243"),ea=!0,t===ra&&e===na&&null!==ta||(ca(),ra=t,oa=-1,ta=Eo((na=e).current,null,ra),e.pendingCommitExpirationTime=0);var r=!1;for(ia=!n||ra<=Ki;;){try{if(n)for(;null!==ta&&!Ka();)ta=pa(ta);else for(;null!==ta;)ta=pa(ta)}catch(t){if(null===ta)r=!0,Xa(t);else{null===ta&&p("271");var o=(n=ta).return;if(null===o){r=!0,Xa(t);break}$i(e,o,n,t,0,ra),ta=fa(n)}}break}if(ea=!1,r)return null;if(null===ta){if(la)return e.pendingCommitExpirationTime=t,e.current.alternate;ia&&p("262"),0<=oa&&setTimeout(function(){var t=e.current.expirationTime;0!==t&&(0===e.remainingExpirationTime||e.remainingExpirationTime<t)&&za(e,t)},oa),function(e){null===Oa&&p("246"),Oa.remainingExpirationTime=e}(e.current.expirationTime)}return null}function ha(e,t){var n;e:{for(ea&&!ua&&p("263"),n=e.return;null!==n;){switch(n.tag){case 2:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromCatch||"function"==typeof r.componentDidCatch&&(null===sa||!sa.has(r))){Do(n,e=Vi(n,e=Wo(t,e),1),1),va(n,1),n=void 0;break e}break;case 3:Do(n,e=Wi(n,e=Wo(t,e),1),1),va(n,1),n=void 0;break e}n=n.return}3===e.tag&&(Do(e,n=Wi(e,n=Wo(t,e),1),1),va(e,1)),n=void 0}return n}function ma(){var e=2+25*(1+((ga()-2+500)/25|0));return e<=Zi&&(e=Zi+1),Zi=e}function ya(e,t){return e=0!==Ji?Ji:ea?ua?1:ra:1&t.mode?Na?2+10*(1+((e-2+15)/10|0)):2+25*(1+((e-2+500)/25|0)):1,Na&&(0===_a||e>_a)&&(_a=e),e}function va(e,t){for(;null!==e;){if((0===e.expirationTime||e.expirationTime>t)&&(e.expirationTime=t),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>t)&&(e.alternate.expirationTime=t),null===e.return){if(3!==e.tag)break;var n=e.stateNode;!ea&&0!==ra&&t<ra&&ca();var r=n.current.expirationTime;ea&&!ua&&na===n||za(n,r),Da>Ua&&p("185")}e=e.return}}function ga(){return Xi=Zr()-Qi,Ki=2+(Xi/10|0)}function ba(e){var t=Ji;Ji=2+25*(1+((ga()-2+500)/25|0));try{return e()}finally{Ji=t}}function Aa(e,t,n,r,o){var i=Ji;Ji=1;try{return e(t,n,r,o)}finally{Ji=i}}var wa=null,Ea=null,Ca=0,xa=void 0,ka=!1,Oa=null,Sa=0,_a=0,Ta=!1,Pa=!1,Ra=null,Ba=null,ja=!1,Ia=!1,Na=!1,Ma=null,Ua=1e3,Da=0,La=1;function Fa(e){if(0!==Ca){if(e>Ca)return;null!==xa&&eo(xa)}var t=Zr()-Qi;Ca=e,xa=Jr(Ga,{timeout:10*(e-2)-t})}function za(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===Ea?(wa=Ea=e,e.nextScheduledRoot=e):(Ea=Ea.nextScheduledRoot=e).nextScheduledRoot=wa;else{var n=e.remainingExpirationTime;(0===n||t<n)&&(e.remainingExpirationTime=t)}ka||(ja?Ia&&(Oa=e,Sa=1,Ya(e,1,!1)):1===t?qa():Fa(t))}function Ha(){var e=0,t=null;if(null!==Ea)for(var n=Ea,r=wa;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===Ea)&&p("244"),r===r.nextScheduledRoot){wa=Ea=r.nextScheduledRoot=null;break}if(r===wa)wa=o=r.nextScheduledRoot,Ea.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===Ea){(Ea=n).nextScheduledRoot=wa,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===Ea)break;n=r,r=r.nextScheduledRoot}}null!==(n=Oa)&&n===t&&1===e?Da++:Da=0,Oa=t,Sa=e}function Ga(e){Wa(0,!0,e)}function qa(){Wa(1,!1,null)}function Wa(e,t,n){if(Ba=n,Ha(),t)for(;null!==Oa&&0!==Sa&&(0===e||e>=Sa)&&(!Ta||ga()>=Sa);)ga(),Ya(Oa,Sa,!Ta),Ha();else for(;null!==Oa&&0!==Sa&&(0===e||e>=Sa);)Ya(Oa,Sa,!1),Ha();null!==Ba&&(Ca=0,xa=null),0!==Sa&&Fa(Sa),Ba=null,Ta=!1,$a()}function Va(e,t){ka&&p("253"),Oa=e,Sa=t,Ya(e,t,!1),qa(),$a()}function $a(){if(Da=0,null!==Ma){var e=Ma;Ma=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){Pa||(Pa=!0,Ra=e)}}}if(Pa)throw e=Ra,Ra=null,Pa=!1,e}function Ya(e,t,n){ka&&p("245"),ka=!0,n?null!==(n=e.finishedWork)?Qa(e,n,t):null!==(n=da(e,t,!0))&&(Ka()?e.finishedWork=n:Qa(e,n,t)):null!==(n=e.finishedWork)?Qa(e,n,t):null!==(n=da(e,t,!1))&&Qa(e,n,t),ka=!1}function Qa(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===Ma?Ma=[r]:Ma.push(r),r._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);if(e.finishedWork=null,ua=ea=!0,(n=t.stateNode).current===t&&p("177"),0===(r=n.pendingCommitExpirationTime)&&p("261"),n.pendingCommitExpirationTime=0,ga(),it.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var o=t.firstEffect}else o=t;else o=t.firstEffect;Yr=Tn;var i=l();if(Hn(i)){if("selectionStart"in i)var a={start:i.selectionStart,end:i.selectionEnd};else e:{var u=window.getSelection&&window.getSelection();if(u&&0!==u.rangeCount){a=u.anchorNode;var s=u.anchorOffset,f=u.focusNode;u=u.focusOffset;try{a.nodeType,f.nodeType}catch(e){a=null;break e}var d=0,h=-1,m=-1,y=0,v=0,g=i,b=null;t:for(;;){for(var A;g!==a||0!==s&&3!==g.nodeType||(h=d+s),g!==f||0!==u&&3!==g.nodeType||(m=d+u),3===g.nodeType&&(d+=g.nodeValue.length),null!==(A=g.firstChild);)b=g,g=A;for(;;){if(g===i)break t;if(b===a&&++y===s&&(h=d),b===f&&++v===u&&(m=d),null!==(A=g.nextSibling))break;b=(g=b).parentNode}g=A}a=-1===h||-1===m?null:{start:h,end:m}}else a=null}a=a||{start:0,end:0}}else a=null;for(Qr={focusedElem:i,selectionRange:a},Pn(!1),aa=o;null!==aa;){i=!1,a=void 0;try{for(;null!==aa;){if(256&aa.effectTag){var w=aa.alternate;switch((s=aa).tag){case 2:if(256&s.effectTag&&null!==w){var E=w.memoizedProps,C=w.memoizedState,x=s.stateNode;x.props=s.memoizedProps,x.state=s.memoizedState;var k=x.getSnapshotBeforeUpdate(E,C);x.__reactInternalSnapshotBeforeUpdate=k}break;case 3:case 5:case 6:case 4:break;default:p("163")}}aa=aa.nextEffect}}catch(e){i=!0,a=e}i&&(null===aa&&p("178"),ha(aa,a),null!==aa&&(aa=aa.nextEffect))}for(aa=o;null!==aa;){w=!1,E=void 0;try{for(;null!==aa;){var O=aa.effectTag;if(16&O&&Rr(aa.stateNode,""),128&O){var S=aa.alternate;if(null!==S){var _=S.ref;null!==_&&("function"==typeof _?_(null):_.current=null)}}switch(14&O){case 2:Hi(aa),aa.effectTag&=-3;break;case 6:Hi(aa),aa.effectTag&=-3,qi(aa.alternate,aa);break;case 4:qi(aa.alternate,aa);break;case 8:Gi(C=aa),C.return=null,C.child=null,C.alternate&&(C.alternate.child=null,C.alternate.return=null)}aa=aa.nextEffect}}catch(e){w=!0,E=e}w&&(null===aa&&p("178"),ha(aa,E),null!==aa&&(aa=aa.nextEffect))}if(_=Qr,S=l(),O=_.focusedElem,w=_.selectionRange,S!==O&&c(document.documentElement,O)){null!==w&&Hn(O)&&(S=w.start,void 0===(_=w.end)&&(_=S),"selectionStart"in O?(O.selectionStart=S,O.selectionEnd=Math.min(_,O.value.length)):window.getSelection&&(S=window.getSelection(),E=O[he()].length,_=Math.min(w.start,E),w=void 0===w.end?_:Math.min(w.end,E),!S.extend&&_>w&&(E=w,w=_,_=E),E=zn(O,_),C=zn(O,w),E&&C&&(1!==S.rangeCount||S.anchorNode!==E.node||S.anchorOffset!==E.offset||S.focusNode!==C.node||S.focusOffset!==C.offset)&&((x=document.createRange()).setStart(E.node,E.offset),S.removeAllRanges(),_>w?(S.addRange(x),S.extend(C.node,C.offset)):(x.setEnd(C.node,C.offset),S.addRange(x))))),S=[];for(_=O;_=_.parentNode;)1===_.nodeType&&S.push({element:_,left:_.scrollLeft,top:_.scrollTop});for("function"==typeof O.focus&&O.focus(),O=0;O<S.length;O++)(_=S[O]).element.scrollLeft=_.left,_.element.scrollTop=_.top}for(Qr=null,Pn(Yr),Yr=null,n.current=t,aa=o;null!==aa;){o=!1,O=void 0;try{for(S=r;null!==aa;){var T=aa.effectTag;if(36&T){var P=aa.alternate;switch(w=S,(_=aa).tag){case 2:var R=_.stateNode;if(4&_.effectTag)if(null===P)R.props=_.memoizedProps,R.state=_.memoizedState,R.componentDidMount();else{var B=P.memoizedProps,j=P.memoizedState;R.props=_.memoizedProps,R.state=_.memoizedState,R.componentDidUpdate(B,j,R.__reactInternalSnapshotBeforeUpdate)}var I=_.updateQueue;null!==I&&(R.props=_.memoizedProps,R.state=_.memoizedState,qo(_,I,R));break;case 3:var N=_.updateQueue;if(null!==N){if(E=null,null!==_.child)switch(_.child.tag){case 5:E=_.child.stateNode;break;case 2:E=_.child.stateNode}qo(_,N,E)}break;case 5:var M=_.stateNode;null===P&&4&_.effectTag&&Kr(_.type,_.memoizedProps)&&M.focus();break;case 6:case 4:case 15:case 16:break;default:p("163")}}if(128&T){_=void 0;var U=aa.ref;if(null!==U){var D=aa.stateNode;switch(aa.tag){case 5:_=D;break;default:_=D}"function"==typeof U?U(_):U.current=_}}var L=aa.nextEffect;aa.nextEffect=null,aa=L}}catch(e){o=!0,O=e}o&&(null===aa&&p("178"),ha(aa,O),null!==aa&&(aa=aa.nextEffect))}ea=ua=!1,Ro(t.stateNode),0===(t=n.current.expirationTime)&&(sa=null),e.remainingExpirationTime=t}function Ka(){return!(null===Ba||Ba.timeRemaining()>La)&&(Ta=!0)}function Xa(e){null===Oa&&p("246"),Oa.remainingExpirationTime=0,Pa||(Pa=!0,Ra=e)}function Za(e,t){var n=ja;ja=!0;try{return e(t)}finally{(ja=n)||ka||qa()}}function Ja(e,t){if(ja&&!Ia){Ia=!0;try{return e(t)}finally{Ia=!1}}return e(t)}function eu(e,t){ka&&p("187");var n=ja;ja=!0;try{return Aa(e,t)}finally{ja=n,qa()}}function tu(e,t,n){if(Na)return e(t,n);ja||ka||0===_a||(Wa(_a,!1,null),_a=0);var r=Na,o=ja;ja=Na=!0;try{return e(t,n)}finally{Na=r,(ja=o)||ka||qa()}}function nu(e){var t=ja;ja=!0;try{Aa(e)}finally{(ja=t)||ka||Wa(1,!1,null)}}function ru(e,t,n,r,o){var i=t.current;if(n){var a;n=n._reactInternalFiber;e:{for(2===an(n)&&2===n.tag||p("170"),a=n;3!==a.tag;){if(ho(a)){a=a.stateNode.__reactInternalMemoizedMergedChildContext;break e}(a=a.return)||p("171")}a=a.stateNode.context}n=ho(n)?go(n,a):a}else n=f;return null===t.context?t.context=n:t.pendingContext=n,t=o,(o=Mo(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),Do(i,o,r),va(i,r),r}function ou(e){var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?p("188"):p("268",Object.keys(e))),null===(e=sn(t))?null:e.stateNode}function iu(e,t,n,r){var o=t.current;return ru(e,t,n,o=ya(ga(),o),r)}function au(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function uu(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);_o=Po(function(e){return t.onCommitFiberRoot(n,e)}),To=Po(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(a({},e,{findHostInstanceByFiber:function(e){return null===(e=sn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}var lu=Za,su=tu,cu=function(){ka||0===_a||(Wa(_a,!1,null),_a=0)};function fu(e){this._expirationTime=ma(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function pu(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function du(e,t,n){this._internalRoot=So(e,t,n)}function hu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function mu(e,t,n,r,o){hu(n)||p("200");var i=n._reactRootContainer;if(i){if("function"==typeof o){var a=o;o=function(){var e=au(i._internalRoot);a.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new du(e,!1,t)}(n,r),"function"==typeof o){var u=o;o=function(){var e=au(i._internalRoot);u.call(e)}}Ja(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return au(i._internalRoot)}function yu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return hu(t)||p("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:lt,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Le.injectFiberControlledHostComponent($r),fu.prototype.render=function(e){this._defer||p("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new pu;return ru(e,t,null,n,r._onCommit),r},fu.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},fu.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||p("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&p("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,Va(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},fu.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},pu.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},pu.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&p("191",n),n()}}},du.prototype.render=function(e,t){var n=this._internalRoot,r=new pu;return null!==(t=void 0===t?null:t)&&r.then(t),iu(e,n,null,r._onCommit),r},du.prototype.unmount=function(e){var t=this._internalRoot,n=new pu;return null!==(e=void 0===e?null:e)&&n.then(e),iu(null,t,null,n._onCommit),n},du.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new pu;return null!==(n=void 0===n?null:n)&&o.then(n),iu(t,r,e,o._onCommit),o},du.prototype.createBatch=function(){var e=new fu(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},$e=lu,Ye=su,Qe=cu;var vu={createPortal:yu,findDOMNode:function(e){return null==e?null:1===e.nodeType?e:ou(e)},hydrate:function(e,t,n){return mu(null,e,t,!0,n)},render:function(e,t,n){return mu(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&p("38"),mu(e,t,n,!1,r)},unmountComponentAtNode:function(e){return hu(e)||p("40"),!!e._reactRootContainer&&(Ja(function(){mu(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return yu.apply(void 0,arguments)},unstable_batchedUpdates:Za,unstable_deferredUpdates:ba,unstable_interactiveUpdates:tu,flushSync:eu,unstable_flushControlled:nu,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:L,EventPluginRegistry:x,EventPropagators:ne,ReactControlledComponent:Ve,ReactDOMComponentTree:V,ReactDOMEventListener:Nn},unstable_createRoot:function(e,t){return new du(e,!0,null!=t&&!0===t.hydrate)}};uu({findFiberByHostInstance:G,bundleType:0,version:"16.4.1",rendererPackageName:"react-dom"});var gu={default:vu},bu=gu&&vu||gu;e.exports=bu.default?bu.default:bu},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(71)},function(e,t,n){"use strict";
/** @license React v16.4.1
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(28),o=n(27),i=n(26),a=n(25),u="function"==typeof Symbol&&Symbol.for,l=u?Symbol.for("react.element"):60103,s=u?Symbol.for("react.portal"):60106,c=u?Symbol.for("react.fragment"):60107,f=u?Symbol.for("react.strict_mode"):60108,p=u?Symbol.for("react.profiler"):60114,d=u?Symbol.for("react.provider"):60109,h=u?Symbol.for("react.context"):60110,m=u?Symbol.for("react.async_mode"):60111,y=u?Symbol.for("react.forward_ref"):60112;u&&Symbol.for("react.timeout");var v="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);o(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function A(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||b}function w(){}function E(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||b}A.prototype.isReactComponent={},A.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&g("85"),this.updater.enqueueSetState(this,e,t,"setState")},A.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=A.prototype;var C=E.prototype=new w;C.constructor=E,r(C,A.prototype),C.isPureReactComponent=!0;var x={current:null},k=Object.prototype.hasOwnProperty,O={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,n){var r=void 0,o={},i=null,a=null;if(null!=t)for(r in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(i=""+t.key),t)k.call(t,r)&&!O.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:l,type:e,key:i,ref:a,props:o,_owner:x.current}}function _(e){return"object"==typeof e&&null!==e&&e.$$typeof===l}var T=/\/+/g,P=[];function R(e,t,n,r){if(P.length){var o=P.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function B(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>P.length&&P.push(e)}function j(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var i=!1;if(null===e)i=!0;else switch(o){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case l:case s:i=!0}}if(i)return n(r,e,""===t?"."+I(e,0):t),1;if(i=0,t=""===t?".":t+":",Array.isArray(e))for(var a=0;a<e.length;a++){var u=t+I(o=e[a],a);i+=j(o,u,n,r)}else if(null===e||void 0===e?u=null:u="function"==typeof(u=v&&e[v]||e["@@iterator"])?u:null,"function"==typeof u)for(e=u.call(e),a=0;!(o=e.next()).done;)i+=j(o=o.value,u=t+I(o,a++),n,r);else"object"===o&&g("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return i}function I(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function N(e,t){e.func.call(e.context,t,e.count++)}function M(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?U(e,r,n,a.thatReturnsArgument):null!=e&&(_(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(T,"$&/")+"/")+n,e={$$typeof:l,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function U(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(T,"$&/")+"/"),t=R(t,i,r,o),null==e||j(e,"",M,t),B(t)}var D={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return U(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=R(null,null,t,n),null==e||j(e,"",N,t),B(t)},count:function(e){return null==e?0:j(e,"",a.thatReturnsNull,null)},toArray:function(e){var t=[];return U(e,t,null,a.thatReturnsArgument),t},only:function(e){return _(e)||g("143"),e}},createRef:function(){return{current:null}},Component:A,PureComponent:E,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:h,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_currentValue2:e,_changedBits:0,_changedBits2:0,Provider:null,Consumer:null}).Provider={$$typeof:d,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:y,render:e}},Fragment:c,StrictMode:f,unstable_AsyncMode:m,unstable_Profiler:p,createElement:S,cloneElement:function(e,t,n){(null===e||void 0===e)&&g("267",e);var o=void 0,i=r({},e.props),a=e.key,u=e.ref,s=e._owner;if(null!=t){void 0!==t.ref&&(u=t.ref,s=x.current),void 0!==t.key&&(a=""+t.key);var c=void 0;for(o in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)k.call(t,o)&&!O.hasOwnProperty(o)&&(i[o]=void 0===t[o]&&void 0!==c?c[o]:t[o])}if(1===(o=arguments.length-2))i.children=n;else if(1<o){c=Array(o);for(var f=0;f<o;f++)c[f]=arguments[f+2];i.children=c}return{$$typeof:l,type:e.type,key:a,ref:u,props:i,_owner:s}},createFactory:function(e){var t=S.bind(null,e);return t.type=e,t},isValidElement:_,version:"16.4.1",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:x,assign:r}},L={default:D},F=L&&D||L;e.exports=F.default?F.default:F},function(e,t,n){"use strict";var r=l(n(1)),o=l(n(72)),i=n(5),a=l(n(61)),u=l(n(22));function l(e){return e&&e.__esModule?e:{default:e}}n(32),o.default.render(r.default.createElement(i.Provider,{store:u.default},r.default.createElement(a.default,null)),document.getElementById("root"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnZhcmlhbnQvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2FybmluZy93YXJuaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L25vZGVfbW9kdWxlcy93YXJuaW5nL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL1Byb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Qcm92aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvc2hhbGxvd0VxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3Jvb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fU3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFJhd1RhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19vYmplY3RUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlR2V0VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFByb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzUGxhaW5PYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3Qvd3JhcE1hcFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwRGlzcGF0Y2hUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcFN0YXRlVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tZXJnZVByb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3NlbGVjdG9yRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9jb25uZWN0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2FsYnVtcy9yZWR1Y2Vycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hdXRoL3JlZHVjZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXBhdGhuYW1lL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92YWx1ZS1lcXVhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9QYXRoVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvTG9jYXRpb25VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9ET01VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVCcm93c2VySGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVIYXNoSGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVNZW1vcnlIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Ccm93c2VyUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL0hhc2hSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvTGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL01lbW9yeVJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9NZW1vcnlSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9tYXRjaFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Sb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Sb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9OYXZMaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUHJvbXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1Byb21wdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL2dlbmVyYXRlUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1JlZGlyZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1JlZGlyZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvU3RhdGljUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1N0YXRpY1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1N3aXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Td2l0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvZ2VuZXJhdGVQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL21hdGNoUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL3dpdGhSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvd2l0aFJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2FsYnVtcy9hY3Rpb25zLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3RodW1ibmFpbC9UaHVtYm5haWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hbGJ1bXMvQWxidW1zLmNzcz82OGJkIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2F1dGgvYWN0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2FwcC9Qcml2YXRlUm91dGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZpY2VzL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hcHAvcmVkdWNlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL3N0b3JlLmpzIiwid2VicGFjazovLy8uL3NyYy9zZXJ2aWNlcy9yZXF1ZXN0LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5T2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pbnZhcmlhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2ZyZWVHbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25vcm1hbGl6ZS5jc3Mvbm9ybWFsaXplLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLmNzcy9ub3JtYWxpemUuY3NzP2EzMmEiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYXBwL0FwcC5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYXBwL0FwcC5jc3M/M2QzZCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hdXRoL0Zvcm1Db250cm9sLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2F1dGgvQ3JlZGVudGlhbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYXV0aC9BdXRoLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2ltYWdlcy9JbWFnZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYWJvdXQvc3RlcGgucG5nIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Fib3V0L0Fib3V0LmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hYm91dC9BYm91dC5jc3M/YTkzNiIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hYm91dC9BYm91dC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9pbWFnZXMvSW1hZ2VHYWxsZXJ5LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2ltYWdlcy9JbWFnZURldGFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvaW1hZ2VzL0FsYnVtSW1hZ2VzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2ltYWdlcy9OZXdJbWFnZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hbGJ1bXMvQWxidW1EZXRhaWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYWxidW1zL05ld0FsYnVtLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2FsYnVtcy9BbGJ1bXMuY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3RodW1ibmFpbC9UaHVtYm5haWwuY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3RodW1ibmFpbC9UaHVtYm5haWwuY3NzPzBjNDAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYWxidW1zL0FsYnVtcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2FwcC9IZWFkZXIuY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2FwcC9IZWFkZXIuY3NzPzZlZjgiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYXBwL2hlcm8uanBnIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2FwcC9IZWFkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL3Byb21pc2UtbWlkZGxld2FyZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtdGh1bmsvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYXBwL0FwcC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vaGFybW9ueS1tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaXNOb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pc1RleHROb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9jb250YWluc05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZ2V0QWN0aXZlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJjb25kaXRpb24iLCJmb3JtYXQiLCJhIiwiYiIsImUiLCJmIiwiZXJyb3IiLCJ1bmRlZmluZWQiLCJFcnJvciIsImFyZ3MiLCJhcmdJbmRleCIsInJlcGxhY2UiLCJmcmFtZXNUb1BvcCIsIndhcm5pbmciLCJzdWJzY3JpcHRpb25TaGFwZSIsInByb3BfdHlwZXNfZGVmYXVsdCIsInNoYXBlIiwidHJ5U3Vic2NyaWJlIiwiZnVuYyIsImlzUmVxdWlyZWQiLCJ0cnlVbnN1YnNjcmliZSIsIm5vdGlmeU5lc3RlZFN1YnMiLCJpc1N1YnNjcmliZWQiLCJzdG9yZVNoYXBlIiwic3Vic2NyaWJlIiwiZGlzcGF0Y2giLCJnZXRTdGF0ZSIsImNyZWF0ZVByb3ZpZGVyIiwiX1Byb3ZpZGVyJGNoaWxkQ29udGV4Iiwic3RvcmVLZXkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzdWJzY3JpcHRpb25LZXkiLCJQcm92aWRlciIsIl9Db21wb25lbnQiLCJwcm9wcyIsImNvbnRleHQiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2NsYXNzQ2FsbENoZWNrIiwidGhpcyIsIl90aGlzIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzdG9yZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNvbnN0cnVjdG9yIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9pbmhlcml0cyIsImdldENoaWxkQ29udGV4dCIsIl9yZWYiLCJyZW5kZXIiLCJyZWFjdCIsIm9ubHkiLCJjaGlsZHJlbiIsInByb3BUeXBlcyIsImVsZW1lbnQiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbXBvbmVudHNfUHJvdmlkZXIiLCJDTEVBUkVEIiwibnVsbExpc3RlbmVycyIsIm5vdGlmeSIsIlN1YnNjcmlwdGlvbiIsInBhcmVudFN1YiIsIm9uU3RhdGVDaGFuZ2UiLCJTdWJzY3JpcHRpb25fY2xhc3NDYWxsQ2hlY2siLCJ1bnN1YnNjcmliZSIsImxpc3RlbmVycyIsImFkZE5lc3RlZFN1YiIsImxpc3RlbmVyIiwiQm9vbGVhbiIsImN1cnJlbnQiLCJuZXh0IiwiY2xlYXIiLCJzbGljZSIsInB1c2giLCJzcGxpY2UiLCJpbmRleE9mIiwiY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJzb3VyY2UiLCJob3RSZWxvYWRpbmdWZXJzaW9uIiwiZHVtbXlTdGF0ZSIsIm5vb3AiLCJjb25uZWN0QWR2YW5jZWQiLCJzZWxlY3RvckZhY3RvcnkiLCJfY29udGV4dFR5cGVzIiwiX2NoaWxkQ29udGV4dFR5cGVzIiwiX3JlZiRnZXREaXNwbGF5TmFtZSIsImdldERpc3BsYXlOYW1lIiwiX3JlZiRtZXRob2ROYW1lIiwibWV0aG9kTmFtZSIsIl9yZWYkcmVuZGVyQ291bnRQcm9wIiwicmVuZGVyQ291bnRQcm9wIiwiX3JlZiRzaG91bGRIYW5kbGVTdGF0Iiwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzIiwiX3JlZiRzdG9yZUtleSIsIl9yZWYkd2l0aFJlZiIsIndpdGhSZWYiLCJjb25uZWN0T3B0aW9ucyIsIm9iaiIsImtleXMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJ2ZXJzaW9uIiwiY29udGV4dFR5cGVzIiwiV3JhcHBlZENvbXBvbmVudCIsImJyb3dzZXJfZGVmYXVsdCIsIkpTT04iLCJzdHJpbmdpZnkiLCJ3cmFwcGVkQ29tcG9uZW50TmFtZSIsImRpc3BsYXlOYW1lIiwic2VsZWN0b3JGYWN0b3J5T3B0aW9ucyIsIkNvbm5lY3QiLCJjb25uZWN0QWR2YW5jZWRfY2xhc3NDYWxsQ2hlY2siLCJjb25uZWN0QWR2YW5jZWRfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInN0YXRlIiwicmVuZGVyQ291bnQiLCJwcm9wc01vZGUiLCJzZXRXcmFwcGVkSW5zdGFuY2UiLCJpbml0U2VsZWN0b3IiLCJpbml0U3Vic2NyaXB0aW9uIiwiY29ubmVjdEFkdmFuY2VkX2luaGVyaXRzIiwiX3JlZjIiLCJzdWJzY3JpcHRpb24iLCJjb21wb25lbnREaWRNb3VudCIsInNlbGVjdG9yIiwicnVuIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiZm9yY2VVcGRhdGUiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFByb3BzIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJnZXRXcmFwcGVkSW5zdGFuY2UiLCJ3cmFwcGVkSW5zdGFuY2UiLCJyZWYiLCJzb3VyY2VTZWxlY3RvciIsIm1ha2VTZWxlY3RvclN0YXRlZnVsIiwiY29tcG9uZW50RGlkVXBkYXRlIiwibm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlIiwic2V0U3RhdGUiLCJhZGRFeHRyYVByb3BzIiwid2l0aEV4dHJhcyIsImhvaXN0X25vbl9yZWFjdF9zdGF0aWNzX2Nqc19kZWZhdWx0IiwiaGFzT3duIiwiaXMiLCJ4IiwieSIsInNoYWxsb3dFcXVhbCIsIm9iakEiLCJvYmpCIiwia2V5c0EiLCJrZXlzQiIsImZyZWVTZWxmIiwiX1N5bWJvbCIsIl9mcmVlR2xvYmFsIiwiRnVuY3Rpb24iLCJvYmplY3RQcm90byIsInRvU3RyaW5nIiwiZ2V0UHJvdG90eXBlT2YiLCJmdW5jUHJvdG8iLCJpc1BsYWluT2JqZWN0X29iamVjdFByb3RvIiwiZnVuY1RvU3RyaW5nIiwid3JhcE1hcFRvUHJvcHNDb25zdGFudCIsImdldENvbnN0YW50Iiwib3B0aW9ucyIsImNvbnN0YW50IiwiY29uc3RhbnRTZWxlY3RvciIsImRlcGVuZHNPbk93blByb3BzIiwiZ2V0RGVwZW5kc09uT3duUHJvcHMiLCJtYXBUb1Byb3BzIiwid3JhcE1hcFRvUHJvcHNGdW5jIiwicHJveHkiLCJzdGF0ZU9yRGlzcGF0Y2giLCJvd25Qcm9wcyIsImNvbm5lY3RfbWFwRGlzcGF0Y2hUb1Byb3BzIiwibWFwRGlzcGF0Y2hUb1Byb3BzIiwicmVkdXgiLCJjb25uZWN0X21hcFN0YXRlVG9Qcm9wcyIsIm1hcFN0YXRlVG9Qcm9wcyIsIm1lcmdlUHJvcHNfZXh0ZW5kcyIsImRlZmF1bHRNZXJnZVByb3BzIiwic3RhdGVQcm9wcyIsImRpc3BhdGNoUHJvcHMiLCJjb25uZWN0X21lcmdlUHJvcHMiLCJtZXJnZVByb3BzIiwicHVyZSIsImFyZU1lcmdlZFByb3BzRXF1YWwiLCJoYXNSdW5PbmNlIiwibWVyZ2VkUHJvcHMiLCJuZXh0TWVyZ2VkUHJvcHMiLCJ3cmFwTWVyZ2VQcm9wc0Z1bmMiLCJpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwicHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJhcmVTdGF0ZXNFcXVhbCIsImFyZU93blByb3BzRXF1YWwiLCJhcmVTdGF0ZVByb3BzRXF1YWwiLCJoYXNSdW5BdExlYXN0T25jZSIsImhhbmRsZVN1YnNlcXVlbnRDYWxscyIsIm5leHRTdGF0ZSIsIm5leHRPd25Qcm9wcyIsInByb3BzQ2hhbmdlZCIsInN0YXRlQ2hhbmdlZCIsIm5leHRTdGF0ZVByb3BzIiwic3RhdGVQcm9wc0NoYW5nZWQiLCJoYW5kbGVOZXdTdGF0ZSIsImZpcnN0U3RhdGUiLCJmaXJzdE93blByb3BzIiwiaGFuZGxlRmlyc3RDYWxsIiwiZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImluaXRNYXBTdGF0ZVRvUHJvcHMiLCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzIiwiaW5pdE1lcmdlUHJvcHMiLCJzZWxlY3RvckZhY3Rvcnlfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJjb25uZWN0X2V4dGVuZHMiLCJtYXRjaCIsImFyZyIsImZhY3RvcmllcyIsInJlc3VsdCIsInN0cmljdEVxdWFsIiwiY29ubmVjdF9jb25uZWN0IiwiX3JlZiRjb25uZWN0SE9DIiwiY29ubmVjdEhPQyIsIl9yZWYkbWFwU3RhdGVUb1Byb3BzRiIsIm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWFwRGlzcGF0Y2hUb1BybyIsIm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWVyZ2VQcm9wc0ZhY3RvciIsIm1lcmdlUHJvcHNGYWN0b3JpZXMiLCJfcmVmJHNlbGVjdG9yRmFjdG9yeSIsIl9yZWYyJHB1cmUiLCJfcmVmMiRhcmVTdGF0ZXNFcXVhbCIsIl9yZWYyJGFyZU93blByb3BzRXF1YSIsIl9yZWYyJGFyZVN0YXRlUHJvcHNFcSIsIl9yZWYyJGFyZU1lcmdlZFByb3BzRSIsImV4dHJhT3B0aW9ucyIsImNvbm5lY3Rfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJhbGJ1bXMiLCJ0eXBlIiwicGF5bG9hZCIsIkFMQlVNU19MT0FEIiwiQUxCVU1fQUREIiwiYWxidW0iLCJBTEJVTV9MT0FEIiwiYWxidW1JZCIsInNlbGVjdGVkQWxidW0iLCJmaWx0ZXIiLCJlYWNoQWxidW0iLCJfaWQiLCJpbWFnZXMiLCJJTUFHRVNfTE9BRCIsIklNQUdFX0FERCIsImdldEFsYnVtcyIsImdldEFsYnVtIiwiZ2V0SW1hZ2VzIiwidXNlciIsIlVTRVJfQVVUSCIsIkxPR09VVCIsImNoZWNrZWRBdXRoIiwiQ0hFQ0tFRF9BVVRIIiwiZ2V0VXNlciIsImdldENoZWNrZWRBdXRoIiwiaXNBYnNvbHV0ZSIsInBhdGhuYW1lIiwiY2hhckF0Iiwic3BsaWNlT25lIiwibGlzdCIsImluZGV4IiwiayIsInBvcCIsInJlc29sdmVfcGF0aG5hbWUiLCJ0byIsImZyb20iLCJ0b1BhcnRzIiwic3BsaXQiLCJmcm9tUGFydHMiLCJpc1RvQWJzIiwiaXNGcm9tQWJzIiwibXVzdEVuZEFicyIsImNvbmNhdCIsImhhc1RyYWlsaW5nU2xhc2giLCJsYXN0IiwidXAiLCJwYXJ0IiwidW5zaGlmdCIsImpvaW4iLCJzdWJzdHIiLCJfdHlwZW9mIiwiaXRlcmF0b3IiLCJ2YWx1ZV9lcXVhbCIsInZhbHVlRXF1YWwiLCJBcnJheSIsImlzQXJyYXkiLCJldmVyeSIsIml0ZW0iLCJhVHlwZSIsImFWYWx1ZSIsInZhbHVlT2YiLCJiVmFsdWUiLCJhS2V5cyIsImJLZXlzIiwiYWRkTGVhZGluZ1NsYXNoIiwicGF0aCIsInN0cmlwTGVhZGluZ1NsYXNoIiwiaGFzQmFzZW5hbWUiLCJwcmVmaXgiLCJSZWdFeHAiLCJ0ZXN0Iiwic3RyaXBCYXNlbmFtZSIsInN0cmlwVHJhaWxpbmdTbGFzaCIsImNyZWF0ZVBhdGgiLCJsb2NhdGlvbiIsInNlYXJjaCIsImhhc2giLCJMb2NhdGlvblV0aWxzX2NyZWF0ZUxvY2F0aW9uIiwiY3VycmVudExvY2F0aW9uIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJwYXJzZVBhdGgiLCJkZWNvZGVVUkkiLCJVUklFcnJvciIsIkxvY2F0aW9uVXRpbHNfbG9jYXRpb25zQXJlRXF1YWwiLCJlc19jcmVhdGVUcmFuc2l0aW9uTWFuYWdlciIsInByb21wdCIsInNldFByb21wdCIsIm5leHRQcm9tcHQiLCJjb25maXJtVHJhbnNpdGlvblRvIiwiYWN0aW9uIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsImNhbGxiYWNrIiwiYXBwZW5kTGlzdGVuZXIiLCJmbiIsImlzQWN0aXZlIiwiYXBwbHkiLCJub3RpZnlMaXN0ZW5lcnMiLCJfbGVuIiwiX2tleSIsImZvckVhY2giLCJjYW5Vc2VET00iLCJ3aW5kb3ciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwibm9kZSIsImV2ZW50IiwiYXR0YWNoRXZlbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGV0YWNoRXZlbnQiLCJnZXRDb25maXJtYXRpb24iLCJtZXNzYWdlIiwiY29uZmlybSIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5X3R5cGVvZiIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5X2V4dGVuZHMiLCJnZXRIaXN0b3J5U3RhdGUiLCJoaXN0b3J5IiwiZXNfY3JlYXRlQnJvd3Nlckhpc3RvcnkiLCJpbnZhcmlhbnRfYnJvd3Nlcl9kZWZhdWx0IiwiZ2xvYmFsSGlzdG9yeSIsImNhblVzZUhpc3RvcnkiLCJ1YSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInN1cHBvcnRzSGlzdG9yeSIsIm5lZWRzSGFzaENoYW5nZUxpc3RlbmVyIiwiX3Byb3BzJGZvcmNlUmVmcmVzaCIsImZvcmNlUmVmcmVzaCIsIl9wcm9wcyRnZXRVc2VyQ29uZmlybSIsIl9wcm9wcyRrZXlMZW5ndGgiLCJrZXlMZW5ndGgiLCJiYXNlbmFtZSIsImdldERPTUxvY2F0aW9uIiwiaGlzdG9yeVN0YXRlIiwiX3dpbmRvdyRsb2NhdGlvbiIsImNyZWF0ZUtleSIsIk1hdGgiLCJyYW5kb20iLCJ0cmFuc2l0aW9uTWFuYWdlciIsImhhbmRsZVBvcFN0YXRlIiwiaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCIsImhhbmRsZVBvcCIsImhhbmRsZUhhc2hDaGFuZ2UiLCJmb3JjZU5leHRQb3AiLCJvayIsInJldmVydFBvcCIsImZyb21Mb2NhdGlvbiIsInRvTG9jYXRpb24iLCJ0b0luZGV4IiwiYWxsS2V5cyIsImZyb21JbmRleCIsImRlbHRhIiwiZ28iLCJpbml0aWFsTG9jYXRpb24iLCJjcmVhdGVIcmVmIiwibGlzdGVuZXJDb3VudCIsImNoZWNrRE9NTGlzdGVuZXJzIiwiaXNCbG9ja2VkIiwiaHJlZiIsInB1c2hTdGF0ZSIsInByZXZJbmRleCIsIm5leHRLZXlzIiwicmVwbGFjZVN0YXRlIiwiZ29CYWNrIiwiZ29Gb3J3YXJkIiwiYmxvY2siLCJ1bmJsb2NrIiwibGlzdGVuIiwidW5saXN0ZW4iLCJjcmVhdGVIYXNoSGlzdG9yeV9leHRlbmRzIiwiSGFzaFBhdGhDb2RlcnMiLCJoYXNoYmFuZyIsImVuY29kZVBhdGgiLCJkZWNvZGVQYXRoIiwibm9zbGFzaCIsInNsYXNoIiwiZ2V0SGFzaFBhdGgiLCJzdWJzdHJpbmciLCJyZXBsYWNlSGFzaFBhdGgiLCJlc19jcmVhdGVIYXNoSGlzdG9yeSIsImNhbkdvV2l0aG91dFJlbG9hZCIsIl9wcm9wcyRoYXNoVHlwZSIsImhhc2hUeXBlIiwiX0hhc2hQYXRoQ29kZXJzJGhhc2hUIiwiaWdub3JlUGF0aCIsImVuY29kZWRQYXRoIiwicHJldkxvY2F0aW9uIiwiYWxsUGF0aHMiLCJsYXN0SW5kZXhPZiIsInB1c2hIYXNoUGF0aCIsIm5leHRQYXRocyIsImNyZWF0ZU1lbW9yeUhpc3RvcnlfdHlwZW9mIiwiY3JlYXRlTWVtb3J5SGlzdG9yeV9leHRlbmRzIiwiY2xhbXAiLCJsb3dlckJvdW5kIiwidXBwZXJCb3VuZCIsIm1pbiIsIm1heCIsImVzX2NyZWF0ZU1lbW9yeUhpc3RvcnkiLCJfcHJvcHMkaW5pdGlhbEVudHJpZXMiLCJpbml0aWFsRW50cmllcyIsIl9wcm9wcyRpbml0aWFsSW5kZXgiLCJpbml0aWFsSW5kZXgiLCJlbnRyaWVzIiwibWFwIiwiZW50cnkiLCJuZXh0SW5kZXgiLCJuZXh0RW50cmllcyIsImNhbkdvIiwiUm91dGVyX2V4dGVuZHMiLCJSb3V0ZXJfUm91dGVyIiwiX1JlYWN0JENvbXBvbmVudCIsIlJvdXRlciIsIl90ZW1wIiwiY29tcHV0ZU1hdGNoIiwicm91dGVyIiwicm91dGUiLCJ1cmwiLCJwYXJhbXMiLCJpc0V4YWN0IiwiY29tcG9uZW50V2lsbE1vdW50IiwiX3RoaXMyIiwiX3Byb3BzIiwicmVhY3RfZGVmYXVsdCIsIkNoaWxkcmVuIiwiY291bnQiLCJ3YXJuaW5nX2RlZmF1bHQiLCJDb21wb25lbnQiLCJlc19Sb3V0ZXIiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX1JvdXRlciIsIkJyb3dzZXJSb3V0ZXJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIkJyb3dzZXJSb3V0ZXJfQnJvd3NlclJvdXRlciIsIkJyb3dzZXJSb3V0ZXIiLCJCcm93c2VyUm91dGVyX2NsYXNzQ2FsbENoZWNrIiwiQnJvd3NlclJvdXRlcl9pbmhlcml0cyIsInN0cmluZyIsImJvb2wiLCJudW1iZXIiLCJlc19Ccm93c2VyUm91dGVyIiwiSGFzaFJvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiSGFzaFJvdXRlcl9IYXNoUm91dGVyIiwiSGFzaFJvdXRlciIsIkhhc2hSb3V0ZXJfY2xhc3NDYWxsQ2hlY2siLCJIYXNoUm91dGVyX2luaGVyaXRzIiwib25lT2YiLCJlc19IYXNoUm91dGVyIiwiTGlua19leHRlbmRzIiwiTGlua19wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiaXNNb2RpZmllZEV2ZW50IiwibWV0YUtleSIsImFsdEtleSIsImN0cmxLZXkiLCJzaGlmdEtleSIsIkxpbmtfTGluayIsIkxpbmsiLCJMaW5rX2NsYXNzQ2FsbENoZWNrIiwiaGFuZGxlQ2xpY2siLCJvbkNsaWNrIiwiZGVmYXVsdFByZXZlbnRlZCIsImJ1dHRvbiIsInByZXZlbnREZWZhdWx0IiwiX3RoaXMkcHJvcHMiLCJMaW5rX2luaGVyaXRzIiwiaW5uZXJSZWYiLCJvbmVPZlR5cGUiLCJkZWZhdWx0UHJvcHMiLCJlc19MaW5rIiwiTWVtb3J5Um91dGVyX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJNZW1vcnlSb3V0ZXJfTWVtb3J5Um91dGVyIiwiTWVtb3J5Um91dGVyIiwiTWVtb3J5Um91dGVyX2NsYXNzQ2FsbENoZWNrIiwiTWVtb3J5Um91dGVyX2luaGVyaXRzIiwiYXJyYXkiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX01lbW9yeVJvdXRlciIsInBhdHRlcm5DYWNoZSIsImNhY2hlQ291bnQiLCJlc19tYXRjaFBhdGgiLCJwYXJlbnQiLCJfb3B0aW9ucyIsIl9vcHRpb25zJGV4YWN0IiwiZXhhY3QiLCJfb3B0aW9ucyRzdHJpY3QiLCJzdHJpY3QiLCJfb3B0aW9ucyRzZW5zaXRpdmUiLCJzZW5zaXRpdmUiLCJfY29tcGlsZVBhdGgiLCJwYXR0ZXJuIiwiY2FjaGVLZXkiLCJlbmQiLCJjYWNoZSIsImNvbXBpbGVkUGF0dGVybiIsInJlIiwicGF0aF90b19yZWdleHBfZGVmYXVsdCIsIm1hdGNoUGF0aF9jb21waWxlUGF0aCIsImV4ZWMiLCJ2YWx1ZXMiLCJyZWR1Y2UiLCJtZW1vIiwiUm91dGVfZXh0ZW5kcyIsIlJvdXRlX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJSb3V0ZV9pc0VtcHR5Q2hpbGRyZW4iLCJSb3V0ZV9Sb3V0ZSIsIlJvdXRlIiwiUm91dGVfY2xhc3NDYWxsQ2hlY2siLCJSb3V0ZV9pbmhlcml0cyIsImNvbXB1dGVkTWF0Y2giLCJjb21wb25lbnQiLCJuZXh0Q29udGV4dCIsIl9jb250ZXh0JHJvdXRlciIsInN0YXRpY0NvbnRleHQiLCJlc19Sb3V0ZSIsInJlYWN0X3JvdXRlcl9kb21fZXNfUm91dGUiLCJOYXZMaW5rX2V4dGVuZHMiLCJOYXZMaW5rX3R5cGVvZiIsIk5hdkxpbmtfTmF2TGluayIsImFjdGl2ZUNsYXNzTmFtZSIsImNsYXNzTmFtZSIsImFjdGl2ZVN0eWxlIiwic3R5bGUiLCJnZXRJc0FjdGl2ZSIsImFyaWFDdXJyZW50IiwicmVzdCIsIk5hdkxpbmtfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJlc2NhcGVkUGF0aCIsImFyaWEtY3VycmVudCIsImVzX05hdkxpbmsiLCJQcm9tcHRfUHJvbXB0IiwiUHJvbXB0IiwiUHJvbXB0X2NsYXNzQ2FsbENoZWNrIiwiUHJvbXB0X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJQcm9tcHRfaW5oZXJpdHMiLCJlbmFibGUiLCJkaXNhYmxlIiwid2hlbiIsInJlYWN0X3JvdXRlcl9kb21fZXNfUHJvbXB0IiwiZ2VuZXJhdGVQYXRoX3BhdHRlcm5DYWNoZSIsImdlbmVyYXRlUGF0aF9jYWNoZUNvdW50IiwiZXNfZ2VuZXJhdGVQYXRoIiwiY29tcGlsZWRHZW5lcmF0b3IiLCJjb21waWxlIiwiZ2VuZXJhdGVQYXRoX2NvbXBpbGVHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJwcmV0dHkiLCJSZWRpcmVjdF9leHRlbmRzIiwiUmVkaXJlY3RfUmVkaXJlY3QiLCJSZWRpcmVjdCIsIlJlZGlyZWN0X2NsYXNzQ2FsbENoZWNrIiwiUmVkaXJlY3RfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJlZGlyZWN0X2luaGVyaXRzIiwiaXNTdGF0aWMiLCJwZXJmb3JtIiwicHJldlByb3BzIiwicHJldlRvIiwibmV4dFRvIiwiY29tcHV0ZVRvIiwicmVhY3Rfcm91dGVyX2RvbV9lc19SZWRpcmVjdCIsIlN0YXRpY1JvdXRlcl9leHRlbmRzIiwiU3RhdGljUm91dGVyX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJTdGF0aWNSb3V0ZXJfYWRkTGVhZGluZ1NsYXNoIiwiYWRkQmFzZW5hbWUiLCJTdGF0aWNSb3V0ZXJfY3JlYXRlVVJMIiwiU3RhdGljUm91dGVyX3N0YXRpY0hhbmRsZXIiLCJTdGF0aWNSb3V0ZXJfU3RhdGljUm91dGVyIiwiU3RhdGljUm91dGVyIiwiU3RhdGljUm91dGVyX2NsYXNzQ2FsbENoZWNrIiwiaGFuZGxlUHVzaCIsImhhbmRsZVJlcGxhY2UiLCJfdGhpcyRwcm9wczIiLCJoYW5kbGVMaXN0ZW4iLCJoYW5kbGVCbG9jayIsIlN0YXRpY1JvdXRlcl9pbmhlcml0cyIsIlN0YXRpY1JvdXRlcl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImJhc2UiLCJTdGF0aWNSb3V0ZXJfc3RyaXBCYXNlbmFtZSIsInJlYWN0X3JvdXRlcl9kb21fZXNfU3RhdGljUm91dGVyIiwiU3dpdGNoX1N3aXRjaCIsIlN3aXRjaCIsIlN3aXRjaF9jbGFzc0NhbGxDaGVjayIsIlN3aXRjaF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiU3dpdGNoX2luaGVyaXRzIiwiY2hpbGQiLCJpc1ZhbGlkRWxlbWVudCIsIl9lbGVtZW50JHByb3BzIiwicGF0aFByb3AiLCJjbG9uZUVsZW1lbnQiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX1N3aXRjaCIsInJlYWN0X3JvdXRlcl9kb21fZXNfZ2VuZXJhdGVQYXRoIiwicmVhY3Rfcm91dGVyX2RvbV9lc19tYXRjaFBhdGgiLCJ3aXRoUm91dGVyX2V4dGVuZHMiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX3dpdGhSb3V0ZXIiLCJDIiwid3JhcHBlZENvbXBvbmVudFJlZiIsInJlbWFpbmluZ1Byb3BzIiwid2l0aFJvdXRlcl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsInJvdXRlQ29tcG9uZW50UHJvcHMiLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJtZW1vaXplIiwiYWxsIiwiYXRvYiIsImdldEVsZW1lbnQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwic3R5bGVzSW5zZXJ0ZWRBdFRvcCIsImZpeFVybHMiLCJhZGRTdHlsZXNUb0RvbSIsInN0eWxlcyIsImRvbVN0eWxlIiwiaWQiLCJyZWZzIiwiaiIsInBhcnRzIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJuZXdTdHlsZXMiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsImluc2VydFN0eWxlRWxlbWVudCIsImluc2VydEludG8iLCJsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCIsImluc2VydEF0IiwibmV4dFNpYmxpbmciLCJpbnNlcnRCZWZvcmUiLCJhcHBlbmRDaGlsZCIsImZpcnN0Q2hpbGQiLCJiZWZvcmUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJpZHgiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJhdHRycyIsImFkZEF0dHJzIiwiZWwiLCJzZXRBdHRyaWJ1dGUiLCJ1cGRhdGUiLCJyZW1vdmUiLCJ0cmFuc2Zvcm0iLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJidG9hIiwibGluayIsInJlbCIsImNyZWF0ZUxpbmtFbGVtZW50IiwiYXV0b0ZpeFVybHMiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImJsb2IiLCJvbGRTcmMiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNyZWF0ZVRleHROb2RlIiwibmV3T2JqIiwiREVCVUciLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwicmVwbGFjZVRleHQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlbWVudCIsImNzc05vZGUiLCJjaGlsZE5vZGVzIiwidXNlU291cmNlTWFwIiwiY29udGVudCIsImNzc01hcHBpbmciLCJzb3VyY2VNYXBwaW5nIiwidG9Db21tZW50Iiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2VSb290IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwibG9hZEFsYnVtcyIsIl9hcGkiLCJnZXRBbGxBbGJ1bXMiLCJjcmVhdGVBbGJ1bSIsInBvc3RBbGJ1bSIsImxvYWRBbGJ1bSIsIl9yZWR1Y2VycyIsImdldEltYWdlc0J5QWxidW0iLCJ0aGVuIiwibG9hZEltYWdlcyIsImdldEFsbEltYWdlcyIsImNyZWF0ZUltYWdlIiwiaW1hZ2UiLCJwb3N0SW1hZ2UiLCJOZXdJbWFnZSIsIl9yZWFjdCIsIlRodW1ibmFpbCIsInRpdGxlIiwiX3JlYWN0MiIsImRlZmF1bHQiLCJ0aHVtYm5haWwiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJQcm9wVHlwZXMiLCJpc2FycmF5IiwicGF0aFRvUmVnZXhwIiwicGFyc2UiLCJzdHIiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwidG9rZW5zVG9SZWdFeHAiLCJQQVRIX1JFR0VYUCIsInJlcyIsInRva2VucyIsImRlZmF1bHREZWxpbWl0ZXIiLCJkZWxpbWl0ZXIiLCJlc2NhcGVkIiwib2Zmc2V0IiwiY2FwdHVyZSIsImdyb3VwIiwibW9kaWZpZXIiLCJhc3RlcmlzayIsInBhcnRpYWwiLCJyZXBlYXQiLCJvcHRpb25hbCIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwiY2hhckNvZGVBdCIsInRvVXBwZXJDYXNlIiwiZW5jb2RlQXN0ZXJpc2siLCJtYXRjaGVzIiwib3B0cyIsImRhdGEiLCJlbmNvZGUiLCJ0b2tlbiIsInNlZ21lbnQiLCJhdHRhY2hLZXlzIiwiZmxhZ3MiLCJlbmRzV2l0aERlbGltaXRlciIsImdyb3VwcyIsInJlZ2V4cFRvUmVnZXhwIiwiYXJyYXlUb1JlZ2V4cCIsInN0cmluZ1RvUmVnZXhwIiwiUkVBQ1RfU1RBVElDUyIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsImRlc2NyaXB0b3IiLCJobXIiLCJsb2NhbHMiLCJfcmVxdWVzdCIsIm1ha2VBdXRoIiwiYXBpIiwiY3JlZGVudGlhbHMiLCJhdXRoQ2hlY2tlZCIsInNpZ251cCIsInNpZ251cEFwaSIsInNpZ25pbiIsInNpZ25pbkFwaSIsImxvZ291dCIsInRyeUxvYWRVc2VyIiwiZ2V0U3RvcmVkVXNlciIsInZlcmlmeVVzZXIiLCJjYXRjaCIsImNsZWFyU3RvcmVkVXNlciIsIkFjdGlvblR5cGVzIiwiSU5JVCIsIlJFUExBQ0UiLCJpc1BsYWluT2JqZWN0IiwicHJvdG8iLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsInN5bWJvbF9vYnNlcnZhYmxlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJvdXRlclN1YnNjcmliZSIsIm9ic2VydmVyIiwib2JzZXJ2ZVN0YXRlIiwiZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UiLCJhY3Rpb25UeXBlIiwiU3RyaW5nIiwiY29tYmluZVJlZHVjZXJzIiwicmVkdWNlcnMiLCJyZWR1Y2VyS2V5cyIsImZpbmFsUmVkdWNlcnMiLCJmaW5hbFJlZHVjZXJLZXlzIiwic2hhcGVBc3NlcnRpb25FcnJvciIsImFzc2VydFJlZHVjZXJTaGFwZSIsImhhc0NoYW5nZWQiLCJfaSIsInByZXZpb3VzU3RhdGVGb3JLZXkiLCJuZXh0U3RhdGVGb3JLZXkiLCJlcnJvck1lc3NhZ2UiLCJiaW5kQWN0aW9uQ3JlYXRvciIsImFjdGlvbkNyZWF0b3IiLCJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJhY3Rpb25DcmVhdG9ycyIsImJvdW5kQWN0aW9uQ3JlYXRvcnMiLCJjb21wb3NlIiwiZnVuY3MiLCJhcHBseU1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlcyIsIl9sZW4yIiwiX2tleTIiLCJfZGlzcGF0Y2giLCJtaWRkbGV3YXJlQVBJIiwiY2hhaW4iLCJtaWRkbGV3YXJlIiwicm9vdCIsIl9wb255ZmlsbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiZ2xvYmFsIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIl9yZWFjdFJlZHV4IiwiX3JlYWN0Um91dGVyRG9tIiwiUHJpdmF0ZVJvdXRlIiwicHJvdG9UeXBlcyIsImNvbm5lY3QiLCJwb3N0IiwiaGVhZGVyIiwiQXV0aG9yaXphdGlvbiIsIkVSUk9SIiwiRVJST1JfQ0xFQVIiLCJsb2FkaW5nIiwiTE9BRElOR19TVEFSVCIsIkxPQURJTkdfRU5EIiwiZ2V0RXJyb3IiLCJnZXRMb2FkaW5nIiwiX3JlZHV4IiwiX3JlZHVjZXJzMiIsIl9yZWR1Y2VyczMiLCJyb290UmVkdWNlciIsImNvbXBvc2VFbmhhbmNlcnMiLCJfX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18iLCJ0aHVuayIsInByb21pc2VNaWRkbGV3YXJlIiwic3RvcmFnZSIsImxvY2FsU3RvcmFnZSIsIm5leHRUb2tlbiIsInNldEl0ZW0iLCJqc29uIiwiZ2V0SXRlbSIsImVyciIsInJlbW92ZUl0ZW0iLCJyZXF1ZXN0IiwiYm9keSIsImhlYWRlcnMiLCJmZXRjaCIsInJlc3BvbnNlIiwiZXJyb3JzIiwiY29udGVudC10eXBlIiwibWV0aG9kIiwicHV0IiwiZGVsIiwiZyIsImV2YWwiLCJtYWtlRW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb24iLCJ0aGF0UmV0dXJucyIsInRoYXRSZXR1cm5zRmFsc2UiLCJ0aGF0UmV0dXJuc1RydWUiLCJ0aGF0UmV0dXJuc051bGwiLCJ0aGF0UmV0dXJuc1RoaXMiLCJ0aGF0UmV0dXJuc0FyZ3VtZW50IiwidmFsaWRhdGVGb3JtYXQiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0ZXN0MSIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwidGVzdDMiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJzeW1ib2xzIiwidmFsIiwidG9PYmplY3QiLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJvYnNlcnZhYmxlIiwiZnJlZUdsb2JhbCIsIm5hbWVzIiwibWFwcGluZ3MiLCJmaWxlIiwic291cmNlc0NvbnRlbnQiLCJhcHAiLCJGb3JtQ29udHJvbCIsImxhYmVsIiwiQ3JlZGVudGlhbHMiLCJbb2JqZWN0IE9iamVjdF0iLCJzdXBlciIsImVtYWlsIiwicGFzc3dvcmQiLCJoYW5kbGVDaGFuZ2UiLCJoYW5kbGVTdWJtaXQiLCJzdWJtaXQiLCJhbGxvd05hbWUiLCJvblN1Ym1pdCIsIl9Gb3JtQ29udHJvbDIiLCJvbkNoYW5nZSIsIl9hY3Rpb25zIiwiQXV0aCIsInJlZGlyZWN0IiwiX0NyZWRlbnRpYWxzMiIsIkltYWdlcyIsIl9UaHVtYm5haWwyIiwiYWJvdXQiLCJzdGVwaCIsIkltYWdlR2FsbGVyeSIsImhhbmRsZUluZGV4IiwiaW5jcmVtZW50IiwiZGVzY3JpcHRpb24iLCJkaXNhYmxlZCIsInNyYyIsIkltYWdlRGV0YWlscyIsIkFsYnVtSW1hZ2VzIiwiZGVmYXVsdFN0YXRlIiwiZWRpdCIsInBsYWNlaG9sZGVyIiwiQWxidW1EZXRhaWwiLCJwb3N0ZXJJbWFnZSIsIl9Qcml2YXRlUm91dGUyIiwiTmV3QWxidW0iLCJBbGJ1bXMiLCJiYXNlVXJsIiwicHJvdG9jb2wiLCJob3N0IiwiY3VycmVudERpciIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJuZXdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCJ0cmltIiwiJDEiLCJIZWFkZXIiLCJoZXJvIiwiaXNQcm9taXNlIiwiY3JlYXRlVGh1bmtNaWRkbGV3YXJlIiwiZXh0cmFBcmd1bWVudCIsIndpdGhFeHRyYUFyZ3VtZW50IiwiYXJyIiwiQXBwIiwiaGFuZGxlTG9nb3V0IiwiX0hlYWRlcjIiLCJBYm91dCIsIm9yaWdpbmFsTW9kdWxlIiwid2VicGFja1BvbHlmaWxsIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJzaGltIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsIlJlYWN0UHJvcFR5cGVzIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsImNoZWNrUHJvcFR5cGVzIiwiZGVmYXVsdFZpZXciLCJvd25lckRvY3VtZW50IiwiTm9kZSIsIm5vZGVUeXBlIiwibm9kZU5hbWUiLCJpc05vZGUiLCJpc1RleHROb2RlIiwiY29udGFpbnNOb2RlIiwib3V0ZXJOb2RlIiwiaW5uZXJOb2RlIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImRvYyIsImFjdGl2ZUVsZW1lbnQiLCJFeGVjdXRpb25FbnZpcm9ubWVudCIsImNhblVzZVdvcmtlcnMiLCJXb3JrZXIiLCJjYW5Vc2VFdmVudExpc3RlbmVycyIsImNhblVzZVZpZXdwb3J0Iiwic2NyZWVuIiwiaXNJbldvcmtlciIsImFhIiwiYmEiLCJ2IiwiZGEiLCJlYSIsImZhIiwiaGEiLCJBIiwiQiIsIl9jYXVnaHRFcnJvciIsIl9oYXNDYXVnaHRFcnJvciIsIl9yZXRocm93RXJyb3IiLCJfaGFzUmV0aHJvd0Vycm9yIiwiaW52b2tlR3VhcmRlZENhbGxiYWNrIiwiaCIsImludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvciIsImhhc0NhdWdodEVycm9yIiwiY2xlYXJDYXVnaHRFcnJvciIsInJldGhyb3dDYXVnaHRFcnJvciIsImxhIiwibWEiLCJuYSIsIm9hIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJwYSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwicWEiLCJyZWdpc3RyYXRpb25OYW1lIiwicmEiLCJzYSIsImRlcGVuZGVuY2llcyIsInRhIiwidmEiLCJwbHVnaW5zIiwiZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzIiwicmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMiLCJyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzIiwicG9zc2libGVSZWdpc3RyYXRpb25OYW1lcyIsImluamVjdEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUiLCJ3YSIsInhhIiwieWEiLCJ6YSIsImN1cnJlbnRUYXJnZXQiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwic3RhdGVOb2RlIiwiSWEiLCJKYSIsIkthIiwiaW5qZWN0aW9uIiwiZ2V0TGlzdGVuZXIiLCJydW5FdmVudHNJbkJhdGNoIiwicnVuRXh0cmFjdGVkRXZlbnRzSW5CYXRjaCIsIkxhIiwiTWEiLCJOYSIsInRhZyIsIk9hIiwiUGEiLCJRYSIsInByZWNhY2hlRmliZXJOb2RlIiwiZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUiLCJnZXRJbnN0YW5jZUZyb21Ob2RlIiwiZ2V0Tm9kZUZyb21JbnN0YW5jZSIsImdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUiLCJ1cGRhdGVGaWJlclByb3BzIiwiRiIsInJldHVybiIsIlJhIiwiU2EiLCJkaXNwYXRjaENvbmZpZyIsIlRhIiwiX3RhcmdldEluc3QiLCJVYSIsIlZhIiwiWGEiLCJZYSIsIlphIiwiYWx0ZXJuYXRlIiwiJGEiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQiLCJhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMiLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyIsImFiIiwidG9Mb3dlckNhc2UiLCJiYiIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsImNiIiwiZGIiLCJlYiIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJmYiIsImdiIiwiaGIiLCJpYiIsImpiIiwia2IiLCJsYiIsImRvY3VtZW50RWxlbWVudCIsIkciLCJfcm9vdCIsIl9zdGFydFRleHQiLCJfZmFsbGJhY2tUZXh0IiwibWIiLCJuYiIsIm9iIiwicGIiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJEYXRlIiwibm93IiwiaXNUcnVzdGVkIiwiSCIsIm5hdGl2ZUV2ZW50IiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJyYiIsImV2ZW50UG9vbCIsInNiIiwiZGVzdHJ1Y3RvciIsInFiIiwiZ2V0UG9vbGVkIiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImV4dGVuZCIsInRiIiwidWIiLCJ2YiIsIndiIiwieGIiLCJkb2N1bWVudE1vZGUiLCJ5YiIsInpiIiwiQWIiLCJCYiIsImJlZm9yZUlucHV0IiwiYnViYmxlZCIsImNhcHR1cmVkIiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJDYiIsIkRiIiwia2V5Q29kZSIsIkViIiwiZGV0YWlsIiwiRmIiLCJJYiIsIndoaWNoIiwiR2IiLCJjaGFyIiwiSGIiLCJKYiIsIktiIiwiaW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudCIsIkxiIiwiTWIiLCJOYiIsInJlc3RvcmVDb250cm9sbGVkU3RhdGUiLCJPYiIsIlBiIiwiUWIiLCJSYiIsImVucXVldWVTdGF0ZVJlc3RvcmUiLCJuZWVkc1N0YXRlUmVzdG9yZSIsInJlc3RvcmVTdGF0ZUlmTmVlZGVkIiwiU2IiLCJUYiIsIlViIiwiVmIiLCJXYiIsIlhiIiwiY29sb3IiLCJkYXRlIiwiZGF0ZXRpbWUiLCJkYXRldGltZS1sb2NhbCIsIm1vbnRoIiwicmFuZ2UiLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsIndlZWsiLCJZYiIsIlpiIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwiJGIiLCJhYyIsImNjIiwiX3ZhbHVlVHJhY2tlciIsInNldCIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJiYyIsImRjIiwiY2hlY2tlZCIsImVjIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJSZWFjdEN1cnJlbnRPd25lciIsImZjIiwiZm9yIiwiZ2MiLCJoYyIsImljIiwiamMiLCJrYyIsImxjIiwibWMiLCJwYyIsInFjIiwicmMiLCJzYyIsInRjIiwidWMiLCJwZW5kaW5nUHJvcHMiLCIkJHR5cGVvZiIsInZjIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJ3YyIsInhjIiwiemMiLCJJIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsIkoiLCJEYyIsIkVjIiwiRmMiLCJCYyIsImlzTmFOIiwiQ2MiLCJBYyIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwiR2MiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIkhjIiwiSWMiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiSmMiLCJLYyIsIkxjIiwiTWMiLCJ0YWJJbmRleCIsIk5jIiwiY2hhbmdlIiwiT2MiLCJQYyIsIlFjIiwiUmMiLCJTYyIsIlRjIiwiVWMiLCJWYyIsIldjIiwiWGMiLCJZYyIsIlpjIiwiJGMiLCJhZCIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJiZCIsInZpZXciLCJjZCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJkZCIsImdldE1vZGlmaWVyU3RhdGUiLCJlZCIsImZkIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwiZ2QiLCJwb2ludGVySWQiLCJ3aWR0aCIsImhlaWdodCIsInByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiaGQiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsInBvaW50ZXJFbnRlciIsInBvaW50ZXJMZWF2ZSIsInBhcmVudFdpbmRvdyIsImpkIiwiZWZmZWN0VGFnIiwia2QiLCJsZCIsInNpYmxpbmciLCJtZCIsIm9kIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsInBkIiwiY2xpcGJvYXJkRGF0YSIsInFkIiwicmQiLCJjaGFyQ29kZSIsInNkIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsInRkIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsInVkIiwibG9jYWxlIiwidmQiLCJkYXRhVHJhbnNmZXIiLCJ3ZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJ4ZCIsInlkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJ6ZCIsIkFkIiwiQmQiLCJDZCIsImlzSW50ZXJhY3RpdmUiLCJEZCIsImlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSIsIkVkIiwiRmQiLCJHZCIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJjb250YWluZXJJbmZvIiwidG9wTGV2ZWxUeXBlIiwiSGQiLCJJZCIsIksiLCJLZCIsIkxkIiwiTWQiLCJOZCIsIl9lbmFibGVkIiwic2V0RW5hYmxlZCIsImlzRW5hYmxlZCIsInRyYXBCdWJibGVkRXZlbnQiLCJ0cmFwQ2FwdHVyZWRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJPZCIsIlBkIiwiUWQiLCJSZCIsIlNkIiwiVGQiLCJ0ZXh0Q29udGVudCIsIlVkIiwiY29udGVudEVkaXRhYmxlIiwiVmQiLCJXZCIsInNlbGVjdCIsIlhkIiwiWWQiLCJaZCIsIiRkIiwiYWUiLCJzdGFydCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiYmUiLCJvblNlbGVjdCIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJjZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImRlIiwiZWUiLCJzZXRUaW1lb3V0IiwiZmUiLCJjbGVhclRpbWVvdXQiLCJnZSIsInBlcmZvcm1hbmNlIiwiaGUiLCJpZSIsImplIiwia2UiLCJMIiwibGUiLCJtZSIsIm5lIiwib2UiLCJwZSIsInFlIiwic2UiLCJkaWRUaW1lb3V0IiwidGltZVJlbWFpbmluZyIsInVlIiwic2NoZWR1bGVkQ2FsbGJhY2siLCJwb3N0TWVzc2FnZSIsInRlIiwidGltZW91dFRpbWUiLCJ2ZSIsInRpbWVvdXQiLCJwcmV2Iiwid2UiLCJNYXAiLCJJbmZpbml0eSIsImRlbGV0ZSIsInllIiwieGUiLCJ6ZSIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiQWUiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwiQmUiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIkNlIiwiRGUiLCJFZSIsIkZlIiwiaHRtbCIsIm1hdGhtbCIsInN2ZyIsIkdlIiwiSGUiLCJJZSIsIkplIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsIktlIiwibGFzdENoaWxkIiwibm9kZVZhbHVlIiwiTGUiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJNZSIsIk5lIiwic2V0UHJvcGVydHkiLCJPZSIsIm1lbnVpdGVtIiwiYXJlYSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJQZSIsIlFlIiwiUmUiLCJTZSIsImJsdXIiLCJmb2N1cyIsIlRlIiwiY3JlYXRlRWxlbWVudE5TIiwiVWUiLCJWZSIsIl9faHRtbCIsIm9uY2xpY2siLCJXZSIsIlhlIiwiWWUiLCJaZSIsIiRlIiwic2V0SW5pdGlhbFByb3BlcnRpZXMiLCJkaWZmUHJvcGVydGllcyIsInVwZGF0ZVByb3BlcnRpZXMiLCJkaWZmSHlkcmF0ZWRQcm9wZXJ0aWVzIiwiZGlmZkh5ZHJhdGVkVGV4dCIsIndhcm5Gb3JVbm1hdGNoZWRUZXh0Iiwid2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudCIsIndhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZVRleHQiLCJ3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQiLCJ3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsImFmIiwiYmYiLCJjZiIsImF1dG9Gb2N1cyIsImRmIiwiZWYiLCJmZiIsImdmIiwiaGYiLCJqZiIsIlNldCIsImtmIiwibGYiLCJtZiIsIk0iLCJOIiwibmYiLCJPIiwib2YiLCJwZiIsInFmIiwicmYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJzZiIsInRmIiwidWYiLCJ2ZiIsIndmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJ4ZiIsInlmIiwibWVtb2l6ZWRTdGF0ZSIsInVwZGF0ZVF1ZXVlIiwibWVtb2l6ZWRQcm9wcyIsImxhc3RFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJleHBpcmF0aW9uVGltZSIsInpmIiwiQWYiLCJpc1JlYWN0Q29tcG9uZW50IiwiQmYiLCJDZiIsIkRmIiwicGVuZGluZ0NoaWxkcmVuIiwiaW1wbGVtZW50YXRpb24iLCJFZiIsImVhcmxpZXN0UGVuZGluZ1RpbWUiLCJsYXRlc3RQZW5kaW5nVGltZSIsImVhcmxpZXN0U3VzcGVuZGVkVGltZSIsImxhdGVzdFN1c3BlbmRlZFRpbWUiLCJsYXRlc3RQaW5nZWRUaW1lIiwicGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lIiwiZmluaXNoZWRXb3JrIiwicGVuZGluZ0NvbnRleHQiLCJoeWRyYXRlIiwicmVtYWluaW5nRXhwaXJhdGlvblRpbWUiLCJmaXJzdEJhdGNoIiwibmV4dFNjaGVkdWxlZFJvb3QiLCJGZiIsIkdmIiwiSGYiLCJKZiIsIktmIiwiTGYiLCJNZiIsImJhc2VTdGF0ZSIsImZpcnN0VXBkYXRlIiwibGFzdFVwZGF0ZSIsImZpcnN0Q2FwdHVyZWRVcGRhdGUiLCJsYXN0Q2FwdHVyZWRVcGRhdGUiLCJmaXJzdENhcHR1cmVkRWZmZWN0IiwibGFzdENhcHR1cmVkRWZmZWN0IiwiTmYiLCJPZiIsIlBmIiwiUWYiLCJSZiIsIlNmIiwiVGYiLCJVZiIsInciLCJWZiIsIldmIiwiWGYiLCJzdGFjayIsIllmIiwiWmYiLCIkZiIsImFnIiwiX2NvbnRleHQiLCJfY2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiYmciLCJjZyIsImRnIiwiZWciLCJmZyIsImdnIiwiaWciLCJ0YWdOYW1lIiwiamciLCJrZyIsImxnIiwicGciLCJpc01vdW50ZWQiLCJfcmVhY3RJbnRlcm5hbEZpYmVyIiwiZW5xdWV1ZVNldFN0YXRlIiwibWciLCJuZyIsIm9nIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsInFnIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJyZyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwic2ciLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJ0ZyIsInVnIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsInZnIiwid2ciLCJQIiwibmMiLCJKZCIsInUiLCJxIiwiRSIsImRvbmUiLCJ4ZyIsInlnIiwiemciLCJBZyIsIkJnIiwiQ2ciLCJEZyIsIkVnIiwiRmciLCJHZyIsIkhnIiwiUSIsIklnIiwiSmciLCJLZyIsIlIiLCJMZyIsIk1nIiwiUmciLCJ1cGRhdGVyIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiaGlkZGVuIiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiUWciLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJTZyIsIlRnIiwiVWciLCJWZyIsIldnIiwiWGciLCJzdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nIiwiY29uc29sZSIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJjaCIsImRoIiwiZWgiLCJmaCIsImdoIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJoaCIsImFkZCIsImNvbXBvbmVudFN0YWNrIiwiaWgiLCJoYXMiLCJqaCIsImtoIiwibGgiLCJtaCIsIm5oIiwib2giLCJwaCIsIlMiLCJxaCIsIlQiLCJyaCIsInNoIiwiVSIsInRoIiwidWgiLCJ2aCIsIndoIiwieGgiLCJ5aCIsInpoIiwiQWgiLCJYIiwiQmgiLCJnZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2giLCJDaCIsIkRoIiwiRWgiLCJGaCIsIkdoIiwiSGgiLCJJaCIsIkpoIiwiViIsIktoIiwiTGgiLCJXIiwiWSIsIk1oIiwiTmgiLCJPaCIsIlBoIiwiWiIsIlFoIiwiUmgiLCJTaCIsIlRoIiwiVWgiLCJWaCIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJfb25Db21wbGV0ZSIsImFpIiwiX2V4cGlyYXRpb25UaW1lIiwiX2RlZmVyIiwicmFuZ2VDb3VudCIsIldhIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsIkQiLCJqYSIsIm1pIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJ6IiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJoZyIsIm9jIiwiY2EiLCJ3aSIsInhpIiwiTmciLCJPZyIsInlpIiwieWMiLCJQZyIsInppIiwiYmkiLCJjaSIsImRpIiwiZWkiLCJmaSIsImdpIiwiaGkiLCJpaSIsImppIiwia2kiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0Iiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsIklmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJsaSIsIm9pIiwiX2NhbGxiYWNrcyIsIl9uZXh0IiwiX2hhc0NoaWxkcmVuIiwiX2RpZENvbXBsZXRlIiwiX2NoaWxkcmVuIiwicGkiLCJfZGlkQ29tbWl0IiwiX29uQ29tbWl0IiwicWkiLCJfaW50ZXJuYWxSb290IiwicmkiLCJ0aSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJsZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJoYXNBdHRyaWJ1dGUiLCJzaSIsInVpIiwibmkiLCJjb21taXQiLCJ1bm1vdW50IiwiY3JlYXRlQmF0Y2giLCJ2aSIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9kZWZlcnJlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9pbnRlcmFjdGl2ZVVwZGF0ZXMiLCJmbHVzaFN5bmMiLCJ1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQiLCJFdmVudFBsdWdpbkh1YiIsIkV2ZW50UGx1Z2luUmVnaXN0cnkiLCJFdmVudFByb3BhZ2F0b3JzIiwiUmVhY3RDb250cm9sbGVkQ29tcG9uZW50IiwiUmVhY3RET01Db21wb25lbnRUcmVlIiwiUmVhY3RET01FdmVudExpc3RlbmVyIiwidW5zdGFibGVfY3JlYXRlUm9vdCIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiQWkiLCJCaSIsImNoZWNrRENFIiwiX19zZWxmIiwiX19zb3VyY2UiLCJrZXlQcmVmaXgiLCI9IiwiOiIsImVzY2FwZSIsInRvQXJyYXkiLCJjcmVhdGVSZWYiLCJQdXJlQ29tcG9uZW50IiwiY3JlYXRlQ29udGV4dCIsIl9kZWZhdWx0VmFsdWUiLCJfY3VycmVudFZhbHVlMiIsIl9jaGFuZ2VkQml0czIiLCJDb25zdW1lciIsImZvcndhcmRSZWYiLCJGcmFnbWVudCIsIlN0cmljdE1vZGUiLCJ1bnN0YWJsZV9Bc3luY01vZGUiLCJ1bnN0YWJsZV9Qcm9maWxlciIsImNyZWF0ZUZhY3RvcnkiLCJSZWFjdERPTSIsIl9BcHAyIiwiZ2V0RWxlbWVudEJ5SWQiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsSUFDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxZQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdB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QyxRQUFBNTRELEVBQUEsUUFDQUEsRUFBQSxLQUNBcTVCLEVBQUFyNUIsRUFBQSxPQUNBQSxFQUFBLFNBQ0FBLEVBQUEsd0RBQ0FBLEVBQUEsSUFFQThnRSxVQUFTajdELE9BQ1BpckIsRUFBQUMsUUFBQS9ZLGNBQUNxaEIsRUFBQWgxQixVQUFTYSxNQUFPQSxXQUNmNHJCLEVBQUFDLFFBQUEvWSxjQUFDK29ELEVBQUFod0MsUUFBRCxPQUVGaFosU0FBU2lwRCxlQUFlIiwiZmlsZSI6ImJ1bmRsZS43YjU0NzRiZTlhZDIwNzEwMmYyNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1wiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNzQpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiZcbiAgICBTeW1ib2wuZm9yICYmXG4gICAgU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpKSB8fFxuICAgIDB4ZWFjNztcblxuICB2YXIgaXNWYWxpZEVsZW1lbnQgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG9iamVjdCAhPT0gbnVsbCAmJlxuICAgICAgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG4gIH07XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShpc1ZhbGlkRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIGludmFyaWFudCA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgK1xuICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJnc1thcmdJbmRleCsrXTsgfSlcbiAgICAgICk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSB3YXJuaW5nXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgX19ERVZfXyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbic7XG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKF9fREVWX18pIHtcbiAgdmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uIHByaW50V2FybmluZyhmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgK1xuICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pO1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH1cblxuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArXG4gICAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgcHJpbnRXYXJuaW5nLmFwcGx5KG51bGwsIFtmb3JtYXRdLmNvbmNhdChhcmdzKSk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgd2FybmluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAyID8gbGVuIC0gMiA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDI7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMl0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChmb3JtYXQubGVuZ3RoIDwgMTAgfHwgKC9eW3NcXFddKiQvKS50ZXN0KGZvcm1hdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1RoZSB3YXJuaW5nIGZvcm1hdCBzaG91bGQgYmUgYWJsZSB0byB1bmlxdWVseSBpZGVudGlmeSB0aGlzICcgK1xuICAgICAgICAnd2FybmluZy4gUGxlYXNlLCB1c2UgYSBtb3JlIGRlc2NyaXB0aXZlIGZvcm1hdCB0aGFuOiAnICsgZm9ybWF0XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgICAgfSk7XG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIH0gY2F0Y2goeCkge31cbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmV4cG9ydCB2YXIgc3Vic2NyaXB0aW9uU2hhcGUgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICB0cnlTdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHRyeVVuc3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBub3RpZnlOZXN0ZWRTdWJzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBpc1N1YnNjcmliZWQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn0pO1xuXG5leHBvcnQgdmFyIHN0b3JlU2hhcGUgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICBzdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBnZXRTdGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufSk7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgeyBDb21wb25lbnQsIENoaWxkcmVuIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHN0b3JlU2hhcGUsIHN1YnNjcmlwdGlvblNoYXBlIH0gZnJvbSAnLi4vdXRpbHMvUHJvcFR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJy4uL3V0aWxzL3dhcm5pbmcnO1xuXG52YXIgZGlkV2FybkFib3V0UmVjZWl2aW5nU3RvcmUgPSBmYWxzZTtcbmZ1bmN0aW9uIHdhcm5BYm91dFJlY2VpdmluZ1N0b3JlKCkge1xuICBpZiAoZGlkV2FybkFib3V0UmVjZWl2aW5nU3RvcmUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZGlkV2FybkFib3V0UmVjZWl2aW5nU3RvcmUgPSB0cnVlO1xuXG4gIHdhcm5pbmcoJzxQcm92aWRlcj4gZG9lcyBub3Qgc3VwcG9ydCBjaGFuZ2luZyBgc3RvcmVgIG9uIHRoZSBmbHkuICcgKyAnSXQgaXMgbW9zdCBsaWtlbHkgdGhhdCB5b3Ugc2VlIHRoaXMgZXJyb3IgYmVjYXVzZSB5b3UgdXBkYXRlZCB0byAnICsgJ1JlZHV4IDIueCBhbmQgUmVhY3QgUmVkdXggMi54IHdoaWNoIG5vIGxvbmdlciBob3QgcmVsb2FkIHJlZHVjZXJzICcgKyAnYXV0b21hdGljYWxseS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJlZHV4L3JlbGVhc2VzLycgKyAndGFnL3YyLjAuMCBmb3IgdGhlIG1pZ3JhdGlvbiBpbnN0cnVjdGlvbnMuJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcm92aWRlcigpIHtcbiAgdmFyIF9Qcm92aWRlciRjaGlsZENvbnRleDtcblxuICB2YXIgc3RvcmVLZXkgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICdzdG9yZSc7XG4gIHZhciBzdWJLZXkgPSBhcmd1bWVudHNbMV07XG5cbiAgdmFyIHN1YnNjcmlwdGlvbktleSA9IHN1YktleSB8fCBzdG9yZUtleSArICdTdWJzY3JpcHRpb24nO1xuXG4gIHZhciBQcm92aWRlciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltzdG9yZUtleV0gPSB0aGlzW3N0b3JlS2V5XSwgX3JlZltzdWJzY3JpcHRpb25LZXldID0gbnVsbCwgX3JlZjtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gUHJvdmlkZXIocHJvcHMsIGNvbnRleHQpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQcm92aWRlcik7XG5cbiAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkpO1xuXG4gICAgICBfdGhpc1tzdG9yZUtleV0gPSBwcm9wcy5zdG9yZTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBQcm92aWRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIENoaWxkcmVuLm9ubHkodGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgfTtcblxuICAgIHJldHVybiBQcm92aWRlcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgUHJvdmlkZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiAobmV4dFByb3BzKSB7XG4gICAgICBpZiAodGhpc1tzdG9yZUtleV0gIT09IG5leHRQcm9wcy5zdG9yZSkge1xuICAgICAgICB3YXJuQWJvdXRSZWNlaXZpbmdTdG9yZSgpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBQcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gICAgc3RvcmU6IHN0b3JlU2hhcGUuaXNSZXF1aXJlZCxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLmVsZW1lbnQuaXNSZXF1aXJlZFxuICB9O1xuICBQcm92aWRlci5jaGlsZENvbnRleHRUeXBlcyA9IChfUHJvdmlkZXIkY2hpbGRDb250ZXggPSB7fSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W3N0b3JlS2V5XSA9IHN0b3JlU2hhcGUuaXNSZXF1aXJlZCwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W3N1YnNjcmlwdGlvbktleV0gPSBzdWJzY3JpcHRpb25TaGFwZSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4KTtcblxuICByZXR1cm4gUHJvdmlkZXI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVByb3ZpZGVyKCk7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLy8gZW5jYXBzdWxhdGVzIHRoZSBzdWJzY3JpcHRpb24gbG9naWMgZm9yIGNvbm5lY3RpbmcgYSBjb21wb25lbnQgdG8gdGhlIHJlZHV4IHN0b3JlLCBhc1xuLy8gd2VsbCBhcyBuZXN0aW5nIHN1YnNjcmlwdGlvbnMgb2YgZGVzY2VuZGFudCBjb21wb25lbnRzLCBzbyB0aGF0IHdlIGNhbiBlbnN1cmUgdGhlXG4vLyBhbmNlc3RvciBjb21wb25lbnRzIHJlLXJlbmRlciBiZWZvcmUgZGVzY2VuZGFudHNcblxudmFyIENMRUFSRUQgPSBudWxsO1xudmFyIG51bGxMaXN0ZW5lcnMgPSB7XG4gIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge31cbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpIHtcbiAgLy8gdGhlIGN1cnJlbnQvbmV4dCBwYXR0ZXJuIGlzIGNvcGllZCBmcm9tIHJlZHV4J3MgY3JlYXRlU3RvcmUgY29kZS5cbiAgLy8gVE9ETzogcmVmYWN0b3IrZXhwb3NlIHRoYXQgY29kZSB0byBiZSByZXVzYWJsZSBoZXJlP1xuICB2YXIgY3VycmVudCA9IFtdO1xuICB2YXIgbmV4dCA9IFtdO1xuXG4gIHJldHVybiB7XG4gICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgbmV4dCA9IENMRUFSRUQ7XG4gICAgICBjdXJyZW50ID0gQ0xFQVJFRDtcbiAgICB9LFxuICAgIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge1xuICAgICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnQgPSBuZXh0O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGlzdGVuZXJzW2ldKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH0sXG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgaWYgKG5leHQgPT09IGN1cnJlbnQpIG5leHQgPSBjdXJyZW50LnNsaWNlKCk7XG4gICAgICBuZXh0LnB1c2gobGlzdGVuZXIpO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgIGlmICghaXNTdWJzY3JpYmVkIHx8IGN1cnJlbnQgPT09IENMRUFSRUQpIHJldHVybjtcbiAgICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKG5leHQgPT09IGN1cnJlbnQpIG5leHQgPSBjdXJyZW50LnNsaWNlKCk7XG4gICAgICAgIG5leHQuc3BsaWNlKG5leHQuaW5kZXhPZihsaXN0ZW5lciksIDEpO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihzdG9yZSwgcGFyZW50U3ViLCBvblN0YXRlQ2hhbmdlKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN1YnNjcmlwdGlvbik7XG5cbiAgICB0aGlzLnN0b3JlID0gc3RvcmU7XG4gICAgdGhpcy5wYXJlbnRTdWIgPSBwYXJlbnRTdWI7XG4gICAgdGhpcy5vblN0YXRlQ2hhbmdlID0gb25TdGF0ZUNoYW5nZTtcbiAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gIH1cblxuICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLmFkZE5lc3RlZFN1YiA9IGZ1bmN0aW9uIGFkZE5lc3RlZFN1YihsaXN0ZW5lcikge1xuICAgIHRoaXMudHJ5U3Vic2NyaWJlKCk7XG4gICAgcmV0dXJuIHRoaXMubGlzdGVuZXJzLnN1YnNjcmliZShsaXN0ZW5lcik7XG4gIH07XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5ub3RpZnlOZXN0ZWRTdWJzID0gZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3VicygpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5ub3RpZnkoKTtcbiAgfTtcblxuICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLmlzU3Vic2NyaWJlZCA9IGZ1bmN0aW9uIGlzU3Vic2NyaWJlZCgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLnVuc3Vic2NyaWJlKTtcbiAgfTtcblxuICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnRyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSB0aGlzLnBhcmVudFN1YiA/IHRoaXMucGFyZW50U3ViLmFkZE5lc3RlZFN1Yih0aGlzLm9uU3RhdGVDaGFuZ2UpIDogdGhpcy5zdG9yZS5zdWJzY3JpYmUodGhpcy5vblN0YXRlQ2hhbmdlKTtcblxuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKTtcbiAgICB9XG4gIH07XG5cbiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS50cnlVbnN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVVuc3Vic2NyaWJlKCkge1xuICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICAgIHRoaXMubGlzdGVuZXJzLmNsZWFyKCk7XG4gICAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBTdWJzY3JpcHRpb247XG59KCk7XG5cbmV4cG9ydCB7IFN1YnNjcmlwdGlvbiBhcyBkZWZhdWx0IH07IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBjcmVhdGVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBzdG9yZVNoYXBlLCBzdWJzY3JpcHRpb25TaGFwZSB9IGZyb20gJy4uL3V0aWxzL1Byb3BUeXBlcyc7XG5cbnZhciBob3RSZWxvYWRpbmdWZXJzaW9uID0gMDtcbnZhciBkdW1teVN0YXRlID0ge307XG5mdW5jdGlvbiBub29wKCkge31cbmZ1bmN0aW9uIG1ha2VTZWxlY3RvclN0YXRlZnVsKHNvdXJjZVNlbGVjdG9yLCBzdG9yZSkge1xuICAvLyB3cmFwIHRoZSBzZWxlY3RvciBpbiBhbiBvYmplY3QgdGhhdCB0cmFja3MgaXRzIHJlc3VsdHMgYmV0d2VlbiBydW5zLlxuICB2YXIgc2VsZWN0b3IgPSB7XG4gICAgcnVuOiBmdW5jdGlvbiBydW5Db21wb25lbnRTZWxlY3Rvcihwcm9wcykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG5leHRQcm9wcyA9IHNvdXJjZVNlbGVjdG9yKHN0b3JlLmdldFN0YXRlKCksIHByb3BzKTtcbiAgICAgICAgaWYgKG5leHRQcm9wcyAhPT0gc2VsZWN0b3IucHJvcHMgfHwgc2VsZWN0b3IuZXJyb3IpIHtcbiAgICAgICAgICBzZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUgPSB0cnVlO1xuICAgICAgICAgIHNlbGVjdG9yLnByb3BzID0gbmV4dFByb3BzO1xuICAgICAgICAgIHNlbGVjdG9yLmVycm9yID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgc2VsZWN0b3IuZXJyb3IgPSBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHNlbGVjdG9yO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb25uZWN0QWR2YW5jZWQoXG4vKlxuICBzZWxlY3RvckZhY3RvcnkgaXMgYSBmdW5jIHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIHJldHVybmluZyB0aGUgc2VsZWN0b3IgZnVuY3Rpb24gdXNlZCB0b1xuICBjb21wdXRlIG5ldyBwcm9wcyBmcm9tIHN0YXRlLCBwcm9wcywgYW5kIGRpc3BhdGNoLiBGb3IgZXhhbXBsZTpcbiAgICAgZXhwb3J0IGRlZmF1bHQgY29ubmVjdEFkdmFuY2VkKChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKHN0YXRlLCBwcm9wcykgPT4gKHtcbiAgICAgIHRoaW5nOiBzdGF0ZS50aGluZ3NbcHJvcHMudGhpbmdJZF0sXG4gICAgICBzYXZlVGhpbmc6IGZpZWxkcyA9PiBkaXNwYXRjaChhY3Rpb25DcmVhdG9ycy5zYXZlVGhpbmcocHJvcHMudGhpbmdJZCwgZmllbGRzKSksXG4gICAgfSkpKFlvdXJDb21wb25lbnQpXG4gICBBY2Nlc3MgdG8gZGlzcGF0Y2ggaXMgcHJvdmlkZWQgdG8gdGhlIGZhY3Rvcnkgc28gc2VsZWN0b3JGYWN0b3JpZXMgY2FuIGJpbmQgYWN0aW9uQ3JlYXRvcnNcbiAgb3V0c2lkZSBvZiB0aGVpciBzZWxlY3RvciBhcyBhbiBvcHRpbWl6YXRpb24uIE9wdGlvbnMgcGFzc2VkIHRvIGNvbm5lY3RBZHZhbmNlZCBhcmUgcGFzc2VkIHRvXG4gIHRoZSBzZWxlY3RvckZhY3RvcnksIGFsb25nIHdpdGggZGlzcGxheU5hbWUgYW5kIFdyYXBwZWRDb21wb25lbnQsIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQuXG4gICBOb3RlIHRoYXQgc2VsZWN0b3JGYWN0b3J5IGlzIHJlc3BvbnNpYmxlIGZvciBhbGwgY2FjaGluZy9tZW1vaXphdGlvbiBvZiBpbmJvdW5kIGFuZCBvdXRib3VuZFxuICBwcm9wcy4gRG8gbm90IHVzZSBjb25uZWN0QWR2YW5jZWQgZGlyZWN0bHkgd2l0aG91dCBtZW1vaXppbmcgcmVzdWx0cyBiZXR3ZWVuIGNhbGxzIHRvIHlvdXJcbiAgc2VsZWN0b3IsIG90aGVyd2lzZSB0aGUgQ29ubmVjdCBjb21wb25lbnQgd2lsbCByZS1yZW5kZXIgb24gZXZlcnkgc3RhdGUgb3IgcHJvcHMgY2hhbmdlLlxuKi9cbnNlbGVjdG9yRmFjdG9yeSkge1xuICB2YXIgX2NvbnRleHRUeXBlcywgX2NoaWxkQ29udGV4dFR5cGVzO1xuXG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcbiAgICAgIF9yZWYkZ2V0RGlzcGxheU5hbWUgPSBfcmVmLmdldERpc3BsYXlOYW1lLFxuICAgICAgZ2V0RGlzcGxheU5hbWUgPSBfcmVmJGdldERpc3BsYXlOYW1lID09PSB1bmRlZmluZWQgPyBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiAnQ29ubmVjdEFkdmFuY2VkKCcgKyBuYW1lICsgJyknO1xuICB9IDogX3JlZiRnZXREaXNwbGF5TmFtZSxcbiAgICAgIF9yZWYkbWV0aG9kTmFtZSA9IF9yZWYubWV0aG9kTmFtZSxcbiAgICAgIG1ldGhvZE5hbWUgPSBfcmVmJG1ldGhvZE5hbWUgPT09IHVuZGVmaW5lZCA/ICdjb25uZWN0QWR2YW5jZWQnIDogX3JlZiRtZXRob2ROYW1lLFxuICAgICAgX3JlZiRyZW5kZXJDb3VudFByb3AgPSBfcmVmLnJlbmRlckNvdW50UHJvcCxcbiAgICAgIHJlbmRlckNvdW50UHJvcCA9IF9yZWYkcmVuZGVyQ291bnRQcm9wID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBfcmVmJHJlbmRlckNvdW50UHJvcCxcbiAgICAgIF9yZWYkc2hvdWxkSGFuZGxlU3RhdCA9IF9yZWYuc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzID0gX3JlZiRzaG91bGRIYW5kbGVTdGF0ID09PSB1bmRlZmluZWQgPyB0cnVlIDogX3JlZiRzaG91bGRIYW5kbGVTdGF0LFxuICAgICAgX3JlZiRzdG9yZUtleSA9IF9yZWYuc3RvcmVLZXksXG4gICAgICBzdG9yZUtleSA9IF9yZWYkc3RvcmVLZXkgPT09IHVuZGVmaW5lZCA/ICdzdG9yZScgOiBfcmVmJHN0b3JlS2V5LFxuICAgICAgX3JlZiR3aXRoUmVmID0gX3JlZi53aXRoUmVmLFxuICAgICAgd2l0aFJlZiA9IF9yZWYkd2l0aFJlZiA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfcmVmJHdpdGhSZWYsXG4gICAgICBjb25uZWN0T3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbJ2dldERpc3BsYXlOYW1lJywgJ21ldGhvZE5hbWUnLCAncmVuZGVyQ291bnRQcm9wJywgJ3Nob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcycsICdzdG9yZUtleScsICd3aXRoUmVmJ10pO1xuXG4gIHZhciBzdWJzY3JpcHRpb25LZXkgPSBzdG9yZUtleSArICdTdWJzY3JpcHRpb24nO1xuICB2YXIgdmVyc2lvbiA9IGhvdFJlbG9hZGluZ1ZlcnNpb24rKztcblxuICB2YXIgY29udGV4dFR5cGVzID0gKF9jb250ZXh0VHlwZXMgPSB7fSwgX2NvbnRleHRUeXBlc1tzdG9yZUtleV0gPSBzdG9yZVNoYXBlLCBfY29udGV4dFR5cGVzW3N1YnNjcmlwdGlvbktleV0gPSBzdWJzY3JpcHRpb25TaGFwZSwgX2NvbnRleHRUeXBlcyk7XG4gIHZhciBjaGlsZENvbnRleHRUeXBlcyA9IChfY2hpbGRDb250ZXh0VHlwZXMgPSB7fSwgX2NoaWxkQ29udGV4dFR5cGVzW3N1YnNjcmlwdGlvbktleV0gPSBzdWJzY3JpcHRpb25TaGFwZSwgX2NoaWxkQ29udGV4dFR5cGVzKTtcblxuICByZXR1cm4gZnVuY3Rpb24gd3JhcFdpdGhDb25uZWN0KFdyYXBwZWRDb21wb25lbnQpIHtcbiAgICBpbnZhcmlhbnQodHlwZW9mIFdyYXBwZWRDb21wb25lbnQgPT0gJ2Z1bmN0aW9uJywgJ1lvdSBtdXN0IHBhc3MgYSBjb21wb25lbnQgdG8gdGhlIGZ1bmN0aW9uIHJldHVybmVkIGJ5ICcgKyAobWV0aG9kTmFtZSArICcuIEluc3RlYWQgcmVjZWl2ZWQgJyArIEpTT04uc3RyaW5naWZ5KFdyYXBwZWRDb21wb25lbnQpKSk7XG5cbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudE5hbWUgPSBXcmFwcGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IFdyYXBwZWRDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JztcblxuICAgIHZhciBkaXNwbGF5TmFtZSA9IGdldERpc3BsYXlOYW1lKHdyYXBwZWRDb21wb25lbnROYW1lKTtcblxuICAgIHZhciBzZWxlY3RvckZhY3RvcnlPcHRpb25zID0gX2V4dGVuZHMoe30sIGNvbm5lY3RPcHRpb25zLCB7XG4gICAgICBnZXREaXNwbGF5TmFtZTogZ2V0RGlzcGxheU5hbWUsXG4gICAgICBtZXRob2ROYW1lOiBtZXRob2ROYW1lLFxuICAgICAgcmVuZGVyQ291bnRQcm9wOiByZW5kZXJDb3VudFByb3AsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHN0b3JlS2V5OiBzdG9yZUtleSxcbiAgICAgIHdpdGhSZWY6IHdpdGhSZWYsXG4gICAgICBkaXNwbGF5TmFtZTogZGlzcGxheU5hbWUsXG4gICAgICB3cmFwcGVkQ29tcG9uZW50TmFtZTogd3JhcHBlZENvbXBvbmVudE5hbWUsXG4gICAgICBXcmFwcGVkQ29tcG9uZW50OiBXcmFwcGVkQ29tcG9uZW50XG4gICAgfSk7XG5cbiAgICB2YXIgQ29ubmVjdCA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgICBfaW5oZXJpdHMoQ29ubmVjdCwgX0NvbXBvbmVudCk7XG5cbiAgICAgIGZ1bmN0aW9uIENvbm5lY3QocHJvcHMsIGNvbnRleHQpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbm5lY3QpO1xuXG4gICAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkpO1xuXG4gICAgICAgIF90aGlzLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICBfdGhpcy5zdGF0ZSA9IHt9O1xuICAgICAgICBfdGhpcy5yZW5kZXJDb3VudCA9IDA7XG4gICAgICAgIF90aGlzLnN0b3JlID0gcHJvcHNbc3RvcmVLZXldIHx8IGNvbnRleHRbc3RvcmVLZXldO1xuICAgICAgICBfdGhpcy5wcm9wc01vZGUgPSBCb29sZWFuKHByb3BzW3N0b3JlS2V5XSk7XG4gICAgICAgIF90aGlzLnNldFdyYXBwZWRJbnN0YW5jZSA9IF90aGlzLnNldFdyYXBwZWRJbnN0YW5jZS5iaW5kKF90aGlzKTtcblxuICAgICAgICBpbnZhcmlhbnQoX3RoaXMuc3RvcmUsICdDb3VsZCBub3QgZmluZCBcIicgKyBzdG9yZUtleSArICdcIiBpbiBlaXRoZXIgdGhlIGNvbnRleHQgb3IgcHJvcHMgb2YgJyArICgnXCInICsgZGlzcGxheU5hbWUgKyAnXCIuIEVpdGhlciB3cmFwIHRoZSByb290IGNvbXBvbmVudCBpbiBhIDxQcm92aWRlcj4sICcpICsgKCdvciBleHBsaWNpdGx5IHBhc3MgXCInICsgc3RvcmVLZXkgKyAnXCIgYXMgYSBwcm9wIHRvIFwiJyArIGRpc3BsYXlOYW1lICsgJ1wiLicpKTtcblxuICAgICAgICBfdGhpcy5pbml0U2VsZWN0b3IoKTtcbiAgICAgICAgX3RoaXMuaW5pdFN1YnNjcmlwdGlvbigpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICB9XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgICAgdmFyIF9yZWYyO1xuXG4gICAgICAgIC8vIElmIHRoaXMgY29tcG9uZW50IHJlY2VpdmVkIHN0b3JlIGZyb20gcHJvcHMsIGl0cyBzdWJzY3JpcHRpb24gc2hvdWxkIGJlIHRyYW5zcGFyZW50XG4gICAgICAgIC8vIHRvIGFueSBkZXNjZW5kYW50cyByZWNlaXZpbmcgc3RvcmUrc3Vic2NyaXB0aW9uIGZyb20gY29udGV4dDsgaXQgcGFzc2VzIGFsb25nXG4gICAgICAgIC8vIHN1YnNjcmlwdGlvbiBwYXNzZWQgdG8gaXQuIE90aGVyd2lzZSwgaXQgc2hhZG93cyB0aGUgcGFyZW50IHN1YnNjcmlwdGlvbiwgd2hpY2ggYWxsb3dzXG4gICAgICAgIC8vIENvbm5lY3QgdG8gY29udHJvbCBvcmRlcmluZyBvZiBub3RpZmljYXRpb25zIHRvIGZsb3cgdG9wLWRvd24uXG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLnByb3BzTW9kZSA/IG51bGwgOiB0aGlzLnN1YnNjcmlwdGlvbjtcbiAgICAgICAgcmV0dXJuIF9yZWYyID0ge30sIF9yZWYyW3N1YnNjcmlwdGlvbktleV0gPSBzdWJzY3JpcHRpb24gfHwgdGhpcy5jb250ZXh0W3N1YnNjcmlwdGlvbktleV0sIF9yZWYyO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybjtcblxuICAgICAgICAvLyBjb21wb25lbnRXaWxsTW91bnQgZmlyZXMgZHVyaW5nIHNlcnZlciBzaWRlIHJlbmRlcmluZywgYnV0IGNvbXBvbmVudERpZE1vdW50IGFuZFxuICAgICAgICAvLyBjb21wb25lbnRXaWxsVW5tb3VudCBkbyBub3QuIEJlY2F1c2Ugb2YgdGhpcywgdHJ5U3Vic2NyaWJlIGhhcHBlbnMgZHVyaW5nIC4uLmRpZE1vdW50LlxuICAgICAgICAvLyBPdGhlcndpc2UsIHVuc3Vic2NyaXB0aW9uIHdvdWxkIG5ldmVyIHRha2UgcGxhY2UgZHVyaW5nIFNTUiwgY2F1c2luZyBhIG1lbW9yeSBsZWFrLlxuICAgICAgICAvLyBUbyBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgYSBjaGlsZCBjb21wb25lbnQgbWF5IGhhdmUgdHJpZ2dlcmVkIGEgc3RhdGUgY2hhbmdlIGJ5XG4gICAgICAgIC8vIGRpc3BhdGNoaW5nIGFuIGFjdGlvbiBpbiBpdHMgY29tcG9uZW50V2lsbE1vdW50LCB3ZSBoYXZlIHRvIHJlLXJ1biB0aGUgc2VsZWN0IGFuZCBtYXliZVxuICAgICAgICAvLyByZS1yZW5kZXIuXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnJ1bih0aGlzLnByb3BzKTtcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlKSB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4obmV4dFByb3BzKTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB0aGlzLnN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicyA9IG5vb3A7XG4gICAgICAgIHRoaXMuc3RvcmUgPSBudWxsO1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnJ1biA9IG5vb3A7XG4gICAgICAgIHRoaXMuc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZmFsc2U7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5nZXRXcmFwcGVkSW5zdGFuY2UgPSBmdW5jdGlvbiBnZXRXcmFwcGVkSW5zdGFuY2UoKSB7XG4gICAgICAgIGludmFyaWFudCh3aXRoUmVmLCAnVG8gYWNjZXNzIHRoZSB3cmFwcGVkIGluc3RhbmNlLCB5b3UgbmVlZCB0byBzcGVjaWZ5ICcgKyAoJ3sgd2l0aFJlZjogdHJ1ZSB9IGluIHRoZSBvcHRpb25zIGFyZ3VtZW50IG9mIHRoZSAnICsgbWV0aG9kTmFtZSArICcoKSBjYWxsLicpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMud3JhcHBlZEluc3RhbmNlO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuc2V0V3JhcHBlZEluc3RhbmNlID0gZnVuY3Rpb24gc2V0V3JhcHBlZEluc3RhbmNlKHJlZikge1xuICAgICAgICB0aGlzLndyYXBwZWRJbnN0YW5jZSA9IHJlZjtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmluaXRTZWxlY3RvciA9IGZ1bmN0aW9uIGluaXRTZWxlY3RvcigpIHtcbiAgICAgICAgdmFyIHNvdXJjZVNlbGVjdG9yID0gc2VsZWN0b3JGYWN0b3J5KHRoaXMuc3RvcmUuZGlzcGF0Y2gsIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMpO1xuICAgICAgICB0aGlzLnNlbGVjdG9yID0gbWFrZVNlbGVjdG9yU3RhdGVmdWwoc291cmNlU2VsZWN0b3IsIHRoaXMuc3RvcmUpO1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnJ1bih0aGlzLnByb3BzKTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmluaXRTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiBpbml0U3Vic2NyaXB0aW9uKCkge1xuICAgICAgICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuO1xuXG4gICAgICAgIC8vIHBhcmVudFN1YidzIHNvdXJjZSBzaG91bGQgbWF0Y2ggd2hlcmUgc3RvcmUgY2FtZSBmcm9tOiBwcm9wcyB2cy4gY29udGV4dC4gQSBjb21wb25lbnRcbiAgICAgICAgLy8gY29ubmVjdGVkIHRvIHRoZSBzdG9yZSB2aWEgcHJvcHMgc2hvdWxkbid0IHVzZSBzdWJzY3JpcHRpb24gZnJvbSBjb250ZXh0LCBvciB2aWNlIHZlcnNhLlxuICAgICAgICB2YXIgcGFyZW50U3ViID0gKHRoaXMucHJvcHNNb2RlID8gdGhpcy5wcm9wcyA6IHRoaXMuY29udGV4dClbc3Vic2NyaXB0aW9uS2V5XTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKHRoaXMuc3RvcmUsIHBhcmVudFN1YiwgdGhpcy5vblN0YXRlQ2hhbmdlLmJpbmQodGhpcykpO1xuXG4gICAgICAgIC8vIGBub3RpZnlOZXN0ZWRTdWJzYCBpcyBkdXBsaWNhdGVkIHRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgY29tcG9uZW50IGlzICB1bm1vdW50ZWQgaW5cbiAgICAgICAgLy8gdGhlIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AsIHdoZXJlIGB0aGlzLnN1YnNjcmlwdGlvbmAgd2lsbCB0aGVuIGJlIG51bGwuIEFuXG4gICAgICAgIC8vIGV4dHJhIG51bGwgY2hlY2sgZXZlcnkgY2hhbmdlIGNhbiBiZSBhdm9pZGVkIGJ5IGNvcHlpbmcgdGhlIG1ldGhvZCBvbnRvIGB0aGlzYCBhbmQgdGhlblxuICAgICAgICAvLyByZXBsYWNpbmcgaXQgd2l0aCBhIG5vLW9wIG9uIHVubW91bnQuIFRoaXMgY2FuIHByb2JhYmx5IGJlIGF2b2lkZWQgaWYgU3Vic2NyaXB0aW9uJ3NcbiAgICAgICAgLy8gbGlzdGVuZXJzIGxvZ2ljIGlzIGNoYW5nZWQgdG8gbm90IGNhbGwgbGlzdGVuZXJzIHRoYXQgaGF2ZSBiZWVuIHVuc3Vic2NyaWJlZCBpbiB0aGVcbiAgICAgICAgLy8gbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcC5cbiAgICAgICAgdGhpcy5ub3RpZnlOZXN0ZWRTdWJzID0gdGhpcy5zdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3Vicy5iaW5kKHRoaXMuc3Vic2NyaXB0aW9uKTtcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLm9uU3RhdGVDaGFuZ2UgPSBmdW5jdGlvbiBvblN0YXRlQ2hhbmdlKCkge1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnJ1bih0aGlzLnByb3BzKTtcblxuICAgICAgICBpZiAoIXRoaXMuc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlKSB7XG4gICAgICAgICAgdGhpcy5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5jb21wb25lbnREaWRVcGRhdGUgPSB0aGlzLm5vdGlmeU5lc3RlZFN1YnNPbkNvbXBvbmVudERpZFVwZGF0ZTtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKGR1bW15U3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5ub3RpZnlOZXN0ZWRTdWJzT25Db21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBub3RpZnlOZXN0ZWRTdWJzT25Db21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICAgIC8vIGBjb21wb25lbnREaWRVcGRhdGVgIGlzIGNvbmRpdGlvbmFsbHkgaW1wbGVtZW50ZWQgd2hlbiBgb25TdGF0ZUNoYW5nZWAgZGV0ZXJtaW5lcyBpdFxuICAgICAgICAvLyBuZWVkcyB0byBub3RpZnkgbmVzdGVkIHN1YnMuIE9uY2UgY2FsbGVkLCBpdCB1bmltcGxlbWVudHMgaXRzZWxmIHVudGlsIGZ1cnRoZXIgc3RhdGVcbiAgICAgICAgLy8gY2hhbmdlcyBvY2N1ci4gRG9pbmcgaXQgdGhpcyB3YXkgdnMgaGF2aW5nIGEgcGVybWFuZW50IGBjb21wb25lbnREaWRVcGRhdGVgIHRoYXQgZG9lc1xuICAgICAgICAvLyBhIGJvb2xlYW4gY2hlY2sgZXZlcnkgdGltZSBhdm9pZHMgYW4gZXh0cmEgbWV0aG9kIGNhbGwgbW9zdCBvZiB0aGUgdGltZSwgcmVzdWx0aW5nXG4gICAgICAgIC8vIGluIHNvbWUgcGVyZiBib29zdC5cbiAgICAgICAgdGhpcy5jb21wb25lbnREaWRVcGRhdGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicygpO1xuICAgICAgfTtcblxuICAgICAgQ29ubmVjdC5wcm90b3R5cGUuaXNTdWJzY3JpYmVkID0gZnVuY3Rpb24gaXNTdWJzY3JpYmVkKCkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbih0aGlzLnN1YnNjcmlwdGlvbikgJiYgdGhpcy5zdWJzY3JpcHRpb24uaXNTdWJzY3JpYmVkKCk7XG4gICAgICB9O1xuXG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5hZGRFeHRyYVByb3BzID0gZnVuY3Rpb24gYWRkRXh0cmFQcm9wcyhwcm9wcykge1xuICAgICAgICBpZiAoIXdpdGhSZWYgJiYgIXJlbmRlckNvdW50UHJvcCAmJiAhKHRoaXMucHJvcHNNb2RlICYmIHRoaXMuc3Vic2NyaXB0aW9uKSkgcmV0dXJuIHByb3BzO1xuICAgICAgICAvLyBtYWtlIGEgc2hhbGxvdyBjb3B5IHNvIHRoYXQgZmllbGRzIGFkZGVkIGRvbid0IGxlYWsgdG8gdGhlIG9yaWdpbmFsIHNlbGVjdG9yLlxuICAgICAgICAvLyB0aGlzIGlzIGVzcGVjaWFsbHkgaW1wb3J0YW50IGZvciAncmVmJyBzaW5jZSB0aGF0J3MgYSByZWZlcmVuY2UgYmFjayB0byB0aGUgY29tcG9uZW50XG4gICAgICAgIC8vIGluc3RhbmNlLiBhIHNpbmdsZXRvbiBtZW1vaXplZCBzZWxlY3RvciB3b3VsZCB0aGVuIGJlIGhvbGRpbmcgYSByZWZlcmVuY2UgdG8gdGhlXG4gICAgICAgIC8vIGluc3RhbmNlLCBwcmV2ZW50aW5nIHRoZSBpbnN0YW5jZSBmcm9tIGJlaW5nIGdhcmJhZ2UgY29sbGVjdGVkLCBhbmQgdGhhdCB3b3VsZCBiZSBiYWRcbiAgICAgICAgdmFyIHdpdGhFeHRyYXMgPSBfZXh0ZW5kcyh7fSwgcHJvcHMpO1xuICAgICAgICBpZiAod2l0aFJlZikgd2l0aEV4dHJhcy5yZWYgPSB0aGlzLnNldFdyYXBwZWRJbnN0YW5jZTtcbiAgICAgICAgaWYgKHJlbmRlckNvdW50UHJvcCkgd2l0aEV4dHJhc1tyZW5kZXJDb3VudFByb3BdID0gdGhpcy5yZW5kZXJDb3VudCsrO1xuICAgICAgICBpZiAodGhpcy5wcm9wc01vZGUgJiYgdGhpcy5zdWJzY3JpcHRpb24pIHdpdGhFeHRyYXNbc3Vic2NyaXB0aW9uS2V5XSA9IHRoaXMuc3Vic2NyaXB0aW9uO1xuICAgICAgICByZXR1cm4gd2l0aEV4dHJhcztcbiAgICAgIH07XG5cbiAgICAgIENvbm5lY3QucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gdGhpcy5zZWxlY3RvcjtcbiAgICAgICAgc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHNlbGVjdG9yLmVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgc2VsZWN0b3IuZXJyb3I7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgdGhpcy5hZGRFeHRyYVByb3BzKHNlbGVjdG9yLnByb3BzKSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBDb25uZWN0O1xuICAgIH0oQ29tcG9uZW50KTtcblxuICAgIENvbm5lY3QuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgQ29ubmVjdC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICAgIENvbm5lY3QuY2hpbGRDb250ZXh0VHlwZXMgPSBjaGlsZENvbnRleHRUeXBlcztcbiAgICBDb25uZWN0LmNvbnRleHRUeXBlcyA9IGNvbnRleHRUeXBlcztcbiAgICBDb25uZWN0LnByb3BUeXBlcyA9IGNvbnRleHRUeXBlcztcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVwZGF0ZSgpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgLy8gV2UgYXJlIGhvdCByZWxvYWRpbmchXG4gICAgICAgIGlmICh0aGlzLnZlcnNpb24gIT09IHZlcnNpb24pIHtcbiAgICAgICAgICB0aGlzLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICAgIHRoaXMuaW5pdFNlbGVjdG9yKCk7XG5cbiAgICAgICAgICAvLyBJZiBhbnkgY29ubmVjdGVkIGRlc2NlbmRhbnRzIGRvbid0IGhvdCByZWxvYWQgKGFuZCByZXN1YnNjcmliZSBpbiB0aGUgcHJvY2VzcyksIHRoZWlyXG4gICAgICAgICAgLy8gbGlzdGVuZXJzIHdpbGwgYmUgbG9zdCB3aGVuIHdlIHVuc3Vic2NyaWJlLiBVbmZvcnR1bmF0ZWx5LCBieSBjb3B5aW5nIG92ZXIgYWxsXG4gICAgICAgICAgLy8gbGlzdGVuZXJzLCB0aGlzIGRvZXMgbWVhbiB0aGF0IHRoZSBvbGQgdmVyc2lvbnMgb2YgY29ubmVjdGVkIGRlc2NlbmRhbnRzIHdpbGwgc3RpbGwgYmVcbiAgICAgICAgICAvLyBub3RpZmllZCBvZiBzdGF0ZSBjaGFuZ2VzOyBob3dldmVyLCB0aGVpciBvblN0YXRlQ2hhbmdlIGZ1bmN0aW9uIGlzIGEgbm8tb3Agc28gdGhpc1xuICAgICAgICAgIC8vIGlzbid0IGEgaHVnZSBkZWFsLlxuICAgICAgICAgIHZhciBvbGRMaXN0ZW5lcnMgPSBbXTtcblxuICAgICAgICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgb2xkTGlzdGVuZXJzID0gdGhpcy5zdWJzY3JpcHRpb24ubGlzdGVuZXJzLmdldCgpO1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5pbml0U3Vic2NyaXB0aW9uKCk7XG4gICAgICAgICAgaWYgKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykge1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG4gICAgICAgICAgICBvbGRMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5zdWJzY3JpcHRpb24ubGlzdGVuZXJzLnN1YnNjcmliZShsaXN0ZW5lcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGhvaXN0U3RhdGljcyhDb25uZWN0LCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgfTtcbn0iLCJ2YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gaXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghaGFzT3duLmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59IiwiaW1wb3J0IGZyZWVHbG9iYWwgZnJvbSAnLi9fZnJlZUdsb2JhbC5qcyc7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuZXhwb3J0IGRlZmF1bHQgcm9vdDtcbiIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuZXhwb3J0IGRlZmF1bHQgU3ltYm9sO1xuIiwiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFJhd1RhZztcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBvYmplY3RUb1N0cmluZztcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcbmltcG9ydCBnZXRSYXdUYWcgZnJvbSAnLi9fZ2V0UmF3VGFnLmpzJztcbmltcG9ydCBvYmplY3RUb1N0cmluZyBmcm9tICcuL19vYmplY3RUb1N0cmluZy5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlR2V0VGFnO1xuIiwiaW1wb3J0IG92ZXJBcmcgZnJvbSAnLi9fb3ZlckFyZy5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpO1xuXG5leHBvcnQgZGVmYXVsdCBnZXRQcm90b3R5cGU7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNPYmplY3RMaWtlO1xuIiwiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgZ2V0UHJvdG90eXBlIGZyb20gJy4vX2dldFByb3RvdHlwZS5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gaW5mZXIgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLiAqL1xudmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAqIGBPYmplY3RgIGNvbnN0cnVjdG9yIG9yIG9uZSB3aXRoIGEgYFtbUHJvdG90eXBlXV1gIG9mIGBudWxsYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuOC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiB9XG4gKlxuICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSB8fCBiYXNlR2V0VGFnKHZhbHVlKSAhPSBvYmplY3RUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlKHZhbHVlKTtcbiAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIEN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCAnY29uc3RydWN0b3InKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc1BsYWluT2JqZWN0O1xuIiwiaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZ2V0Q29uc3RhbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRDb25zdGFudFNlbGVjdG9yKGRpc3BhdGNoLCBvcHRpb25zKSB7XG4gICAgdmFyIGNvbnN0YW50ID0gZ2V0Q29uc3RhbnQoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gICAgZnVuY3Rpb24gY29uc3RhbnRTZWxlY3RvcigpIHtcbiAgICAgIHJldHVybiBjb25zdGFudDtcbiAgICB9XG4gICAgY29uc3RhbnRTZWxlY3Rvci5kZXBlbmRzT25Pd25Qcm9wcyA9IGZhbHNlO1xuICAgIHJldHVybiBjb25zdGFudFNlbGVjdG9yO1xuICB9O1xufVxuXG4vLyBkZXBlbmRzT25Pd25Qcm9wcyBpcyB1c2VkIGJ5IGNyZWF0ZU1hcFRvUHJvcHNQcm94eSB0byBkZXRlcm1pbmUgd2hldGhlciB0byBwYXNzIHByb3BzIGFzIGFyZ3Ncbi8vIHRvIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIHdyYXBwZWQuIEl0IGlzIGFsc28gdXNlZCBieSBtYWtlUHVyZVByb3BzU2VsZWN0b3IgdG8gZGV0ZXJtaW5lXG4vLyB3aGV0aGVyIG1hcFRvUHJvcHMgbmVlZHMgdG8gYmUgaW52b2tlZCB3aGVuIHByb3BzIGhhdmUgY2hhbmdlZC5cbi8vIFxuLy8gQSBsZW5ndGggb2Ygb25lIHNpZ25hbHMgdGhhdCBtYXBUb1Byb3BzIGRvZXMgbm90IGRlcGVuZCBvbiBwcm9wcyBmcm9tIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuLy8gQSBsZW5ndGggb2YgemVybyBpcyBhc3N1bWVkIHRvIG1lYW4gbWFwVG9Qcm9wcyBpcyBnZXR0aW5nIGFyZ3MgdmlhIGFyZ3VtZW50cyBvciAuLi5hcmdzIGFuZFxuLy8gdGhlcmVmb3JlIG5vdCByZXBvcnRpbmcgaXRzIGxlbmd0aCBhY2N1cmF0ZWx5Li5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSBudWxsICYmIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IHVuZGVmaW5lZCA/IEJvb2xlYW4obWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgOiBtYXBUb1Byb3BzLmxlbmd0aCAhPT0gMTtcbn1cblxuLy8gVXNlZCBieSB3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiBhbmQgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sXG4vLyB0aGlzIGZ1bmN0aW9uIHdyYXBzIG1hcFRvUHJvcHMgaW4gYSBwcm94eSBmdW5jdGlvbiB3aGljaCBkb2VzIHNldmVyYWwgdGhpbmdzOlxuLy8gXG4vLyAgKiBEZXRlY3RzIHdoZXRoZXIgdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgY2FsbGVkIGRlcGVuZHMgb24gcHJvcHMsIHdoaWNoXG4vLyAgICBpcyB1c2VkIGJ5IHNlbGVjdG9yRmFjdG9yeSB0byBkZWNpZGUgaWYgaXQgc2hvdWxkIHJlaW52b2tlIG9uIHByb3BzIGNoYW5nZXMuXG4vLyAgICBcbi8vICAqIE9uIGZpcnN0IGNhbGwsIGhhbmRsZXMgbWFwVG9Qcm9wcyBpZiByZXR1cm5zIGFub3RoZXIgZnVuY3Rpb24sIGFuZCB0cmVhdHMgdGhhdFxuLy8gICAgbmV3IGZ1bmN0aW9uIGFzIHRoZSB0cnVlIG1hcFRvUHJvcHMgZm9yIHN1YnNlcXVlbnQgY2FsbHMuXG4vLyAgICBcbi8vICAqIE9uIGZpcnN0IGNhbGwsIHZlcmlmaWVzIHRoZSBmaXJzdCByZXN1bHQgaXMgYSBwbGFpbiBvYmplY3QsIGluIG9yZGVyIHRvIHdhcm5cbi8vICAgIHRoZSBkZXZlbG9wZXIgdGhhdCB0aGVpciBtYXBUb1Byb3BzIGZ1bmN0aW9uIGlzIG5vdCByZXR1cm5pbmcgYSB2YWxpZCByZXN1bHQuXG4vLyAgICBcbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwVG9Qcm9wcywgbWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdFByb3h5U2VsZWN0b3IoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lO1xuXG4gICAgdmFyIHByb3h5ID0gZnVuY3Rpb24gbWFwVG9Qcm9wc1Byb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHJldHVybiBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA/IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykgOiBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCk7XG4gICAgfTtcblxuICAgIC8vIGFsbG93IGRldGVjdEZhY3RvcnlBbmRWZXJpZnkgdG8gZ2V0IG93blByb3BzXG4gICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSB0cnVlO1xuXG4gICAgcHJveHkubWFwVG9Qcm9wcyA9IGZ1bmN0aW9uIGRldGVjdEZhY3RvcnlBbmRWZXJpZnkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IG1hcFRvUHJvcHM7XG4gICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpO1xuICAgICAgdmFyIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmICh0eXBlb2YgcHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IHByb3BzO1xuICAgICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKHByb3BzKTtcbiAgICAgICAgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KHByb3BzLCBkaXNwbGF5TmFtZSwgbWV0aG9kTmFtZSk7XG5cbiAgICAgIHJldHVybiBwcm9wcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb3h5O1xuICB9O1xufSIsImltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycyB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24obWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcERpc3BhdGNoVG9Qcm9wcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzTWlzc2luZyhtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBEaXNwYXRjaFRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiB7IGRpc3BhdGNoOiBkaXNwYXRjaCB9O1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdChtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcERpc3BhdGNoVG9Qcm9wcyAmJiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnb2JqZWN0JyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyhtYXBEaXNwYXRjaFRvUHJvcHMsIGRpc3BhdGNoKTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzTWlzc2luZywgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0XTsiLCJpbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcFN0YXRlVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBTdGF0ZVRvUHJvcHMsICdtYXBTdGF0ZVRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmcobWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwU3RhdGVUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nXTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdE1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvd25Qcm9wcywgc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdE1lcmdlUHJvcHNQcm94eShkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWUsXG4gICAgICAgIHB1cmUgPSBfcmVmLnB1cmUsXG4gICAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBfcmVmLmFyZU1lcmdlZFByb3BzRXF1YWw7XG5cbiAgICB2YXIgaGFzUnVuT25jZSA9IGZhbHNlO1xuICAgIHZhciBtZXJnZWRQcm9wcyA9IHZvaWQgMDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZVByb3BzUHJveHkoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgICAgIHZhciBuZXh0TWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcblxuICAgICAgaWYgKGhhc1J1bk9uY2UpIHtcbiAgICAgICAgaWYgKCFwdXJlIHx8ICFhcmVNZXJnZWRQcm9wc0VxdWFsKG5leHRNZXJnZWRQcm9wcywgbWVyZ2VkUHJvcHMpKSBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhc1J1bk9uY2UgPSB0cnVlO1xuICAgICAgICBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QobWVyZ2VkUHJvcHMsIGRpc3BsYXlOYW1lLCAnbWVyZ2VQcm9wcycpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNGdW5jdGlvbihtZXJnZVByb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWVyZ2VQcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuICFtZXJnZVByb3BzID8gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkZWZhdWx0TWVyZ2VQcm9wcztcbiAgfSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgW3doZW5NZXJnZVByb3BzSXNGdW5jdGlvbiwgd2hlbk1lcmdlUHJvcHNJc09taXR0ZWRdOyIsImZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IHZlcmlmeVN1YnNlbGVjdG9ycyBmcm9tICcuL3ZlcmlmeVN1YnNlbGVjdG9ycyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yKHN0YXRlLCBvd25Qcm9wcykge1xuICAgIHJldHVybiBtZXJnZVByb3BzKG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpLCBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKSwgb3duUHJvcHMpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBfcmVmKSB7XG4gIHZhciBhcmVTdGF0ZXNFcXVhbCA9IF9yZWYuYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsID0gX3JlZi5hcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3JlZi5hcmVTdGF0ZVByb3BzRXF1YWw7XG5cbiAgdmFyIGhhc1J1bkF0TGVhc3RPbmNlID0gZmFsc2U7XG4gIHZhciBzdGF0ZSA9IHZvaWQgMDtcbiAgdmFyIG93blByb3BzID0gdm9pZCAwO1xuICB2YXIgc3RhdGVQcm9wcyA9IHZvaWQgMDtcbiAgdmFyIGRpc3BhdGNoUHJvcHMgPSB2b2lkIDA7XG4gIHZhciBtZXJnZWRQcm9wcyA9IHZvaWQgMDtcblxuICBmdW5jdGlvbiBoYW5kbGVGaXJzdENhbGwoZmlyc3RTdGF0ZSwgZmlyc3RPd25Qcm9wcykge1xuICAgIHN0YXRlID0gZmlyc3RTdGF0ZTtcbiAgICBvd25Qcm9wcyA9IGZpcnN0T3duUHJvcHM7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIGhhc1J1bkF0TGVhc3RPbmNlID0gdHJ1ZTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCkge1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcblxuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHMoKSB7XG4gICAgaWYgKG1hcFN0YXRlVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuXG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuXG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdTdGF0ZSgpIHtcbiAgICB2YXIgbmV4dFN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVQcm9wc0NoYW5nZWQgPSAhYXJlU3RhdGVQcm9wc0VxdWFsKG5leHRTdGF0ZVByb3BzLCBzdGF0ZVByb3BzKTtcbiAgICBzdGF0ZVByb3BzID0gbmV4dFN0YXRlUHJvcHM7XG5cbiAgICBpZiAoc3RhdGVQcm9wc0NoYW5nZWQpIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG5cbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICB2YXIgcHJvcHNDaGFuZ2VkID0gIWFyZU93blByb3BzRXF1YWwobmV4dE93blByb3BzLCBvd25Qcm9wcyk7XG4gICAgdmFyIHN0YXRlQ2hhbmdlZCA9ICFhcmVTdGF0ZXNFcXVhbChuZXh0U3RhdGUsIHN0YXRlKTtcbiAgICBzdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICBvd25Qcm9wcyA9IG5leHRPd25Qcm9wcztcblxuICAgIGlmIChwcm9wc0NoYW5nZWQgJiYgc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpO1xuICAgIGlmIChwcm9wc0NoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wcygpO1xuICAgIGlmIChzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdTdGF0ZSgpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgcmV0dXJuIGhhc1J1bkF0TGVhc3RPbmNlID8gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA6IGhhbmRsZUZpcnN0Q2FsbChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcyk7XG4gIH07XG59XG5cbi8vIFRPRE86IEFkZCBtb3JlIGNvbW1lbnRzXG5cbi8vIElmIHB1cmUgaXMgdHJ1ZSwgdGhlIHNlbGVjdG9yIHJldHVybmVkIGJ5IHNlbGVjdG9yRmFjdG9yeSB3aWxsIG1lbW9pemUgaXRzIHJlc3VsdHMsXG4vLyBhbGxvd2luZyBjb25uZWN0QWR2YW5jZWQncyBzaG91bGRDb21wb25lbnRVcGRhdGUgdG8gcmV0dXJuIGZhbHNlIGlmIGZpbmFsXG4vLyBwcm9wcyBoYXZlIG5vdCBjaGFuZ2VkLiBJZiBmYWxzZSwgdGhlIHNlbGVjdG9yIHdpbGwgYWx3YXlzIHJldHVybiBhIG5ld1xuLy8gb2JqZWN0IGFuZCBzaG91bGRDb21wb25lbnRVcGRhdGUgd2lsbCBhbHdheXMgcmV0dXJuIHRydWUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkoZGlzcGF0Y2gsIF9yZWYyKSB7XG4gIHZhciBpbml0TWFwU3RhdGVUb1Byb3BzID0gX3JlZjIuaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBfcmVmMi5pbml0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgICAgaW5pdE1lcmdlUHJvcHMgPSBfcmVmMi5pbml0TWVyZ2VQcm9wcyxcbiAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjIsIFsnaW5pdE1hcFN0YXRlVG9Qcm9wcycsICdpbml0TWFwRGlzcGF0Y2hUb1Byb3BzJywgJ2luaXRNZXJnZVByb3BzJ10pO1xuXG4gIHZhciBtYXBTdGF0ZVRvUHJvcHMgPSBpbml0TWFwU3RhdGVUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgdmFyIG1hcERpc3BhdGNoVG9Qcm9wcyA9IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWVyZ2VQcm9wcyA9IGluaXRNZXJnZVByb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZlcmlmeVN1YnNlbGVjdG9ycyhtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgb3B0aW9ucy5kaXNwbGF5TmFtZSk7XG4gIH1cblxuICB2YXIgc2VsZWN0b3JGYWN0b3J5ID0gb3B0aW9ucy5wdXJlID8gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkgOiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5O1xuXG4gIHJldHVybiBzZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBvcHRpb25zKTtcbn0iLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCBjb25uZWN0QWR2YW5jZWQgZnJvbSAnLi4vY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQnO1xuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICcuLi91dGlscy9zaGFsbG93RXF1YWwnO1xuaW1wb3J0IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tYXBEaXNwYXRjaFRvUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tYXBTdGF0ZVRvUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIGZyb20gJy4vbWVyZ2VQcm9wcyc7XG5pbXBvcnQgZGVmYXVsdFNlbGVjdG9yRmFjdG9yeSBmcm9tICcuL3NlbGVjdG9yRmFjdG9yeSc7XG5cbi8qXG4gIGNvbm5lY3QgaXMgYSBmYWNhZGUgb3ZlciBjb25uZWN0QWR2YW5jZWQuIEl0IHR1cm5zIGl0cyBhcmdzIGludG8gYSBjb21wYXRpYmxlXG4gIHNlbGVjdG9yRmFjdG9yeSwgd2hpY2ggaGFzIHRoZSBzaWduYXR1cmU6XG5cbiAgICAoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgPT4gbmV4dEZpbmFsUHJvcHNcbiAgXG4gIGNvbm5lY3QgcGFzc2VzIGl0cyBhcmdzIHRvIGNvbm5lY3RBZHZhbmNlZCBhcyBvcHRpb25zLCB3aGljaCB3aWxsIGluIHR1cm4gcGFzcyB0aGVtIHRvXG4gIHNlbGVjdG9yRmFjdG9yeSBlYWNoIHRpbWUgYSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSBpcyBpbnN0YW50aWF0ZWQgb3IgaG90IHJlbG9hZGVkLlxuXG4gIHNlbGVjdG9yRmFjdG9yeSByZXR1cm5zIGEgZmluYWwgcHJvcHMgc2VsZWN0b3IgZnJvbSBpdHMgbWFwU3RhdGVUb1Byb3BzLFxuICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCBtZXJnZVByb3BzLFxuICBtZXJnZVByb3BzRmFjdG9yaWVzLCBhbmQgcHVyZSBhcmdzLlxuXG4gIFRoZSByZXN1bHRpbmcgZmluYWwgcHJvcHMgc2VsZWN0b3IgaXMgY2FsbGVkIGJ5IHRoZSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSB3aGVuZXZlclxuICBpdCByZWNlaXZlcyBuZXcgcHJvcHMgb3Igc3RvcmUgc3RhdGUuXG4gKi9cblxuZnVuY3Rpb24gbWF0Y2goYXJnLCBmYWN0b3JpZXMsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IGZhY3Rvcmllcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciByZXN1bHQgPSBmYWN0b3JpZXNbaV0oYXJnKTtcbiAgICBpZiAocmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBvZiB0eXBlICcgKyB0eXBlb2YgYXJnICsgJyBmb3IgJyArIG5hbWUgKyAnIGFyZ3VtZW50IHdoZW4gY29ubmVjdGluZyBjb21wb25lbnQgJyArIG9wdGlvbnMud3JhcHBlZENvbXBvbmVudE5hbWUgKyAnLicpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHJpY3RFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufVxuXG4vLyBjcmVhdGVDb25uZWN0IHdpdGggZGVmYXVsdCBhcmdzIGJ1aWxkcyB0aGUgJ29mZmljaWFsJyBjb25uZWN0IGJlaGF2aW9yLiBDYWxsaW5nIGl0IHdpdGhcbi8vIGRpZmZlcmVudCBvcHRpb25zIG9wZW5zIHVwIHNvbWUgdGVzdGluZyBhbmQgZXh0ZW5zaWJpbGl0eSBzY2VuYXJpb3NcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb25uZWN0KCkge1xuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICBfcmVmJGNvbm5lY3RIT0MgPSBfcmVmLmNvbm5lY3RIT0MsXG4gICAgICBjb25uZWN0SE9DID0gX3JlZiRjb25uZWN0SE9DID09PSB1bmRlZmluZWQgPyBjb25uZWN0QWR2YW5jZWQgOiBfcmVmJGNvbm5lY3RIT0MsXG4gICAgICBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPSBfcmVmLm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwU3RhdGVUb1Byb3BzRixcbiAgICAgIF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9IF9yZWYubWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBEaXNwYXRjaFRvUHJvID09PSB1bmRlZmluZWQgPyBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBEaXNwYXRjaFRvUHJvLFxuICAgICAgX3JlZiRtZXJnZVByb3BzRmFjdG9yID0gX3JlZi5tZXJnZVByb3BzRmFjdG9yaWVzLFxuICAgICAgbWVyZ2VQcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1lcmdlUHJvcHNGYWN0b3IsXG4gICAgICBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYuc2VsZWN0b3JGYWN0b3J5LFxuICAgICAgc2VsZWN0b3JGYWN0b3J5ID0gX3JlZiRzZWxlY3RvckZhY3RvcnkgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgOiBfcmVmJHNlbGVjdG9yRmFjdG9yeTtcblxuICByZXR1cm4gZnVuY3Rpb24gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcykge1xuICAgIHZhciBfcmVmMiA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge30sXG4gICAgICAgIF9yZWYyJHB1cmUgPSBfcmVmMi5wdXJlLFxuICAgICAgICBwdXJlID0gX3JlZjIkcHVyZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9yZWYyJHB1cmUsXG4gICAgICAgIF9yZWYyJGFyZVN0YXRlc0VxdWFsID0gX3JlZjIuYXJlU3RhdGVzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlc0VxdWFsID0gX3JlZjIkYXJlU3RhdGVzRXF1YWwgPT09IHVuZGVmaW5lZCA/IHN0cmljdEVxdWFsIDogX3JlZjIkYXJlU3RhdGVzRXF1YWwsXG4gICAgICAgIF9yZWYyJGFyZU93blByb3BzRXF1YSA9IF9yZWYyLmFyZU93blByb3BzRXF1YWwsXG4gICAgICAgIGFyZU93blByb3BzRXF1YWwgPSBfcmVmMiRhcmVPd25Qcm9wc0VxdWEgPT09IHVuZGVmaW5lZCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYyJGFyZU93blByb3BzRXF1YSxcbiAgICAgICAgX3JlZjIkYXJlU3RhdGVQcm9wc0VxID0gX3JlZjIuYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBfcmVmMiRhcmVTdGF0ZVByb3BzRXEgPT09IHVuZGVmaW5lZCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYyJGFyZVN0YXRlUHJvcHNFcSxcbiAgICAgICAgX3JlZjIkYXJlTWVyZ2VkUHJvcHNFID0gX3JlZjIuYXJlTWVyZ2VkUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYyJGFyZU1lcmdlZFByb3BzRSA9PT0gdW5kZWZpbmVkID8gc2hhbGxvd0VxdWFsIDogX3JlZjIkYXJlTWVyZ2VkUHJvcHNFLFxuICAgICAgICBleHRyYU9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjIsIFsncHVyZScsICdhcmVTdGF0ZXNFcXVhbCcsICdhcmVPd25Qcm9wc0VxdWFsJywgJ2FyZVN0YXRlUHJvcHNFcXVhbCcsICdhcmVNZXJnZWRQcm9wc0VxdWFsJ10pO1xuXG4gICAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBtYXRjaChtYXBTdGF0ZVRvUHJvcHMsIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgJ21hcFN0YXRlVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gbWF0Y2gobWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1lcmdlUHJvcHMgPSBtYXRjaChtZXJnZVByb3BzLCBtZXJnZVByb3BzRmFjdG9yaWVzLCAnbWVyZ2VQcm9wcycpO1xuXG4gICAgcmV0dXJuIGNvbm5lY3RIT0Moc2VsZWN0b3JGYWN0b3J5LCBfZXh0ZW5kcyh7XG4gICAgICAvLyB1c2VkIGluIGVycm9yIG1lc3NhZ2VzXG4gICAgICBtZXRob2ROYW1lOiAnY29ubmVjdCcsXG5cbiAgICAgIC8vIHVzZWQgdG8gY29tcHV0ZSBDb25uZWN0J3MgZGlzcGxheU5hbWUgZnJvbSB0aGUgd3JhcHBlZCBjb21wb25lbnQncyBkaXNwbGF5TmFtZS5cbiAgICAgIGdldERpc3BsYXlOYW1lOiBmdW5jdGlvbiBnZXREaXNwbGF5TmFtZShuYW1lKSB7XG4gICAgICAgIHJldHVybiAnQ29ubmVjdCgnICsgbmFtZSArICcpJztcbiAgICAgIH0sXG5cbiAgICAgIC8vIGlmIG1hcFN0YXRlVG9Qcm9wcyBpcyBmYWxzeSwgdGhlIENvbm5lY3QgY29tcG9uZW50IGRvZXNuJ3Qgc3Vic2NyaWJlIHRvIHN0b3JlIHN0YXRlIGNoYW5nZXNcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogQm9vbGVhbihtYXBTdGF0ZVRvUHJvcHMpLFxuXG4gICAgICAvLyBwYXNzZWQgdGhyb3VnaCB0byBzZWxlY3RvckZhY3RvcnlcbiAgICAgIGluaXRNYXBTdGF0ZVRvUHJvcHM6IGluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzOiBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgICAgaW5pdE1lcmdlUHJvcHM6IGluaXRNZXJnZVByb3BzLFxuICAgICAgcHVyZTogcHVyZSxcbiAgICAgIGFyZVN0YXRlc0VxdWFsOiBhcmVTdGF0ZXNFcXVhbCxcbiAgICAgIGFyZU93blByb3BzRXF1YWw6IGFyZU93blByb3BzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWw6IGFyZVN0YXRlUHJvcHNFcXVhbCxcbiAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWw6IGFyZU1lcmdlZFByb3BzRXF1YWxcblxuICAgIH0sIGV4dHJhT3B0aW9ucykpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDb25uZWN0KCk7IiwiZXhwb3J0IGNvbnN0IEFMQlVNU19MT0FEID0gJ0FMQlVNU19MT0FEJztcbmV4cG9ydCBjb25zdCBBTEJVTV9MT0FEID0gJ0FMQlVNX0xPQUQnO1xuZXhwb3J0IGNvbnN0IEFMQlVNX0FERCA9ICdBTEJVTV9BREQnO1xuZXhwb3J0IGNvbnN0IElNQUdFU19MT0FEID0gJ0lNQUdFU19MT0FEJztcbmV4cG9ydCBjb25zdCBJTUFHRV9BREQgPSAnSU1BR0VfQUREJztcblxuZXhwb3J0IGNvbnN0IGdldEFsYnVtcyA9IHN0YXRlID0+IHN0YXRlLmFsYnVtcztcbmV4cG9ydCBjb25zdCBnZXRBbGJ1bSA9IHN0YXRlID0+IHN0YXRlLmFsYnVtO1xuZXhwb3J0IGNvbnN0IGdldEltYWdlcyA9IHN0YXRlID0+IHN0YXRlLmltYWdlcztcblxuZXhwb3J0IGZ1bmN0aW9uIGFsYnVtcyhzdGF0ZSA9IFtdLCB7IHR5cGUsIHBheWxvYWQgfSkge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIEFMQlVNU19MT0FEOiB7XG4gICAgICByZXR1cm4gcGF5bG9hZDtcbiAgICB9XG4gICAgY2FzZSBBTEJVTV9BREQ6IHtcbiAgICAgIHJldHVybiBbLi4uc3RhdGUsIHBheWxvYWRdO1xuICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhbGJ1bShzdGF0ZSA9IHt9LCB7IHR5cGUsIHBheWxvYWQgfSkge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIEFMQlVNX0xPQUQ6IHtcbiAgICAgIGNvbnN0IHsgYWxidW1zLCBhbGJ1bUlkIH0gPSBwYXlsb2FkO1xuICAgICAgY29uc3Qgc2VsZWN0ZWRBbGJ1bSA9IGFsYnVtcy5maWx0ZXIoZWFjaEFsYnVtID0+IGVhY2hBbGJ1bS5faWQgPT09IGFsYnVtSWQpO1xuICAgICAgcmV0dXJuIHNlbGVjdGVkQWxidW1bMF07XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGltYWdlcyhzdGF0ZSA9IFtdLCB7IHR5cGUsIHBheWxvYWQgfSkge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIElNQUdFU19MT0FEOiB7XG4gICAgICByZXR1cm4gcGF5bG9hZDtcbiAgICB9XG4gICAgY2FzZSBJTUFHRV9BREQ6IHtcbiAgICAgIHJldHVybiBbLi4uc3RhdGUsIHBheWxvYWRdO1xuICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59IiwiZXhwb3J0IGNvbnN0IFVTRVJfQVVUSCA9ICdVU0VSX0FVVEgnO1xuZXhwb3J0IGNvbnN0IExPR09VVCA9ICdMT0dPVVQnO1xuZXhwb3J0IGNvbnN0IENIRUNLRURfQVVUSCA9ICdDSEVDS0VEX0FVVEgnO1xuXG5leHBvcnQgY29uc3QgZ2V0VXNlciA9IHN0YXRlID0+IHN0YXRlLnVzZXI7XG5leHBvcnQgY29uc3QgZ2V0Q2hlY2tlZEF1dGggPSBzdGF0ZSA9PiBzdGF0ZS5jaGVja2VkQXV0aDtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZXIoc3RhdGUgPSBudWxsLCB7IHR5cGUsIHBheWxvYWQgfSkge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFVTRVJfQVVUSDpcbiAgICAgIHJldHVybiBwYXlsb2FkO1xuICAgIGNhc2UgTE9HT1VUOlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tlZEF1dGgoc3RhdGUgPSBmYWxzZSwgeyB0eXBlIH0pIHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBDSEVDS0VEX0FVVEg6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59IiwiZnVuY3Rpb24gaXNBYnNvbHV0ZShwYXRobmFtZSkge1xuICByZXR1cm4gcGF0aG5hbWUuY2hhckF0KDApID09PSAnLyc7XG59XG5cbi8vIEFib3V0IDEuNXggZmFzdGVyIHRoYW4gdGhlIHR3by1hcmcgdmVyc2lvbiBvZiBBcnJheSNzcGxpY2UoKVxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCwgayA9IGkgKyAxLCBuID0gbGlzdC5sZW5ndGg7IGsgPCBuOyBpICs9IDEsIGsgKz0gMSkge1xuICAgIGxpc3RbaV0gPSBsaXN0W2tdO1xuICB9XG5cbiAgbGlzdC5wb3AoKTtcbn1cblxuLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBoZWF2aWx5IG9uIG5vZGUncyB1cmwucGFyc2VcbmZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZSh0bykge1xuICB2YXIgZnJvbSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJyc7XG5cbiAgdmFyIHRvUGFydHMgPSB0byAmJiB0by5zcGxpdCgnLycpIHx8IFtdO1xuICB2YXIgZnJvbVBhcnRzID0gZnJvbSAmJiBmcm9tLnNwbGl0KCcvJykgfHwgW107XG5cbiAgdmFyIGlzVG9BYnMgPSB0byAmJiBpc0Fic29sdXRlKHRvKTtcbiAgdmFyIGlzRnJvbUFicyA9IGZyb20gJiYgaXNBYnNvbHV0ZShmcm9tKTtcbiAgdmFyIG11c3RFbmRBYnMgPSBpc1RvQWJzIHx8IGlzRnJvbUFicztcblxuICBpZiAodG8gJiYgaXNBYnNvbHV0ZSh0bykpIHtcbiAgICAvLyB0byBpcyBhYnNvbHV0ZVxuICAgIGZyb21QYXJ0cyA9IHRvUGFydHM7XG4gIH0gZWxzZSBpZiAodG9QYXJ0cy5sZW5ndGgpIHtcbiAgICAvLyB0byBpcyByZWxhdGl2ZSwgZHJvcCB0aGUgZmlsZW5hbWVcbiAgICBmcm9tUGFydHMucG9wKCk7XG4gICAgZnJvbVBhcnRzID0gZnJvbVBhcnRzLmNvbmNhdCh0b1BhcnRzKTtcbiAgfVxuXG4gIGlmICghZnJvbVBhcnRzLmxlbmd0aCkgcmV0dXJuICcvJztcblxuICB2YXIgaGFzVHJhaWxpbmdTbGFzaCA9IHZvaWQgMDtcbiAgaWYgKGZyb21QYXJ0cy5sZW5ndGgpIHtcbiAgICB2YXIgbGFzdCA9IGZyb21QYXJ0c1tmcm9tUGFydHMubGVuZ3RoIC0gMV07XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nIHx8IGxhc3QgPT09ICcnO1xuICB9IGVsc2Uge1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBmYWxzZTtcbiAgfVxuXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBmcm9tUGFydHMubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIHZhciBwYXJ0ID0gZnJvbVBhcnRzW2ldO1xuXG4gICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIGlmICghbXVzdEVuZEFicykgZm9yICg7IHVwLS07IHVwKSB7XG4gICAgZnJvbVBhcnRzLnVuc2hpZnQoJy4uJyk7XG4gIH1pZiAobXVzdEVuZEFicyAmJiBmcm9tUGFydHNbMF0gIT09ICcnICYmICghZnJvbVBhcnRzWzBdIHx8ICFpc0Fic29sdXRlKGZyb21QYXJ0c1swXSkpKSBmcm9tUGFydHMudW5zaGlmdCgnJyk7XG5cbiAgdmFyIHJlc3VsdCA9IGZyb21QYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgcmVzdWx0LnN1YnN0cigtMSkgIT09ICcvJykgcmVzdWx0ICs9ICcvJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlUGF0aG5hbWU7IiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5mdW5jdGlvbiB2YWx1ZUVxdWFsKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXG4gIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShiKSAmJiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGl0ZW0sIGJbaW5kZXhdKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBhVHlwZSA9IHR5cGVvZiBhID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihhKTtcbiAgdmFyIGJUeXBlID0gdHlwZW9mIGIgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGIpO1xuXG4gIGlmIChhVHlwZSAhPT0gYlR5cGUpIHJldHVybiBmYWxzZTtcblxuICBpZiAoYVR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIGFWYWx1ZSA9IGEudmFsdWVPZigpO1xuICAgIHZhciBiVmFsdWUgPSBiLnZhbHVlT2YoKTtcblxuICAgIGlmIChhVmFsdWUgIT09IGEgfHwgYlZhbHVlICE9PSBiKSByZXR1cm4gdmFsdWVFcXVhbChhVmFsdWUsIGJWYWx1ZSk7XG5cbiAgICB2YXIgYUtleXMgPSBPYmplY3Qua2V5cyhhKTtcbiAgICB2YXIgYktleXMgPSBPYmplY3Qua2V5cyhiKTtcblxuICAgIGlmIChhS2V5cy5sZW5ndGggIT09IGJLZXlzLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgcmV0dXJuIGFLZXlzLmV2ZXJ5KGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGFba2V5XSwgYltrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmFsdWVFcXVhbDsiLCJleHBvcnQgdmFyIGFkZExlYWRpbmdTbGFzaCA9IGZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG59O1xuXG5leHBvcnQgdmFyIHN0cmlwTGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgaGFzQmFzZW5hbWUgPSBmdW5jdGlvbiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgcHJlZml4ICsgJyhcXFxcL3xcXFxcP3wjfCQpJywgJ2knKS50ZXN0KHBhdGgpO1xufTtcblxuZXhwb3J0IHZhciBzdHJpcEJhc2VuYW1lID0gZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkgPyBwYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKSA6IHBhdGg7XG59O1xuXG5leHBvcnQgdmFyIHN0cmlwVHJhaWxpbmdTbGFzaCA9IGZ1bmN0aW9uIHN0cmlwVHJhaWxpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdChwYXRoLmxlbmd0aCAtIDEpID09PSAnLycgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGg7XG59O1xuXG5leHBvcnQgdmFyIHBhcnNlUGF0aCA9IGZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG5cbiAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcbiAgaWYgKHNlYXJjaEluZGV4ICE9PSAtMSkge1xuICAgIHNlYXJjaCA9IHBhdGhuYW1lLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBzZWFyY2ggPT09ICc/JyA/ICcnIDogc2VhcmNoLFxuICAgIGhhc2g6IGhhc2ggPT09ICcjJyA/ICcnIDogaGFzaFxuICB9O1xufTtcblxuZXhwb3J0IHZhciBjcmVhdGVQYXRoID0gZnVuY3Rpb24gY3JlYXRlUGF0aChsb2NhdGlvbikge1xuICB2YXIgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuXG5cbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG5cbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09ICc/JykgcGF0aCArPSBzZWFyY2guY2hhckF0KDApID09PSAnPycgPyBzZWFyY2ggOiAnPycgKyBzZWFyY2g7XG5cbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gJyMnKSBwYXRoICs9IGhhc2guY2hhckF0KDApID09PSAnIycgPyBoYXNoIDogJyMnICsgaGFzaDtcblxuICByZXR1cm4gcGF0aDtcbn07IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHJlc29sdmVQYXRobmFtZSBmcm9tICdyZXNvbHZlLXBhdGhuYW1lJztcbmltcG9ydCB2YWx1ZUVxdWFsIGZyb20gJ3ZhbHVlLWVxdWFsJztcbmltcG9ydCB7IHBhcnNlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJztcblxuZXhwb3J0IHZhciBjcmVhdGVMb2NhdGlvbiA9IGZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb24gPSB2b2lkIDA7XG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG5cbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gcmVzb2x2ZVBhdGhuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59O1xuXG5leHBvcnQgdmFyIGxvY2F0aW9uc0FyZUVxdWFsID0gZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59OyIsImltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuXG52YXIgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSBmdW5jdGlvbiBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpIHtcbiAgdmFyIHByb21wdCA9IG51bGw7XG5cbiAgdmFyIHNldFByb21wdCA9IGZ1bmN0aW9uIHNldFByb21wdChuZXh0UHJvbXB0KSB7XG4gICAgd2FybmluZyhwcm9tcHQgPT0gbnVsbCwgJ0EgaGlzdG9yeSBzdXBwb3J0cyBvbmx5IG9uZSBwcm9tcHQgYXQgYSB0aW1lJyk7XG5cbiAgICBwcm9tcHQgPSBuZXh0UHJvbXB0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgY29uZmlybVRyYW5zaXRpb25UbyA9IGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2FybmluZyhmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKTtcblxuICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXR1cm4gZmFsc2UgZnJvbSBhIHRyYW5zaXRpb24gaG9vayB0byBjYW5jZWwgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdCAhPT0gZmFsc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIHZhciBhcHBlbmRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBub3RpZnlMaXN0ZW5lcnMgPSBmdW5jdGlvbiBub3RpZnlMaXN0ZW5lcnMoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXIuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHNldFByb21wdDogc2V0UHJvbXB0LFxuICAgIGNvbmZpcm1UcmFuc2l0aW9uVG86IGNvbmZpcm1UcmFuc2l0aW9uVG8sXG4gICAgYXBwZW5kTGlzdGVuZXI6IGFwcGVuZExpc3RlbmVyLFxuICAgIG5vdGlmeUxpc3RlbmVyczogbm90aWZ5TGlzdGVuZXJzXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjsiLCJleHBvcnQgdmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbmV4cG9ydCB2YXIgYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLmFkZEV2ZW50TGlzdGVuZXIgPyBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmF0dGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxuZXhwb3J0IHZhciByZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudCwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA/IG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKSA6IG5vZGUuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG59O1xuXG5leHBvcnQgdmFyIGdldENvbmZpcm1hdGlvbiA9IGZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICByZXR1cm4gY2FsbGJhY2sod2luZG93LmNvbmZpcm0obWVzc2FnZSkpO1xufTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaXMgc3VwcG9ydGVkLiBUYWtlbiBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xuICogY2hhbmdlZCB0byBhdm9pZCBmYWxzZSBuZWdhdGl2ZXMgZm9yIFdpbmRvd3MgUGhvbmVzOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxuICovXG5leHBvcnQgdmFyIHN1cHBvcnRzSGlzdG9yeSA9IGZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG5cbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG5leHBvcnQgdmFyIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5leHBvcnQgdmFyIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoID0gZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG5leHBvcnQgdmFyIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQgPSBmdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59OyIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiB9IGZyb20gJy4vTG9jYXRpb25VdGlscyc7XG5pbXBvcnQgeyBhZGRMZWFkaW5nU2xhc2gsIHN0cmlwVHJhaWxpbmdTbGFzaCwgaGFzQmFzZW5hbWUsIHN0cmlwQmFzZW5hbWUsIGNyZWF0ZVBhdGggfSBmcm9tICcuL1BhdGhVdGlscyc7XG5pbXBvcnQgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgZnJvbSAnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcic7XG5pbXBvcnQgeyBjYW5Vc2VET00sIGFkZEV2ZW50TGlzdGVuZXIsIHJlbW92ZUV2ZW50TGlzdGVuZXIsIGdldENvbmZpcm1hdGlvbiwgc3VwcG9ydHNIaXN0b3J5LCBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlLCBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IH0gZnJvbSAnLi9ET01VdGlscyc7XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbnZhciBnZXRIaXN0b3J5U3RhdGUgPSBmdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LnN0YXRlIHx8IHt9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSUUgMTEgc29tZXRpbWVzIHRocm93cyB3aGVuIGFjY2Vzc2luZyB3aW5kb3cuaGlzdG9yeS5zdGF0ZVxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUmVhY3RUcmFpbmluZy9oaXN0b3J5L3B1bGwvMjg5XG4gICAgcmV0dXJuIHt9O1xuICB9XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHVzZXMgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGluY2x1ZGluZ1xuICogcHVzaFN0YXRlLCByZXBsYWNlU3RhdGUsIGFuZCB0aGUgcG9wc3RhdGUgZXZlbnQuXG4gKi9cbnZhciBjcmVhdGVCcm93c2VySGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIGludmFyaWFudChjYW5Vc2VET00sICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKTtcblxuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuVXNlSGlzdG9yeSA9IHN1cHBvcnRzSGlzdG9yeSgpO1xuICB2YXIgbmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIgPSAhc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpO1xuXG4gIHZhciBfcHJvcHMkZm9yY2VSZWZyZXNoID0gcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHVuZGVmaW5lZCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBwcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB1bmRlZmluZWQgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcblxuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIHZhciBnZXRET01Mb2NhdGlvbiA9IGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG5cblxuICAgIHZhciBwYXRoID0gcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuXG4gICAgd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKTtcblxuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXkpO1xuICB9O1xuXG4gIHZhciBjcmVhdGVLZXkgPSBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9O1xuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBoYW5kbGVQb3BTdGF0ZSA9IGZ1bmN0aW9uIGhhbmRsZVBvcFN0YXRlKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGV4dHJhbmVvdXMgcG9wc3RhdGUgZXZlbnRzIGluIFdlYktpdC5cbiAgICBpZiAoaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkpIHJldHVybjtcblxuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVIYXNoQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfTtcblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcblxuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG5cbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGZyb21Mb2NhdGlvbi5rZXkpO1xuXG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG5cbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gIH07XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7IGtleToga2V5LCBzdGF0ZTogc3RhdGUgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICB2YXIgbmV4dEtleXMgPSBhbGxLZXlzLnNsaWNlKDAsIHByZXZJbmRleCA9PT0gLTEgPyAwIDogcHJldkluZGV4ICsgMSk7XG5cbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuXG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5Jyk7XG5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcblxuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG5cbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKTtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIHZhciBjaGVja0RPTUxpc3RlbmVycyA9IGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxKSB7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKHdpbmRvdywgUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuXG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIGFkZEV2ZW50TGlzdGVuZXIod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3csIFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcblxuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSByZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJyb3dzZXJIaXN0b3J5OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsIH0gZnJvbSAnLi9Mb2NhdGlvblV0aWxzJztcbmltcG9ydCB7IGFkZExlYWRpbmdTbGFzaCwgc3RyaXBMZWFkaW5nU2xhc2gsIHN0cmlwVHJhaWxpbmdTbGFzaCwgaGFzQmFzZW5hbWUsIHN0cmlwQmFzZW5hbWUsIGNyZWF0ZVBhdGggfSBmcm9tICcuL1BhdGhVdGlscyc7XG5pbXBvcnQgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgZnJvbSAnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcic7XG5pbXBvcnQgeyBjYW5Vc2VET00sIGFkZEV2ZW50TGlzdGVuZXIsIHJlbW92ZUV2ZW50TGlzdGVuZXIsIGdldENvbmZpcm1hdGlvbiwgc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggfSBmcm9tICcuL0RPTVV0aWxzJztcblxudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbnZhciBnZXRIYXNoUGF0aCA9IGZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufTtcblxudmFyIHB1c2hIYXNoUGF0aCA9IGZ1bmN0aW9uIHB1c2hIYXNoUGF0aChwYXRoKSB7XG4gIHJldHVybiB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59O1xuXG52YXIgcmVwbGFjZUhhc2hQYXRoID0gZnVuY3Rpb24gcmVwbGFjZUhhc2hQYXRoKHBhdGgpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLmluZGV4T2YoJyMnKTtcblxuICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSh3aW5kb3cubG9jYXRpb24uaHJlZi5zbGljZSgwLCBoYXNoSW5kZXggPj0gMCA/IGhhc2hJbmRleCA6IDApICsgJyMnICsgcGF0aCk7XG59O1xuXG52YXIgY3JlYXRlSGFzaEhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICBpbnZhcmlhbnQoY2FuVXNlRE9NLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJyk7XG5cbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG5cbiAgdmFyIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB1bmRlZmluZWQgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMkaGFzaFR5cGUgPSBwcm9wcy5oYXNoVHlwZSxcbiAgICAgIGhhc2hUeXBlID0gX3Byb3BzJGhhc2hUeXBlID09PSB1bmRlZmluZWQgPyAnc2xhc2gnIDogX3Byb3BzJGhhc2hUeXBlO1xuXG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuXG4gIHZhciBnZXRET01Mb2NhdGlvbiA9IGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKCkge1xuICAgIHZhciBwYXRoID0gZGVjb2RlUGF0aChnZXRIYXNoUGF0aCgpKTtcblxuICAgIHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJyk7XG5cbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcblxuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoKTtcbiAgfTtcblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gIHZhciBpZ25vcmVQYXRoID0gbnVsbDtcblxuICB2YXIgaGFuZGxlSGFzaENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgICAgaWYgKCFmb3JjZU5leHRQb3AgJiYgbG9jYXRpb25zQXJlRXF1YWwocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09IGNyZWF0ZVBhdGgobG9jYXRpb24pKSByZXR1cm47IC8vIElnbm9yZSB0aGlzIGNoYW5nZTsgd2UgYWxyZWFkeSBzZXRTdGF0ZSBpbiBwdXNoL3JlcGxhY2UuXG5cbiAgICAgIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gICAgICBoYW5kbGVQb3AobG9jYXRpb24pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlUG9wID0gZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG5cbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHJldmVydFBvcCA9IGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIHBhdGhzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIHBhdGhzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgodG9Mb2NhdGlvbikpO1xuXG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcblxuICAgIHZhciBmcm9tSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGZyb21Mb2NhdGlvbikpO1xuXG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG5cbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfTtcblxuICAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiAnIycgKyBlbmNvZGVQYXRoKGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbikpO1xuICB9O1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFBVU0gsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHB1c2hIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG5cbiAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgICB2YXIgbmV4dFBhdGhzID0gYWxsUGF0aHMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcblxuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG5cbiAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpO1xuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG5cbiAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxQYXRoc1twcmV2SW5kZXhdID0gcGF0aDtcblxuICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpO1xuXG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIHZhciBjaGVja0RPTUxpc3RlbmVycyA9IGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxKSB7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlSGFzaEhpc3Rvcnk7IiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCB7IGNyZWF0ZVBhdGggfSBmcm9tICcuL1BhdGhVdGlscyc7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiB9IGZyb20gJy4vTG9jYXRpb25VdGlscyc7XG5pbXBvcnQgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgZnJvbSAnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcic7XG5cbnZhciBjbGFtcCA9IGZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuXG4gKi9cbnZhciBjcmVhdGVNZW1vcnlIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIGdldFVzZXJDb25maXJtYXRpb24gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgX3Byb3BzJGluaXRpYWxFbnRyaWVzID0gcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdW5kZWZpbmVkID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gcHJvcHMuaW5pdGlhbEluZGV4LFxuICAgICAgaW5pdGlhbEluZGV4ID0gX3Byb3BzJGluaXRpYWxJbmRleCA9PT0gdW5kZWZpbmVkID8gMCA6IF9wcm9wcyRpbml0aWFsSW5kZXgsXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG5cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBjcmVhdGVLZXkgPSBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9O1xuXG4gIHZhciBpbmRleCA9IGNsYW1wKGluaXRpYWxJbmRleCwgMCwgaW5pdGlhbEVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIHZhciBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiB0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnID8gY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgY3JlYXRlS2V5KCkpIDogY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgZW50cnkua2V5IHx8IGNyZWF0ZUtleSgpKTtcbiAgfSk7XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gY3JlYXRlUGF0aDtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcHJldkluZGV4ID0gaGlzdG9yeS5pbmRleDtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBwcmV2SW5kZXggKyAxO1xuXG4gICAgICB2YXIgbmV4dEVudHJpZXMgPSBoaXN0b3J5LmVudHJpZXMuc2xpY2UoMCk7XG4gICAgICBpZiAobmV4dEVudHJpZXMubGVuZ3RoID4gbmV4dEluZGV4KSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnNwbGljZShuZXh0SW5kZXgsIG5leHRFbnRyaWVzLmxlbmd0aCAtIG5leHRJbmRleCwgbG9jYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dEVudHJpZXMucHVzaChsb2NhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgZW50cmllczogbmV4dEVudHJpZXNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIGhpc3RvcnkuZW50cmllc1toaXN0b3J5LmluZGV4XSA9IGxvY2F0aW9uO1xuXG4gICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBjbGFtcChoaXN0b3J5LmluZGV4ICsgbiwgMCwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aCAtIDEpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmIChvaykge1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIGluZGV4OiBuZXh0SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNaW1pYyB0aGUgYmVoYXZpb3Igb2YgRE9NIGhpc3RvcmllcyBieVxuICAgICAgICAvLyBjYXVzaW5nIGEgcmVuZGVyIGFmdGVyIGEgY2FuY2VsbGVkIFBPUC5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGNhbkdvID0gZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBlbnRyaWVzLmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBlbnRyaWVzW2luZGV4XSxcbiAgICBpbmRleDogaW5kZXgsXG4gICAgZW50cmllczogZW50cmllcyxcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgY2FuR286IGNhbkdvLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlTWVtb3J5SGlzdG9yeTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHV0dGluZyBoaXN0b3J5IG9uIGNvbnRleHQuXG4gKi9cblxudmFyIFJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBtYXRjaDogX3RoaXMuY29tcHV0ZU1hdGNoKF90aGlzLnByb3BzLmhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUpXG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBSb3V0ZXIucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm91dGVyOiBfZXh0ZW5kcyh7fSwgdGhpcy5jb250ZXh0LnJvdXRlciwge1xuICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgIHJvdXRlOiB7XG4gICAgICAgICAgbG9jYXRpb246IHRoaXMucHJvcHMuaGlzdG9yeS5sb2NhdGlvbixcbiAgICAgICAgICBtYXRjaDogdGhpcy5zdGF0ZS5tYXRjaFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH07XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wdXRlTWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlTWF0Y2gocGF0aG5hbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogXCIvXCIsXG4gICAgICB1cmw6IFwiL1wiLFxuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIGlzRXhhY3Q6IHBhdGhuYW1lID09PSBcIi9cIlxuICAgIH07XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGhpc3RvcnkgPSBfcHJvcHMuaGlzdG9yeTtcblxuXG4gICAgaW52YXJpYW50KGNoaWxkcmVuID09IG51bGwgfHwgUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAxLCBcIkEgPFJvdXRlcj4gbWF5IGhhdmUgb25seSBvbmUgY2hpbGQgZWxlbWVudFwiKTtcblxuICAgIC8vIERvIHRoaXMgaGVyZSBzbyB3ZSBjYW4gc2V0U3RhdGUgd2hlbiBhIDxSZWRpcmVjdD4gY2hhbmdlcyB0aGVcbiAgICAvLyBsb2NhdGlvbiBpbiBjb21wb25lbnRXaWxsTW91bnQuIFRoaXMgaGFwcGVucyBlLmcuIHdoZW4gZG9pbmdcbiAgICAvLyBzZXJ2ZXIgcmVuZGVyaW5nIHVzaW5nIGEgPFN0YXRpY1JvdXRlcj4uXG4gICAgdGhpcy51bmxpc3RlbiA9IGhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgIG1hdGNoOiBfdGhpczIuY29tcHV0ZU1hdGNoKGhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUpXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHdhcm5pbmcodGhpcy5wcm9wcy5oaXN0b3J5ID09PSBuZXh0UHJvcHMuaGlzdG9yeSwgXCJZb3UgY2Fubm90IGNoYW5nZSA8Um91dGVyIGhpc3Rvcnk+XCIpO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnVubGlzdGVuKCk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcblxuICAgIHJldHVybiBjaGlsZHJlbiA/IFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pIDogbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Sb3V0ZXIucHJvcFR5cGVzID0ge1xuICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblJvdXRlci5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdFxufTtcblJvdXRlci5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUm91dGVyOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUm91dGVyIGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvUm91dGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlcjsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSBhcyBjcmVhdGVIaXN0b3J5IH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCBSb3V0ZXIgZnJvbSBcIi4vUm91dGVyXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIEhUTUw1IGhpc3RvcnkuXG4gKi9cblxudmFyIEJyb3dzZXJSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQnJvd3NlclJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnJvd3NlclJvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJyb3dzZXJSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KF90aGlzLnByb3BzKSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBCcm93c2VyUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxCcm93c2VyUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpO1xuICB9O1xuXG4gIEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHsgaGlzdG9yeTogdGhpcy5oaXN0b3J5LCBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB9KTtcbiAgfTtcblxuICByZXR1cm4gQnJvd3NlclJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQnJvd3NlclJvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBmb3JjZVJlZnJlc2g6IFByb3BUeXBlcy5ib29sLFxuICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgQnJvd3NlclJvdXRlcjsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgeyBjcmVhdGVIYXNoSGlzdG9yeSBhcyBjcmVhdGVIaXN0b3J5IH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCBSb3V0ZXIgZnJvbSBcIi4vUm91dGVyXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIHdpbmRvdy5sb2NhdGlvbi5oYXNoLlxuICovXG5cbnZhciBIYXNoUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEhhc2hSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEhhc2hSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIYXNoUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShfdGhpcy5wcm9wcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8SGFzaFJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKTtcbiAgfTtcblxuICBIYXNoUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7IGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSwgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfSk7XG4gIH07XG5cbiAgcmV0dXJuIEhhc2hSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkhhc2hSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gIGhhc2hUeXBlOiBQcm9wVHlwZXMub25lT2YoW1wiaGFzaGJhbmdcIiwgXCJub3NsYXNoXCIsIFwic2xhc2hcIl0pLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgSGFzaFJvdXRlcjsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiaW52YXJpYW50XCI7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiB9IGZyb20gXCJoaXN0b3J5XCI7XG5cbnZhciBpc01vZGlmaWVkRXZlbnQgPSBmdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIGEgaGlzdG9yeS1hd2FyZSA8YT4uXG4gKi9cblxudmFyIExpbmsgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTGluaywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTGluaygpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExpbmspO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25DbGljaykgX3RoaXMucHJvcHMub25DbGljayhldmVudCk7XG5cbiAgICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCAmJiAvLyBvbkNsaWNrIHByZXZlbnRlZCBkZWZhdWx0XG4gICAgICBldmVudC5idXR0b24gPT09IDAgJiYgLy8gaWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQgY2xpY2tzXG4gICAgICAhX3RoaXMucHJvcHMudGFyZ2V0ICYmIC8vIGxldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICAgICAhaXNNb2RpZmllZEV2ZW50KGV2ZW50KSAvLyBpZ25vcmUgY2xpY2tzIHdpdGggbW9kaWZpZXIga2V5c1xuICAgICAgKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgIHZhciBoaXN0b3J5ID0gX3RoaXMuY29udGV4dC5yb3V0ZXIuaGlzdG9yeTtcbiAgICAgICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgICAgcmVwbGFjZSA9IF90aGlzJHByb3BzLnJlcGxhY2UsXG4gICAgICAgICAgICAgIHRvID0gX3RoaXMkcHJvcHMudG87XG5cblxuICAgICAgICAgIGlmIChyZXBsYWNlKSB7XG4gICAgICAgICAgICBoaXN0b3J5LnJlcGxhY2UodG8pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoaXN0b3J5LnB1c2godG8pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgTGluay5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICByZXBsYWNlID0gX3Byb3BzLnJlcGxhY2UsXG4gICAgICAgIHRvID0gX3Byb3BzLnRvLFxuICAgICAgICBpbm5lclJlZiA9IF9wcm9wcy5pbm5lclJlZixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbXCJyZXBsYWNlXCIsIFwidG9cIiwgXCJpbm5lclJlZlwiXSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuXG4gICAgaW52YXJpYW50KHRvICE9PSB1bmRlZmluZWQsICdZb3UgbXVzdCBzcGVjaWZ5IHRoZSBcInRvXCIgcHJvcGVydHknKTtcblxuICAgIHZhciBoaXN0b3J5ID0gdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5O1xuXG4gICAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gY3JlYXRlTG9jYXRpb24odG8sIG51bGwsIG51bGwsIGhpc3RvcnkubG9jYXRpb24pIDogdG87XG5cbiAgICB2YXIgaHJlZiA9IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIF9leHRlbmRzKHt9LCBwcm9wcywgeyBvbkNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrLCBocmVmOiBocmVmLCByZWY6IGlubmVyUmVmIH0pKTtcbiAgfTtcblxuICByZXR1cm4gTGluaztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTGluay5wcm9wVHlwZXMgPSB7XG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICB0YXJnZXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHJlcGxhY2U6IFByb3BUeXBlcy5ib29sLFxuICB0bzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWQsXG4gIGlubmVyUmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuY10pXG59O1xuTGluay5kZWZhdWx0UHJvcHMgPSB7XG4gIHJlcGxhY2U6IGZhbHNlXG59O1xuTGluay5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgcHVzaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIHJlcGxhY2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBjcmVhdGVIcmVmOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSkuaXNSZXF1aXJlZFxuICB9KS5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IExpbms7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY3JlYXRlTWVtb3J5SGlzdG9yeSBhcyBjcmVhdGVIaXN0b3J5IH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCBSb3V0ZXIgZnJvbSBcIi4vUm91dGVyXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCBzdG9yZXMgbG9jYXRpb24gaW4gbWVtb3J5LlxuICovXG5cbnZhciBNZW1vcnlSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTWVtb3J5Um91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZW1vcnlSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZW1vcnlSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KF90aGlzLnByb3BzKSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPE1lbW9yeVJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IE1lbW9yeVJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpO1xuICB9O1xuXG4gIE1lbW9yeVJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgeyBoaXN0b3J5OiB0aGlzLmhpc3RvcnksIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIH0pO1xuICB9O1xuXG4gIHJldHVybiBNZW1vcnlSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk1lbW9yeVJvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGluaXRpYWxFbnRyaWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gIGluaXRpYWxJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IE1lbW9yeVJvdXRlcjsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IE1lbW9yeVJvdXRlciBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL01lbW9yeVJvdXRlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBNZW1vcnlSb3V0ZXI7IiwiaW1wb3J0IHBhdGhUb1JlZ2V4cCBmcm9tIFwicGF0aC10by1yZWdleHBcIjtcblxudmFyIHBhdHRlcm5DYWNoZSA9IHt9O1xudmFyIGNhY2hlTGltaXQgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50ID0gMDtcblxudmFyIGNvbXBpbGVQYXRoID0gZnVuY3Rpb24gY29tcGlsZVBhdGgocGF0dGVybiwgb3B0aW9ucykge1xuICB2YXIgY2FjaGVLZXkgPSBcIlwiICsgb3B0aW9ucy5lbmQgKyBvcHRpb25zLnN0cmljdCArIG9wdGlvbnMuc2Vuc2l0aXZlO1xuICB2YXIgY2FjaGUgPSBwYXR0ZXJuQ2FjaGVbY2FjaGVLZXldIHx8IChwYXR0ZXJuQ2FjaGVbY2FjaGVLZXldID0ge30pO1xuXG4gIGlmIChjYWNoZVtwYXR0ZXJuXSkgcmV0dXJuIGNhY2hlW3BhdHRlcm5dO1xuXG4gIHZhciBrZXlzID0gW107XG4gIHZhciByZSA9IHBhdGhUb1JlZ2V4cChwYXR0ZXJuLCBrZXlzLCBvcHRpb25zKTtcbiAgdmFyIGNvbXBpbGVkUGF0dGVybiA9IHsgcmU6IHJlLCBrZXlzOiBrZXlzIH07XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0dGVybl0gPSBjb21waWxlZFBhdHRlcm47XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGNvbXBpbGVkUGF0dGVybjtcbn07XG5cbi8qKlxuICogUHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBVUkwgcGF0aG5hbWUgdG8gYSBwYXRoIHBhdHRlcm4uXG4gKi9cbnZhciBtYXRjaFBhdGggPSBmdW5jdGlvbiBtYXRjaFBhdGgocGF0aG5hbWUpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICB2YXIgcGFyZW50ID0gYXJndW1lbnRzWzJdO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIikgb3B0aW9ucyA9IHsgcGF0aDogb3B0aW9ucyB9O1xuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBwYXRoID0gX29wdGlvbnMucGF0aCxcbiAgICAgIF9vcHRpb25zJGV4YWN0ID0gX29wdGlvbnMuZXhhY3QsXG4gICAgICBleGFjdCA9IF9vcHRpb25zJGV4YWN0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJGV4YWN0LFxuICAgICAgX29wdGlvbnMkc3RyaWN0ID0gX29wdGlvbnMuc3RyaWN0LFxuICAgICAgc3RyaWN0ID0gX29wdGlvbnMkc3RyaWN0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJHN0cmljdCxcbiAgICAgIF9vcHRpb25zJHNlbnNpdGl2ZSA9IF9vcHRpb25zLnNlbnNpdGl2ZSxcbiAgICAgIHNlbnNpdGl2ZSA9IF9vcHRpb25zJHNlbnNpdGl2ZSA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfb3B0aW9ucyRzZW5zaXRpdmU7XG5cblxuICBpZiAocGF0aCA9PSBudWxsKSByZXR1cm4gcGFyZW50O1xuXG4gIHZhciBfY29tcGlsZVBhdGggPSBjb21waWxlUGF0aChwYXRoLCB7IGVuZDogZXhhY3QsIHN0cmljdDogc3RyaWN0LCBzZW5zaXRpdmU6IHNlbnNpdGl2ZSB9KSxcbiAgICAgIHJlID0gX2NvbXBpbGVQYXRoLnJlLFxuICAgICAga2V5cyA9IF9jb21waWxlUGF0aC5rZXlzO1xuXG4gIHZhciBtYXRjaCA9IHJlLmV4ZWMocGF0aG5hbWUpO1xuXG4gIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuXG4gIHZhciB1cmwgPSBtYXRjaFswXSxcbiAgICAgIHZhbHVlcyA9IG1hdGNoLnNsaWNlKDEpO1xuXG4gIHZhciBpc0V4YWN0ID0gcGF0aG5hbWUgPT09IHVybDtcblxuICBpZiAoZXhhY3QgJiYgIWlzRXhhY3QpIHJldHVybiBudWxsO1xuXG4gIHJldHVybiB7XG4gICAgcGF0aDogcGF0aCwgLy8gdGhlIHBhdGggcGF0dGVybiB1c2VkIHRvIG1hdGNoXG4gICAgdXJsOiBwYXRoID09PSBcIi9cIiAmJiB1cmwgPT09IFwiXCIgPyBcIi9cIiA6IHVybCwgLy8gdGhlIG1hdGNoZWQgcG9ydGlvbiBvZiB0aGUgVVJMXG4gICAgaXNFeGFjdDogaXNFeGFjdCwgLy8gd2hldGhlciBvciBub3Qgd2UgbWF0Y2hlZCBleGFjdGx5XG4gICAgcGFyYW1zOiBrZXlzLnJlZHVjZShmdW5jdGlvbiAobWVtbywga2V5LCBpbmRleCkge1xuICAgICAgbWVtb1trZXkubmFtZV0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgcmV0dXJuIG1lbW87XG4gICAgfSwge30pXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtYXRjaFBhdGg7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiaW52YXJpYW50XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gXCIuL21hdGNoUGF0aFwiO1xuXG52YXIgaXNFbXB0eUNoaWxkcmVuID0gZnVuY3Rpb24gaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSB7XG4gIHJldHVybiBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDA7XG59O1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIHNpbmdsZSBwYXRoIGFuZCByZW5kZXJpbmcuXG4gKi9cblxudmFyIFJvdXRlID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJvdXRlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb3V0ZSgpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJvdXRlKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG1hdGNoOiBfdGhpcy5jb21wdXRlTWF0Y2goX3RoaXMucHJvcHMsIF90aGlzLmNvbnRleHQucm91dGVyKVxuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgUm91dGUucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm91dGVyOiBfZXh0ZW5kcyh7fSwgdGhpcy5jb250ZXh0LnJvdXRlciwge1xuICAgICAgICByb3V0ZToge1xuICAgICAgICAgIGxvY2F0aW9uOiB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IHRoaXMuY29udGV4dC5yb3V0ZXIucm91dGUubG9jYXRpb24sXG4gICAgICAgICAgbWF0Y2g6IHRoaXMuc3RhdGUubWF0Y2hcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9O1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wdXRlTWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlTWF0Y2goX3JlZiwgcm91dGVyKSB7XG4gICAgdmFyIGNvbXB1dGVkTWF0Y2ggPSBfcmVmLmNvbXB1dGVkTWF0Y2gsXG4gICAgICAgIGxvY2F0aW9uID0gX3JlZi5sb2NhdGlvbixcbiAgICAgICAgcGF0aCA9IF9yZWYucGF0aCxcbiAgICAgICAgc3RyaWN0ID0gX3JlZi5zdHJpY3QsXG4gICAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgICAgc2Vuc2l0aXZlID0gX3JlZi5zZW5zaXRpdmU7XG5cbiAgICBpZiAoY29tcHV0ZWRNYXRjaCkgcmV0dXJuIGNvbXB1dGVkTWF0Y2g7IC8vIDxTd2l0Y2g+IGFscmVhZHkgY29tcHV0ZWQgdGhlIG1hdGNoIGZvciB1c1xuXG4gICAgaW52YXJpYW50KHJvdXRlciwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlPiBvciB3aXRoUm91dGVyKCkgb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuXG4gICAgdmFyIHJvdXRlID0gcm91dGVyLnJvdXRlO1xuXG4gICAgdmFyIHBhdGhuYW1lID0gKGxvY2F0aW9uIHx8IHJvdXRlLmxvY2F0aW9uKS5wYXRobmFtZTtcblxuICAgIHJldHVybiBtYXRjaFBhdGgocGF0aG5hbWUsIHsgcGF0aDogcGF0aCwgc3RyaWN0OiBzdHJpY3QsIGV4YWN0OiBleGFjdCwgc2Vuc2l0aXZlOiBzZW5zaXRpdmUgfSwgcm91dGUubWF0Y2gpO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghKHRoaXMucHJvcHMuY29tcG9uZW50ICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSByZW5kZXI+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWRcIik7XG5cbiAgICB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjaGlsZHJlbj4gd2lsbCBiZSBpZ25vcmVkXCIpO1xuXG4gICAgd2FybmluZyghKHRoaXMucHJvcHMucmVuZGVyICYmIHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSByZW5kZXI+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgY2hpbGRyZW4+IHdpbGwgYmUgaWdub3JlZFwiKTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzLCBuZXh0Q29udGV4dCkge1xuICAgIHdhcm5pbmcoIShuZXh0UHJvcHMubG9jYXRpb24gJiYgIXRoaXMucHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuXG4gICAgd2FybmluZyghKCFuZXh0UHJvcHMubG9jYXRpb24gJiYgdGhpcy5wcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgbWF0Y2g6IHRoaXMuY29tcHV0ZU1hdGNoKG5leHRQcm9wcywgbmV4dENvbnRleHQucm91dGVyKVxuICAgIH0pO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIG1hdGNoID0gdGhpcy5zdGF0ZS5tYXRjaDtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGNvbXBvbmVudCA9IF9wcm9wcy5jb21wb25lbnQsXG4gICAgICAgIHJlbmRlciA9IF9wcm9wcy5yZW5kZXI7XG4gICAgdmFyIF9jb250ZXh0JHJvdXRlciA9IHRoaXMuY29udGV4dC5yb3V0ZXIsXG4gICAgICAgIGhpc3RvcnkgPSBfY29udGV4dCRyb3V0ZXIuaGlzdG9yeSxcbiAgICAgICAgcm91dGUgPSBfY29udGV4dCRyb3V0ZXIucm91dGUsXG4gICAgICAgIHN0YXRpY0NvbnRleHQgPSBfY29udGV4dCRyb3V0ZXIuc3RhdGljQ29udGV4dDtcblxuICAgIHZhciBsb2NhdGlvbiA9IHRoaXMucHJvcHMubG9jYXRpb24gfHwgcm91dGUubG9jYXRpb247XG4gICAgdmFyIHByb3BzID0geyBtYXRjaDogbWF0Y2gsIGxvY2F0aW9uOiBsb2NhdGlvbiwgaGlzdG9yeTogaGlzdG9yeSwgc3RhdGljQ29udGV4dDogc3RhdGljQ29udGV4dCB9O1xuXG4gICAgaWYgKGNvbXBvbmVudCkgcmV0dXJuIG1hdGNoID8gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSA6IG51bGw7XG5cbiAgICBpZiAocmVuZGVyKSByZXR1cm4gbWF0Y2ggPyByZW5kZXIocHJvcHMpIDogbnVsbDtcblxuICAgIGlmICh0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIGNoaWxkcmVuKHByb3BzKTtcblxuICAgIGlmIChjaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSkgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pO1xuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Sb3V0ZS5wcm9wVHlwZXMgPSB7XG4gIGNvbXB1dGVkTWF0Y2g6IFByb3BUeXBlcy5vYmplY3QsIC8vIHByaXZhdGUsIGZyb20gPFN3aXRjaD5cbiAgcGF0aDogUHJvcFR5cGVzLnN0cmluZyxcbiAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICBjb21wb25lbnQ6IFByb3BUeXBlcy5mdW5jLFxuICByZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSksXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuUm91dGUuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHJvdXRlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9KVxufTtcblJvdXRlLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZTsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFJvdXRlIGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvUm91dGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgUm91dGU7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBSb3V0ZSBmcm9tIFwiLi9Sb3V0ZVwiO1xuaW1wb3J0IExpbmsgZnJvbSBcIi4vTGlua1wiO1xuXG4vKipcbiAqIEEgPExpbms+IHdyYXBwZXIgdGhhdCBrbm93cyBpZiBpdCdzIFwiYWN0aXZlXCIgb3Igbm90LlxuICovXG52YXIgTmF2TGluayA9IGZ1bmN0aW9uIE5hdkxpbmsoX3JlZikge1xuICB2YXIgdG8gPSBfcmVmLnRvLFxuICAgICAgZXhhY3QgPSBfcmVmLmV4YWN0LFxuICAgICAgc3RyaWN0ID0gX3JlZi5zdHJpY3QsXG4gICAgICBsb2NhdGlvbiA9IF9yZWYubG9jYXRpb24sXG4gICAgICBhY3RpdmVDbGFzc05hbWUgPSBfcmVmLmFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgYWN0aXZlU3R5bGUgPSBfcmVmLmFjdGl2ZVN0eWxlLFxuICAgICAgc3R5bGUgPSBfcmVmLnN0eWxlLFxuICAgICAgZ2V0SXNBY3RpdmUgPSBfcmVmLmlzQWN0aXZlLFxuICAgICAgYXJpYUN1cnJlbnQgPSBfcmVmW1wiYXJpYS1jdXJyZW50XCJdLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbXCJ0b1wiLCBcImV4YWN0XCIsIFwic3RyaWN0XCIsIFwibG9jYXRpb25cIiwgXCJhY3RpdmVDbGFzc05hbWVcIiwgXCJjbGFzc05hbWVcIiwgXCJhY3RpdmVTdHlsZVwiLCBcInN0eWxlXCIsIFwiaXNBY3RpdmVcIiwgXCJhcmlhLWN1cnJlbnRcIl0pO1xuXG4gIHZhciBwYXRoID0gKHR5cGVvZiB0byA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHRvKSkgPT09IFwib2JqZWN0XCIgPyB0by5wYXRobmFtZSA6IHRvO1xuXG4gIC8vIFJlZ2V4IHRha2VuIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9waWxsYXJqcy9wYXRoLXRvLXJlZ2V4cC9ibG9iL21hc3Rlci9pbmRleC5qcyNMMjAyXG4gIHZhciBlc2NhcGVkUGF0aCA9IHBhdGggJiYgcGF0aC5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfC9cXFxcXSkvZywgXCJcXFxcJDFcIik7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGUsIHtcbiAgICBwYXRoOiBlc2NhcGVkUGF0aCxcbiAgICBleGFjdDogZXhhY3QsXG4gICAgc3RyaWN0OiBzdHJpY3QsXG4gICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgIGNoaWxkcmVuOiBmdW5jdGlvbiBjaGlsZHJlbihfcmVmMikge1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3JlZjIubG9jYXRpb24sXG4gICAgICAgICAgbWF0Y2ggPSBfcmVmMi5tYXRjaDtcblxuICAgICAgdmFyIGlzQWN0aXZlID0gISEoZ2V0SXNBY3RpdmUgPyBnZXRJc0FjdGl2ZShtYXRjaCwgbG9jYXRpb24pIDogbWF0Y2gpO1xuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaW5rLCBfZXh0ZW5kcyh7XG4gICAgICAgIHRvOiB0byxcbiAgICAgICAgY2xhc3NOYW1lOiBpc0FjdGl2ZSA/IFtjbGFzc05hbWUsIGFjdGl2ZUNsYXNzTmFtZV0uZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH0pLmpvaW4oXCIgXCIpIDogY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZTogaXNBY3RpdmUgPyBfZXh0ZW5kcyh7fSwgc3R5bGUsIGFjdGl2ZVN0eWxlKSA6IHN0eWxlLFxuICAgICAgICBcImFyaWEtY3VycmVudFwiOiBpc0FjdGl2ZSAmJiBhcmlhQ3VycmVudCB8fCBudWxsXG4gICAgICB9LCByZXN0KSk7XG4gICAgfVxuICB9KTtcbn07XG5cbk5hdkxpbmsucHJvcFR5cGVzID0ge1xuICB0bzogTGluay5wcm9wVHlwZXMudG8sXG4gIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gIGFjdGl2ZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBhY3RpdmVTdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIGlzQWN0aXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgXCJhcmlhLWN1cnJlbnRcIjogUHJvcFR5cGVzLm9uZU9mKFtcInBhZ2VcIiwgXCJzdGVwXCIsIFwibG9jYXRpb25cIiwgXCJkYXRlXCIsIFwidGltZVwiLCBcInRydWVcIl0pXG59O1xuXG5OYXZMaW5rLmRlZmF1bHRQcm9wcyA9IHtcbiAgYWN0aXZlQ2xhc3NOYW1lOiBcImFjdGl2ZVwiLFxuICBcImFyaWEtY3VycmVudFwiOiBcInBhZ2VcIlxufTtcblxuZXhwb3J0IGRlZmF1bHQgTmF2TGluazsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwcm9tcHRpbmcgdGhlIHVzZXIgYmVmb3JlIG5hdmlnYXRpbmcgYXdheVxuICogZnJvbSBhIHNjcmVlbiB3aXRoIGEgY29tcG9uZW50LlxuICovXG5cbnZhciBQcm9tcHQgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUHJvbXB0LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQcm9tcHQoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByb21wdCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFByb21wdC5wcm90b3R5cGUuZW5hYmxlID0gZnVuY3Rpb24gZW5hYmxlKG1lc3NhZ2UpIHtcbiAgICBpZiAodGhpcy51bmJsb2NrKSB0aGlzLnVuYmxvY2soKTtcblxuICAgIHRoaXMudW5ibG9jayA9IHRoaXMuY29udGV4dC5yb3V0ZXIuaGlzdG9yeS5ibG9jayhtZXNzYWdlKTtcbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLmRpc2FibGUgPSBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgIGlmICh0aGlzLnVuYmxvY2spIHtcbiAgICAgIHRoaXMudW5ibG9jaygpO1xuICAgICAgdGhpcy51bmJsb2NrID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgaW52YXJpYW50KHRoaXMuY29udGV4dC5yb3V0ZXIsIFwiWW91IHNob3VsZCBub3QgdXNlIDxQcm9tcHQ+IG91dHNpZGUgYSA8Um91dGVyPlwiKTtcblxuICAgIGlmICh0aGlzLnByb3BzLndoZW4pIHRoaXMuZW5hYmxlKHRoaXMucHJvcHMubWVzc2FnZSk7XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICBpZiAobmV4dFByb3BzLndoZW4pIHtcbiAgICAgIGlmICghdGhpcy5wcm9wcy53aGVuIHx8IHRoaXMucHJvcHMubWVzc2FnZSAhPT0gbmV4dFByb3BzLm1lc3NhZ2UpIHRoaXMuZW5hYmxlKG5leHRQcm9wcy5tZXNzYWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kaXNhYmxlKCk7XG4gICAgfVxuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmRpc2FibGUoKTtcbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUHJvbXB0O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Qcm9tcHQucHJvcFR5cGVzID0ge1xuICB3aGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgbWVzc2FnZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zdHJpbmddKS5pc1JlcXVpcmVkXG59O1xuUHJvbXB0LmRlZmF1bHRQcm9wcyA9IHtcbiAgd2hlbjogdHJ1ZVxufTtcblByb21wdC5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgYmxvY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KS5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUHJvbXB0OyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUHJvbXB0IGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvUHJvbXB0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IFByb21wdDsiLCJpbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gXCJwYXRoLXRvLXJlZ2V4cFwiO1xuXG52YXIgcGF0dGVybkNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG52YXIgY29tcGlsZUdlbmVyYXRvciA9IGZ1bmN0aW9uIGNvbXBpbGVHZW5lcmF0b3IocGF0dGVybikge1xuICB2YXIgY2FjaGVLZXkgPSBwYXR0ZXJuO1xuICB2YXIgY2FjaGUgPSBwYXR0ZXJuQ2FjaGVbY2FjaGVLZXldIHx8IChwYXR0ZXJuQ2FjaGVbY2FjaGVLZXldID0ge30pO1xuXG4gIGlmIChjYWNoZVtwYXR0ZXJuXSkgcmV0dXJuIGNhY2hlW3BhdHRlcm5dO1xuXG4gIHZhciBjb21waWxlZEdlbmVyYXRvciA9IHBhdGhUb1JlZ2V4cC5jb21waWxlKHBhdHRlcm4pO1xuXG4gIGlmIChjYWNoZUNvdW50IDwgY2FjaGVMaW1pdCkge1xuICAgIGNhY2hlW3BhdHRlcm5dID0gY29tcGlsZWRHZW5lcmF0b3I7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGNvbXBpbGVkR2VuZXJhdG9yO1xufTtcblxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBnZW5lcmF0aW5nIGEgVVJMIHBhdGhuYW1lIGZyb20gYSBwYXR0ZXJuIGFuZCBwYXJhbWV0ZXJzLlxuICovXG52YXIgZ2VuZXJhdGVQYXRoID0gZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKCkge1xuICB2YXIgcGF0dGVybiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogXCIvXCI7XG4gIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIGlmIChwYXR0ZXJuID09PSBcIi9cIikge1xuICAgIHJldHVybiBwYXR0ZXJuO1xuICB9XG4gIHZhciBnZW5lcmF0b3IgPSBjb21waWxlR2VuZXJhdG9yKHBhdHRlcm4pO1xuICByZXR1cm4gZ2VuZXJhdG9yKHBhcmFtcywgeyBwcmV0dHk6IHRydWUgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBnZW5lcmF0ZVBhdGg7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiaW52YXJpYW50XCI7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwgfSBmcm9tIFwiaGlzdG9yeVwiO1xuaW1wb3J0IGdlbmVyYXRlUGF0aCBmcm9tIFwiLi9nZW5lcmF0ZVBhdGhcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgdXBkYXRpbmcgdGhlIGxvY2F0aW9uIHByb2dyYW1tYXRpY2FsbHlcbiAqIHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxudmFyIFJlZGlyZWN0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJlZGlyZWN0LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSZWRpcmVjdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVkaXJlY3QpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBSZWRpcmVjdC5wcm90b3R5cGUuaXNTdGF0aWMgPSBmdW5jdGlvbiBpc1N0YXRpYygpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0LnJvdXRlciAmJiB0aGlzLmNvbnRleHQucm91dGVyLnN0YXRpY0NvbnRleHQ7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJlZGlyZWN0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICBpZiAodGhpcy5pc1N0YXRpYygpKSB0aGlzLnBlcmZvcm0oKTtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAoIXRoaXMuaXNTdGF0aWMoKSkgdGhpcy5wZXJmb3JtKCk7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB2YXIgcHJldlRvID0gY3JlYXRlTG9jYXRpb24ocHJldlByb3BzLnRvKTtcbiAgICB2YXIgbmV4dFRvID0gY3JlYXRlTG9jYXRpb24odGhpcy5wcm9wcy50byk7XG5cbiAgICBpZiAobG9jYXRpb25zQXJlRXF1YWwocHJldlRvLCBuZXh0VG8pKSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCBcIllvdSB0cmllZCB0byByZWRpcmVjdCB0byB0aGUgc2FtZSByb3V0ZSB5b3UncmUgY3VycmVudGx5IG9uOiBcIiArIChcIlxcXCJcIiArIG5leHRUby5wYXRobmFtZSArIG5leHRUby5zZWFyY2ggKyBcIlxcXCJcIikpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucGVyZm9ybSgpO1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5jb21wdXRlVG8gPSBmdW5jdGlvbiBjb21wdXRlVG8oX3JlZikge1xuICAgIHZhciBjb21wdXRlZE1hdGNoID0gX3JlZi5jb21wdXRlZE1hdGNoLFxuICAgICAgICB0byA9IF9yZWYudG87XG5cbiAgICBpZiAoY29tcHV0ZWRNYXRjaCkge1xuICAgICAgaWYgKHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gZ2VuZXJhdGVQYXRoKHRvLCBjb21wdXRlZE1hdGNoLnBhcmFtcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHRvLCB7XG4gICAgICAgICAgcGF0aG5hbWU6IGdlbmVyYXRlUGF0aCh0by5wYXRobmFtZSwgY29tcHV0ZWRNYXRjaC5wYXJhbXMpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0bztcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUucGVyZm9ybSA9IGZ1bmN0aW9uIHBlcmZvcm0oKSB7XG4gICAgdmFyIGhpc3RvcnkgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3Rvcnk7XG4gICAgdmFyIHB1c2ggPSB0aGlzLnByb3BzLnB1c2g7XG5cbiAgICB2YXIgdG8gPSB0aGlzLmNvbXB1dGVUbyh0aGlzLnByb3BzKTtcblxuICAgIGlmIChwdXNoKSB7XG4gICAgICBoaXN0b3J5LnB1c2godG8pO1xuICAgIH0gZWxzZSB7XG4gICAgICBoaXN0b3J5LnJlcGxhY2UodG8pO1xuICAgIH1cbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBSZWRpcmVjdDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUmVkaXJlY3QucHJvcFR5cGVzID0ge1xuICBjb21wdXRlZE1hdGNoOiBQcm9wVHlwZXMub2JqZWN0LCAvLyBwcml2YXRlLCBmcm9tIDxTd2l0Y2g+XG4gIHB1c2g6IFByb3BUeXBlcy5ib29sLFxuICBmcm9tOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB0bzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWRcbn07XG5SZWRpcmVjdC5kZWZhdWx0UHJvcHMgPSB7XG4gIHB1c2g6IGZhbHNlXG59O1xuUmVkaXJlY3QuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHB1c2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICByZXBsYWNlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSkuaXNSZXF1aXJlZCxcbiAgICBzdGF0aWNDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUmVkaXJlY3Q7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBSZWRpcmVjdCBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL1JlZGlyZWN0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IFJlZGlyZWN0OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiaW52YXJpYW50XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiwgY3JlYXRlUGF0aCB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgUm91dGVyIGZyb20gXCIuL1JvdXRlclwiO1xuXG52YXIgYWRkTGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSBcIi9cIiA/IHBhdGggOiBcIi9cIiArIHBhdGg7XG59O1xuXG52YXIgYWRkQmFzZW5hbWUgPSBmdW5jdGlvbiBhZGRCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKSArIGxvY2F0aW9uLnBhdGhuYW1lXG4gIH0pO1xufTtcblxudmFyIHN0cmlwQmFzZW5hbWUgPSBmdW5jdGlvbiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG5cbiAgdmFyIGJhc2UgPSBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpO1xuXG4gIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKGJhc2UpICE9PSAwKSByZXR1cm4gbG9jYXRpb247XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZS5zdWJzdHIoYmFzZS5sZW5ndGgpXG4gIH0pO1xufTtcblxudmFyIGNyZWF0ZVVSTCA9IGZ1bmN0aW9uIGNyZWF0ZVVSTChsb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIGxvY2F0aW9uID09PSBcInN0cmluZ1wiID8gbG9jYXRpb24gOiBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbn07XG5cbnZhciBzdGF0aWNIYW5kbGVyID0gZnVuY3Rpb24gc3RhdGljSGFuZGxlcihtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgJXMgd2l0aCA8U3RhdGljUm91dGVyPlwiLCBtZXRob2ROYW1lKTtcbiAgfTtcbn07XG5cbnZhciBub29wID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgdG9wLWxldmVsIEFQSSBmb3IgYSBcInN0YXRpY1wiIDxSb3V0ZXI+LCBzby1jYWxsZWQgYmVjYXVzZSBpdFxuICogY2FuJ3QgYWN0dWFsbHkgY2hhbmdlIHRoZSBjdXJyZW50IGxvY2F0aW9uLiBJbnN0ZWFkLCBpdCBqdXN0IHJlY29yZHNcbiAqIGxvY2F0aW9uIGNoYW5nZXMgaW4gYSBjb250ZXh0IG9iamVjdC4gVXNlZnVsIG1haW5seSBpbiB0ZXN0aW5nIGFuZFxuICogc2VydmVyLXJlbmRlcmluZyBzY2VuYXJpb3MuXG4gKi9cblxudmFyIFN0YXRpY1JvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTdGF0aWNSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN0YXRpY1JvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0YXRpY1JvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgICByZXR1cm4gYWRkTGVhZGluZ1NsYXNoKF90aGlzLnByb3BzLmJhc2VuYW1lICsgY3JlYXRlVVJMKHBhdGgpKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVQdXNoID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzLmJhc2VuYW1lLFxuICAgICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wcy5jb250ZXh0O1xuXG4gICAgICBjb250ZXh0LmFjdGlvbiA9IFwiUFVTSFwiO1xuICAgICAgY29udGV4dC5sb2NhdGlvbiA9IGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpO1xuICAgICAgY29udGV4dC51cmwgPSBjcmVhdGVVUkwoY29udGV4dC5sb2NhdGlvbik7XG4gICAgfSwgX3RoaXMuaGFuZGxlUmVwbGFjZSA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyLmJhc2VuYW1lLFxuICAgICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wczIuY29udGV4dDtcblxuICAgICAgY29udGV4dC5hY3Rpb24gPSBcIlJFUExBQ0VcIjtcbiAgICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICAgIGNvbnRleHQudXJsID0gY3JlYXRlVVJMKGNvbnRleHQubG9jYXRpb24pO1xuICAgIH0sIF90aGlzLmhhbmRsZUxpc3RlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH0sIF90aGlzLmhhbmRsZUJsb2NrID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm91dGVyOiB7XG4gICAgICAgIHN0YXRpY0NvbnRleHQ6IHRoaXMucHJvcHMuY29udGV4dFxuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxTdGF0aWNSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBTdGF0aWNSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKTtcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYmFzZW5hbWUgPSBfcHJvcHMuYmFzZW5hbWUsXG4gICAgICAgIGNvbnRleHQgPSBfcHJvcHMuY29udGV4dCxcbiAgICAgICAgbG9jYXRpb24gPSBfcHJvcHMubG9jYXRpb24sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgW1wiYmFzZW5hbWVcIiwgXCJjb250ZXh0XCIsIFwibG9jYXRpb25cIl0pO1xuXG4gICAgdmFyIGhpc3RvcnkgPSB7XG4gICAgICBjcmVhdGVIcmVmOiB0aGlzLmNyZWF0ZUhyZWYsXG4gICAgICBhY3Rpb246IFwiUE9QXCIsXG4gICAgICBsb2NhdGlvbjogc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKSxcbiAgICAgIHB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIHJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgIGdvOiBzdGF0aWNIYW5kbGVyKFwiZ29cIiksXG4gICAgICBnb0JhY2s6IHN0YXRpY0hhbmRsZXIoXCJnb0JhY2tcIiksXG4gICAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoXCJnb0ZvcndhcmRcIiksXG4gICAgICBsaXN0ZW46IHRoaXMuaGFuZGxlTGlzdGVuLFxuICAgICAgYmxvY2s6IHRoaXMuaGFuZGxlQmxvY2tcbiAgICB9O1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgaGlzdG9yeTogaGlzdG9yeSB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFN0YXRpY1JvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuU3RhdGljUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKVxufTtcblN0YXRpY1JvdXRlci5kZWZhdWx0UHJvcHMgPSB7XG4gIGJhc2VuYW1lOiBcIlwiLFxuICBsb2NhdGlvbjogXCIvXCJcbn07XG5TdGF0aWNSb3V0ZXIuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFN0YXRpY1JvdXRlcjsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFN0YXRpY1JvdXRlciBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL1N0YXRpY1JvdXRlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBTdGF0aWNSb3V0ZXI7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiaW52YXJpYW50XCI7XG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gXCIuL21hdGNoUGF0aFwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgdGhlIGZpcnN0IDxSb3V0ZT4gdGhhdCBtYXRjaGVzLlxuICovXG5cbnZhciBTd2l0Y2ggPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU3dpdGNoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2l0Y2goKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN3aXRjaCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCBcIllvdSBzaG91bGQgbm90IHVzZSA8U3dpdGNoPiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB3YXJuaW5nKCEobmV4dFByb3BzLmxvY2F0aW9uICYmICF0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG5cbiAgICB3YXJuaW5nKCEoIW5leHRQcm9wcy5sb2NhdGlvbiAmJiB0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcbiAgfTtcblxuICBTd2l0Y2gucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgcm91dGUgPSB0aGlzLmNvbnRleHQucm91dGVyLnJvdXRlO1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG5cbiAgICB2YXIgbG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IHJvdXRlLmxvY2F0aW9uO1xuXG4gICAgdmFyIG1hdGNoID0gdm9pZCAwLFxuICAgICAgICBjaGlsZCA9IHZvaWQgMDtcbiAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgaWYgKG1hdGNoID09IG51bGwgJiYgUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgICAgdmFyIF9lbGVtZW50JHByb3BzID0gZWxlbWVudC5wcm9wcyxcbiAgICAgICAgICAgIHBhdGhQcm9wID0gX2VsZW1lbnQkcHJvcHMucGF0aCxcbiAgICAgICAgICAgIGV4YWN0ID0gX2VsZW1lbnQkcHJvcHMuZXhhY3QsXG4gICAgICAgICAgICBzdHJpY3QgPSBfZWxlbWVudCRwcm9wcy5zdHJpY3QsXG4gICAgICAgICAgICBzZW5zaXRpdmUgPSBfZWxlbWVudCRwcm9wcy5zZW5zaXRpdmUsXG4gICAgICAgICAgICBmcm9tID0gX2VsZW1lbnQkcHJvcHMuZnJvbTtcblxuICAgICAgICB2YXIgcGF0aCA9IHBhdGhQcm9wIHx8IGZyb207XG5cbiAgICAgICAgY2hpbGQgPSBlbGVtZW50O1xuICAgICAgICBtYXRjaCA9IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgeyBwYXRoOiBwYXRoLCBleGFjdDogZXhhY3QsIHN0cmljdDogc3RyaWN0LCBzZW5zaXRpdmU6IHNlbnNpdGl2ZSB9LCByb3V0ZS5tYXRjaCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWF0Y2ggPyBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHsgbG9jYXRpb246IGxvY2F0aW9uLCBjb21wdXRlZE1hdGNoOiBtYXRjaCB9KSA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFN3aXRjaDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuU3dpdGNoLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHJvdXRlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3Rcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgU3dpdGNoOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgU3dpdGNoIGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvU3dpdGNoXCI7XG5cbmV4cG9ydCBkZWZhdWx0IFN3aXRjaDsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IGdlbmVyYXRlUGF0aCBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL2dlbmVyYXRlUGF0aFwiO1xuXG5leHBvcnQgZGVmYXVsdCBnZW5lcmF0ZVBhdGg7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBtYXRjaFBhdGggZnJvbSBcInJlYWN0LXJvdXRlci9lcy9tYXRjaFBhdGhcIjtcblxuZXhwb3J0IGRlZmF1bHQgbWF0Y2hQYXRoOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tIFwiaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3NcIjtcbmltcG9ydCBSb3V0ZSBmcm9tIFwiLi9Sb3V0ZVwiO1xuXG4vKipcbiAqIEEgcHVibGljIGhpZ2hlci1vcmRlciBjb21wb25lbnQgdG8gYWNjZXNzIHRoZSBpbXBlcmF0aXZlIEFQSVxuICovXG52YXIgd2l0aFJvdXRlciA9IGZ1bmN0aW9uIHdpdGhSb3V0ZXIoQ29tcG9uZW50KSB7XG4gIHZhciBDID0gZnVuY3Rpb24gQyhwcm9wcykge1xuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50UmVmID0gcHJvcHMud3JhcHBlZENvbXBvbmVudFJlZixcbiAgICAgICAgcmVtYWluaW5nUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcIndyYXBwZWRDb21wb25lbnRSZWZcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGUsIHtcbiAgICAgIGNoaWxkcmVuOiBmdW5jdGlvbiBjaGlsZHJlbihyb3V0ZUNvbXBvbmVudFByb3BzKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHJlbWFpbmluZ1Byb3BzLCByb3V0ZUNvbXBvbmVudFByb3BzLCB7XG4gICAgICAgICAgcmVmOiB3cmFwcGVkQ29tcG9uZW50UmVmXG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBDLmRpc3BsYXlOYW1lID0gXCJ3aXRoUm91dGVyKFwiICsgKENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSkgKyBcIilcIjtcbiAgQy5XcmFwcGVkQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuICBDLnByb3BUeXBlcyA9IHtcbiAgICB3cmFwcGVkQ29tcG9uZW50UmVmOiBQcm9wVHlwZXMuZnVuY1xuICB9O1xuXG4gIHJldHVybiBob2lzdFN0YXRpY3MoQywgQ29tcG9uZW50KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXI7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCB3aXRoUm91dGVyIGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvd2l0aFJvdXRlclwiO1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyOyIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHt9O1xuXG52YXJcdG1lbW9pemUgPSBmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW87XG5cblx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdHJldHVybiBtZW1vO1xuXHR9O1xufTtcblxudmFyIGlzT2xkSUUgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcblx0Ly8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3Ncblx0Ly8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuXHQvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG5cdC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuXHQvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcblx0cmV0dXJuIHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iO1xufSk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG59O1xuXG52YXIgZ2V0RWxlbWVudCA9IChmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW8gPSB7fTtcblxuXHRyZXR1cm4gZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgcGFzc2luZyBmdW5jdGlvbiBpbiBvcHRpb25zLCB0aGVuIHVzZSBpdCBmb3IgcmVzb2x2ZSBcImhlYWRcIiBlbGVtZW50LlxuICAgICAgICAgICAgICAgIC8vIFVzZWZ1bCBmb3IgU2hhZG93IFJvb3Qgc3R5bGUgaS5lXG4gICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAgIC8vICAgaW5zZXJ0SW50bzogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb29cIikuc2hhZG93Um9vdCB9XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR2YXIgc3R5bGVUYXJnZXQgPSBnZXRUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQpO1xuXHRcdFx0Ly8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblx0XHRcdGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuXHRcdFx0XHRcdC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcblx0XHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcblx0XHR9XG5cdFx0cmV0dXJuIG1lbW9bdGFyZ2V0XVxuXHR9O1xufSkoKTtcblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXJcdHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xudmFyXHRzdHlsZXNJbnNlcnRlZEF0VG9wID0gW107XG5cbnZhclx0Zml4VXJscyA9IHJlcXVpcmUoXCIuL3VybHNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xuXHRpZiAodHlwZW9mIERFQlVHICE9PSBcInVuZGVmaW5lZFwiICYmIERFQlVHKSB7XG5cdFx0aWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xuXHR9XG5cblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0b3B0aW9ucy5hdHRycyA9IHR5cGVvZiBvcHRpb25zLmF0dHJzID09PSBcIm9iamVjdFwiID8gb3B0aW9ucy5hdHRycyA6IHt9O1xuXG5cdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuXHQvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cdGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSBcImJvb2xlYW5cIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgPGhlYWQ+IGVsZW1lbnRcbiAgICAgICAgaWYgKCFvcHRpb25zLmluc2VydEludG8pIG9wdGlvbnMuaW5zZXJ0SW50byA9IFwiaGVhZFwiO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdGFyZ2V0XG5cdGlmICghb3B0aW9ucy5pbnNlcnRBdCkgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XG5cblx0dmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcblxuXHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xuXHRcdFx0bWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuXHRcdH1cblxuXHRcdGlmKG5ld0xpc3QpIHtcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG5cdFx0XHRhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07XG5cblx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykgZG9tU3R5bGUucGFydHNbal0oKTtcblxuXHRcdFx0XHRkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMsIG9wdGlvbnMpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdGlmKGRvbVN0eWxlKSB7XG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblxuXHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAobGlzdCwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGVzID0gW107XG5cdHZhciBuZXdTdHlsZXMgPSB7fTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XG5cdFx0dmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XG5cdFx0dmFyIG1lZGlhID0gaXRlbVsyXTtcblx0XHR2YXIgc291cmNlTWFwID0gaXRlbVszXTtcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XG5cblx0XHRpZighbmV3U3R5bGVzW2lkXSkgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcblx0XHRlbHNlIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcblx0fVxuXG5cdHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudCAob3B0aW9ucywgc3R5bGUpIHtcblx0dmFyIHRhcmdldCA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvKVxuXG5cdGlmICghdGFyZ2V0KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG5cdH1cblxuXHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZXNJbnNlcnRlZEF0VG9wW3N0eWxlc0luc2VydGVkQXRUb3AubGVuZ3RoIC0gMV07XG5cblx0aWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwidG9wXCIpIHtcblx0XHRpZiAoIWxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCB0YXJnZXQuZmlyc3RDaGlsZCk7XG5cdFx0fSBlbHNlIGlmIChsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHRcdH1cblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGUpO1xuXHR9IGVsc2UgaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwiYm90dG9tXCIpIHtcblx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKSB7XG5cdFx0dmFyIG5leHRTaWJsaW5nID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8gKyBcIiBcIiArIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKTtcblx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0U2libGluZyk7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiW1N0eWxlIExvYWRlcl1cXG5cXG4gSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXFxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXFxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcXG5cIik7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50IChzdHlsZSkge1xuXHRpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXHRzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcblxuXHR2YXIgaWR4ID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcC5pbmRleE9mKHN0eWxlKTtcblx0aWYoaWR4ID49IDApIHtcblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnNwbGljZShpZHgsIDEpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblxuXHRhZGRBdHRycyhzdHlsZSwgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSk7XG5cblx0cmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdGlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR9XG5cdG9wdGlvbnMuYXR0cnMucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cblx0YWRkQXR0cnMobGluaywgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBsaW5rKTtcblxuXHRyZXR1cm4gbGluaztcbn1cblxuZnVuY3Rpb24gYWRkQXR0cnMgKGVsLCBhdHRycykge1xuXHRPYmplY3Qua2V5cyhhdHRycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0ZWwuc2V0QXR0cmlidXRlKGtleSwgYXR0cnNba2V5XSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZSAob2JqLCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZSwgdXBkYXRlLCByZW1vdmUsIHJlc3VsdDtcblxuXHQvLyBJZiBhIHRyYW5zZm9ybSBmdW5jdGlvbiB3YXMgZGVmaW5lZCwgcnVuIGl0IG9uIHRoZSBjc3Ncblx0aWYgKG9wdGlvbnMudHJhbnNmb3JtICYmIG9iai5jc3MpIHtcblx0ICAgIHJlc3VsdCA9IG9wdGlvbnMudHJhbnNmb3JtKG9iai5jc3MpO1xuXG5cdCAgICBpZiAocmVzdWx0KSB7XG5cdCAgICBcdC8vIElmIHRyYW5zZm9ybSByZXR1cm5zIGEgdmFsdWUsIHVzZSB0aGF0IGluc3RlYWQgb2YgdGhlIG9yaWdpbmFsIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgcnVubmluZyBydW50aW1lIHRyYW5zZm9ybWF0aW9ucyBvbiB0aGUgY3NzLlxuXHQgICAgXHRvYmouY3NzID0gcmVzdWx0O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgIFx0Ly8gSWYgdGhlIHRyYW5zZm9ybSBmdW5jdGlvbiByZXR1cm5zIGEgZmFsc3kgdmFsdWUsIGRvbid0IGFkZCB0aGlzIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgY29uZGl0aW9uYWwgbG9hZGluZyBvZiBjc3Ncblx0ICAgIFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgXHRcdC8vIG5vb3Bcblx0ICAgIFx0fTtcblx0ICAgIH1cblx0fVxuXG5cdGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuXHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuXG5cdFx0c3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSk7XG5cblx0XHR1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcblx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuXG5cdH0gZWxzZSBpZiAoXG5cdFx0b2JqLnNvdXJjZU1hcCAmJlxuXHRcdHR5cGVvZiBVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCJcblx0KSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSB1cGRhdGVMaW5rLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cblx0XHRcdGlmKHN0eWxlLmhyZWYpIFVSTC5yZXZva2VPYmplY3RVUkwoc3R5bGUuaHJlZik7XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRzdHlsZSA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cdFx0fTtcblx0fVxuXG5cdHVwZGF0ZShvYmopO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZSAobmV3T2JqKSB7XG5cdFx0aWYgKG5ld09iaikge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRuZXdPYmouY3NzID09PSBvYmouY3NzICYmXG5cdFx0XHRcdG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmXG5cdFx0XHRcdG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXBcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHVwZGF0ZShvYmogPSBuZXdPYmopO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZW1vdmUoKTtcblx0XHR9XG5cdH07XG59XG5cbnZhciByZXBsYWNlVGV4dCA9IChmdW5jdGlvbiAoKSB7XG5cdHZhciB0ZXh0U3RvcmUgPSBbXTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkge1xuXHRcdHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcblxuXHRcdHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuXHR9O1xufSkoKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyAoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuXHR2YXIgY3NzID0gcmVtb3ZlID8gXCJcIiA6IG9iai5jc3M7XG5cblx0aWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcblx0fSBlbHNlIHtcblx0XHR2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG5cdFx0dmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG5cblx0XHRpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcblx0XHRcdHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnIChzdHlsZSwgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG5cblx0aWYobWVkaWEpIHtcblx0XHRzdHlsZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSlcblx0fVxuXG5cdGlmKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG5cdH0gZWxzZSB7XG5cdFx0d2hpbGUoc3R5bGUuZmlyc3RDaGlsZCkge1xuXHRcdFx0c3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG5cdFx0fVxuXG5cdFx0c3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlTGluayAobGluaywgb3B0aW9ucywgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuXHQvKlxuXHRcdElmIGNvbnZlcnRUb0Fic29sdXRlVXJscyBpc24ndCBkZWZpbmVkLCBidXQgc291cmNlbWFwcyBhcmUgZW5hYmxlZFxuXHRcdGFuZCB0aGVyZSBpcyBubyBwdWJsaWNQYXRoIGRlZmluZWQgdGhlbiBsZXRzIHR1cm4gY29udmVydFRvQWJzb2x1dGVVcmxzXG5cdFx0b24gYnkgZGVmYXVsdC4gIE90aGVyd2lzZSBkZWZhdWx0IHRvIHRoZSBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgb3B0aW9uXG5cdFx0ZGlyZWN0bHlcblx0Ki9cblx0dmFyIGF1dG9GaXhVcmxzID0gb3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgPT09IHVuZGVmaW5lZCAmJiBzb3VyY2VNYXA7XG5cblx0aWYgKG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzIHx8IGF1dG9GaXhVcmxzKSB7XG5cdFx0Y3NzID0gZml4VXJscyhjc3MpO1xuXHR9XG5cblx0aWYgKHNvdXJjZU1hcCkge1xuXHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XG5cdFx0Y3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIiArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyBcIiAqL1wiO1xuXHR9XG5cblx0dmFyIGJsb2IgPSBuZXcgQmxvYihbY3NzXSwgeyB0eXBlOiBcInRleHQvY3NzXCIgfSk7XG5cblx0dmFyIG9sZFNyYyA9IGxpbmsuaHJlZjtcblxuXHRsaW5rLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuXG5cdGlmKG9sZFNyYykgVVJMLnJldm9rZU9iamVjdFVSTChvbGRTcmMpO1xufVxuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cdFx0XHRpZihpdGVtWzJdKSB7XG5cdFx0XHRcdHJldHVybiBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH07XG5cblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3Rcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG5cdHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcblx0dmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXHRpZiAoIWNzc01hcHBpbmcpIHtcblx0XHRyZXR1cm4gY29udGVudDtcblx0fVxuXG5cdGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcblx0XHR2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRcdFx0cmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJ1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG5cdH1cblxuXHRyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuXHR2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcblx0dmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcblxuXHRyZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufVxuIiwiaW1wb3J0IHtcbiAgQUxCVU1TX0xPQUQsXG4gIEFMQlVNX0FERCxcbiAgQUxCVU1fTE9BRCxcbiAgSU1BR0VTX0xPQUQsXG4gIGdldEFsYnVtcyxcbiAgSU1BR0VfQUREXG59IGZyb20gJy4vcmVkdWNlcnMnO1xuXG5pbXBvcnQge1xuICBnZXRBbGxBbGJ1bXMsXG4gIHBvc3RBbGJ1bSxcbiAgZ2V0SW1hZ2VzQnlBbGJ1bSxcbiAgZ2V0QWxsSW1hZ2VzLFxuICBwb3N0SW1hZ2Vcbn0gZnJvbSAnLi4vLi4vc2VydmljZXMvYXBpJztcblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRBbGJ1bXMoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogQUxCVU1TX0xPQUQsXG4gICAgcGF5bG9hZDogZ2V0QWxsQWxidW1zKClcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUFsYnVtKGFsYnVtKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogQUxCVU1fQURELFxuICAgIHBheWxvYWQ6IHBvc3RBbGJ1bShhbGJ1bSlcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRBbGJ1bShhbGJ1bUlkKSB7XG4gIHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XG4gICAgY29uc3Qgc3RhdGUgPSBnZXRTdGF0ZSgpO1xuICAgIGNvbnN0IGFsYnVtcyA9IGdldEFsYnVtcyhzdGF0ZSk7XG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogQUxCVU1fTE9BRCxcbiAgICAgIHBheWxvYWQ6IHsgXG4gICAgICAgIGFsYnVtcyxcbiAgICAgICAgYWxidW1JZFxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZ2V0SW1hZ2VzQnlBbGJ1bShhbGJ1bUlkKVxuICAgICAgLnRoZW4oaW1hZ2VzID0+IHtcbiAgICAgICAgZGlzcGF0Y2goe1xuICAgICAgICAgIHR5cGU6IElNQUdFU19MT0FELFxuICAgICAgICAgIHBheWxvYWQ6IGltYWdlc1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9hZEltYWdlcygpIHtcbiAgcmV0dXJuIChkaXNwYXRjaCkgPT4ge1xuICAgIGdldEFsbEltYWdlcygpXG4gICAgICAudGhlbihpbWFnZXMgPT4ge1xuICAgICAgICBkaXNwYXRjaCh7XG4gICAgICAgICAgdHlwZTogSU1BR0VTX0xPQUQsXG4gICAgICAgICAgcGF5bG9hZDogaW1hZ2VzXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJbWFnZShpbWFnZSkge1xuICByZXR1cm4gKGRpc3BhdGNoKSA9PiB7XG4gICAgcG9zdEltYWdlKGltYWdlKVxuICAgICAgLnRoZW4oTmV3SW1hZ2UgPT4ge1xuICAgICAgICBkaXNwYXRjaCh7XG4gICAgICAgICAgdHlwZTogSU1BR0VfQURELFxuICAgICAgICAgIHBheWxvYWQ6IE5ld0ltYWdlXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gIH07XG59IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vVGh1bWJuYWlsLmNzcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRodW1ibmFpbCBleHRlbmRzIENvbXBvbmVudCB7XG4gIFxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHVybDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgdGl0bGUsIHVybCB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnRodW1ibmFpbH0gc3R5bGU9e3sgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7dXJsfSlgIH19PlxuICAgICAgICA8aDI+e3RpdGxlfTwvaDI+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cblxuIiwidmFyIGlzYXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gcGF0aFRvUmVnZXhwXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5tb2R1bGUuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZVxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKVxuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW11cbiAgdmFyIGtleSA9IDBcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgcGF0aCA9ICcnXG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciB8fCAnLydcbiAgdmFyIHJlc1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF1cbiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXVxuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXhcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGhcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdXG4gICAgdmFyIHByZWZpeCA9IHJlc1syXVxuICAgIHZhciBuYW1lID0gcmVzWzNdXG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF1cbiAgICB2YXIgZ3JvdXAgPSByZXNbNV1cbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl1cbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN11cblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gICAgICBwYXRoID0gJydcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXhcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyXG4gICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwXG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pXG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpXG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuICBpZiAocGF0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aClcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJ1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW5cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdXG4gICAgICB2YXIgc2VnbWVudFxuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpXG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnRcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5c1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZylcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhcnRpYWw6IGZhbHNlLFxuICAgICAgICBhc3RlcmlzazogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKVxuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2VcbiAgdmFyIHJvdXRlID0gJydcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpXG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJ1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pXG5cbiAgICAgIGlmICh0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonXG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPydcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSdcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZVxuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKVxuICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlclxuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nXG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnXG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXNcbiAgICAvLyBwb3NzaWJsZSBieSB1c2luZyBhIHBvc2l0aXZlIGxvb2thaGVhZCB0byB0aGUgZW5kIG9yIG5leHQgcGF0aCBzZWdtZW50LlxuICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJ1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gICAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gICAgY29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgIG1peGluczogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgdHlwZTogdHJ1ZVxufTtcblxudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgbmFtZTogdHJ1ZSxcbiAgICBsZW5ndGg6IHRydWUsXG4gICAgcHJvdG90eXBlOiB0cnVlLFxuICAgIGNhbGxlcjogdHJ1ZSxcbiAgICBjYWxsZWU6IHRydWUsXG4gICAgYXJndW1lbnRzOiB0cnVlLFxuICAgIGFyaXR5OiB0cnVlXG59O1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZiAmJiBnZXRQcm90b3R5cGVPZihPYmplY3QpO1xuXG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gICAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7IC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG5cbiAgICAgICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgIGlmICghUkVBQ1RfU1RBVElDU1trZXldICYmICFLTk9XTl9TVEFUSUNTW2tleV0gJiYgKCFibGFja2xpc3QgfHwgIWJsYWNrbGlzdFtrZXldKSkge1xuICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcbiAgICAgICAgICAgICAgICB0cnkgeyAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTUtMiEuL0FsYnVtcy5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcInNvdXJjZU1hcFwiOnRydWUsXCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS01LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS01LTIhLi9BbGJ1bXMuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNS0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tNS0yIS4vQWxidW1zLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImltcG9ydCB7IFVTRVJfQVVUSCwgTE9HT1VULCBDSEVDS0VEX0FVVEggfSBmcm9tICcuL3JlZHVjZXJzJztcbmltcG9ydCB7IGdldFN0b3JlZFVzZXIsIGNsZWFyU3RvcmVkVXNlciB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3JlcXVlc3QnO1xuXG5pbXBvcnQge1xuICBzaWdudXAgYXMgc2lnbnVwQXBpLFxuICBzaWduaW4gYXMgc2lnbmluQXBpLFxuICB2ZXJpZnlVc2VyXG59IGZyb20gJy4uLy4uL3NlcnZpY2VzL2FwaSc7XG5cbmNvbnN0IG1ha2VBdXRoID0gYXBpID0+IGNyZWRlbnRpYWxzID0+ICh7XG4gIHR5cGU6IFVTRVJfQVVUSCxcbiAgcGF5bG9hZDogYXBpKGNyZWRlbnRpYWxzKVxufSk7XG5cbmV4cG9ydCBjb25zdCBzaWdudXAgPSBtYWtlQXV0aChzaWdudXBBcGkpO1xuZXhwb3J0IGNvbnN0IHNpZ25pbiA9IG1ha2VBdXRoKHNpZ25pbkFwaSk7XG5leHBvcnQgY29uc3QgbG9nb3V0ID0gKCkgPT4gKHsgdHlwZTogTE9HT1VUIH0pO1xuXG5jb25zdCBhdXRoQ2hlY2tlZCA9ICgpID0+ICh7IHR5cGU6IENIRUNLRURfQVVUSCB9KTtcblxuZXhwb3J0IGNvbnN0IHRyeUxvYWRVc2VyID0gKCkgPT4gZGlzcGF0Y2ggPT4ge1xuICBjb25zdCB1c2VyID0gZ2V0U3RvcmVkVXNlcigpO1xuICBpZighdXNlciB8fCAhdXNlci50b2tlbikge1xuICAgIHJldHVybiBkaXNwYXRjaChhdXRoQ2hlY2tlZCgpKTtcbiAgfVxuXG4gIHZlcmlmeVVzZXIodXNlci50b2tlbilcbiAgICAudGhlbigoKSA9PiBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBVU0VSX0FVVEgsXG4gICAgICBwYXlsb2FkOiB1c2VyXG4gICAgfSkpXG4gICAgLmNhdGNoKCgpID0+IHtcbiAgICAgIGNsZWFyU3RvcmVkVXNlcigpO1xuICAgIH0pXG4gICAgLnRoZW4oKCkgPT4ge1xuICAgICAgZGlzcGF0Y2goYXV0aENoZWNrZWQoKSk7XG4gICAgfSk7XG59OyIsImltcG9ydCAkJG9ic2VydmFibGUgZnJvbSAnc3ltYm9sLW9ic2VydmFibGUnO1xuXG4vKipcbiAqIFRoZXNlIGFyZSBwcml2YXRlIGFjdGlvbiB0eXBlcyByZXNlcnZlZCBieSBSZWR1eC5cbiAqIEZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB5b3UgbXVzdCByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBJZiB0aGUgY3VycmVudCBzdGF0ZSBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS5cbiAqIERvIG5vdCByZWZlcmVuY2UgdGhlc2UgYWN0aW9uIHR5cGVzIGRpcmVjdGx5IGluIHlvdXIgY29kZS5cbiAqL1xudmFyIEFjdGlvblR5cGVzID0ge1xuICBJTklUOiAnQEByZWR1eC9JTklUJyArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg3KS5zcGxpdCgnJykuam9pbignLicpLFxuICBSRVBMQUNFOiAnQEByZWR1eC9SRVBMQUNFJyArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg3KS5zcGxpdCgnJykuam9pbignLicpXG59O1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iajtcbn0gOiBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xufTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IG9iaiBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgYXJndW1lbnQgYXBwZWFycyB0byBiZSBhIHBsYWluIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcbiAgaWYgKCh0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihvYmopKSAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIHByb3RvID0gb2JqO1xuICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSAhPT0gbnVsbCkge1xuICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gcHJvdG87XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIFJlZHV4IHN0b3JlIHRoYXQgaG9sZHMgdGhlIHN0YXRlIHRyZWUuXG4gKiBUaGUgb25seSB3YXkgdG8gY2hhbmdlIHRoZSBkYXRhIGluIHRoZSBzdG9yZSBpcyB0byBjYWxsIGBkaXNwYXRjaCgpYCBvbiBpdC5cbiAqXG4gKiBUaGVyZSBzaG91bGQgb25seSBiZSBhIHNpbmdsZSBzdG9yZSBpbiB5b3VyIGFwcC4gVG8gc3BlY2lmeSBob3cgZGlmZmVyZW50XG4gKiBwYXJ0cyBvZiB0aGUgc3RhdGUgdHJlZSByZXNwb25kIHRvIGFjdGlvbnMsIHlvdSBtYXkgY29tYmluZSBzZXZlcmFsIHJlZHVjZXJzXG4gKiBpbnRvIGEgc2luZ2xlIHJlZHVjZXIgZnVuY3Rpb24gYnkgdXNpbmcgYGNvbWJpbmVSZWR1Y2Vyc2AuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVkdWNlciBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgbmV4dCBzdGF0ZSB0cmVlLCBnaXZlblxuICogdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGFjdGlvbiB0byBoYW5kbGUuXG4gKlxuICogQHBhcmFtIHthbnl9IFtwcmVsb2FkZWRTdGF0ZV0gVGhlIGluaXRpYWwgc3RhdGUuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBoeWRyYXRlIHRoZSBzdGF0ZSBmcm9tIHRoZSBzZXJ2ZXIgaW4gdW5pdmVyc2FsIGFwcHMsIG9yIHRvIHJlc3RvcmUgYVxuICogcHJldmlvdXNseSBzZXJpYWxpemVkIHVzZXIgc2Vzc2lvbi5cbiAqIElmIHlvdSB1c2UgYGNvbWJpbmVSZWR1Y2Vyc2AgdG8gcHJvZHVjZSB0aGUgcm9vdCByZWR1Y2VyIGZ1bmN0aW9uLCB0aGlzIG11c3QgYmVcbiAqIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlIGFzIGBjb21iaW5lUmVkdWNlcnNgIGtleXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2VuaGFuY2VyXSBUaGUgc3RvcmUgZW5oYW5jZXIuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBlbmhhbmNlIHRoZSBzdG9yZSB3aXRoIHRoaXJkLXBhcnR5IGNhcGFiaWxpdGllcyBzdWNoIGFzIG1pZGRsZXdhcmUsXG4gKiB0aW1lIHRyYXZlbCwgcGVyc2lzdGVuY2UsIGV0Yy4gVGhlIG9ubHkgc3RvcmUgZW5oYW5jZXIgdGhhdCBzaGlwcyB3aXRoIFJlZHV4XG4gKiBpcyBgYXBwbHlNaWRkbGV3YXJlKClgLlxuICpcbiAqIEByZXR1cm5zIHtTdG9yZX0gQSBSZWR1eCBzdG9yZSB0aGF0IGxldHMgeW91IHJlYWQgdGhlIHN0YXRlLCBkaXNwYXRjaCBhY3Rpb25zXG4gKiBhbmQgc3Vic2NyaWJlIHRvIGNoYW5nZXMuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcikge1xuICB2YXIgX3JlZjI7XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZW5oYW5jZXIgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgICBwcmVsb2FkZWRTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgZW5oYW5jZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW5oYW5jZXIoY3JlYXRlU3RvcmUpKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIHJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciBjdXJyZW50UmVkdWNlciA9IHJlZHVjZXI7XG4gIHZhciBjdXJyZW50U3RhdGUgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgdmFyIGN1cnJlbnRMaXN0ZW5lcnMgPSBbXTtcbiAgdmFyIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzO1xuICB2YXIgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKG5leHRMaXN0ZW5lcnMgPT09IGN1cnJlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzLnNsaWNlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBzdGF0ZSB0cmVlIG1hbmFnZWQgYnkgdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgY3VycmVudCBzdGF0ZSB0cmVlIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqL1xuICBmdW5jdGlvbiBnZXRTdGF0ZSgpIHtcbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLmdldFN0YXRlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1RoZSByZWR1Y2VyIGhhcyBhbHJlYWR5IHJlY2VpdmVkIHRoZSBzdGF0ZSBhcyBhbiBhcmd1bWVudC4gJyArICdQYXNzIGl0IGRvd24gZnJvbSB0aGUgdG9wIHJlZHVjZXIgaW5zdGVhZCBvZiByZWFkaW5nIGl0IGZyb20gdGhlIHN0b3JlLicpO1xuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50U3RhdGU7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIGNoYW5nZSBsaXN0ZW5lci4gSXQgd2lsbCBiZSBjYWxsZWQgYW55IHRpbWUgYW4gYWN0aW9uIGlzIGRpc3BhdGNoZWQsXG4gICAqIGFuZCBzb21lIHBhcnQgb2YgdGhlIHN0YXRlIHRyZWUgbWF5IHBvdGVudGlhbGx5IGhhdmUgY2hhbmdlZC4gWW91IG1heSB0aGVuXG4gICAqIGNhbGwgYGdldFN0YXRlKClgIHRvIHJlYWQgdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBpbnNpZGUgdGhlIGNhbGxiYWNrLlxuICAgKlxuICAgKiBZb3UgbWF5IGNhbGwgYGRpc3BhdGNoKClgIGZyb20gYSBjaGFuZ2UgbGlzdGVuZXIsIHdpdGggdGhlIGZvbGxvd2luZ1xuICAgKiBjYXZlYXRzOlxuICAgKlxuICAgKiAxLiBUaGUgc3Vic2NyaXB0aW9ucyBhcmUgc25hcHNob3R0ZWQganVzdCBiZWZvcmUgZXZlcnkgYGRpc3BhdGNoKClgIGNhbGwuXG4gICAqIElmIHlvdSBzdWJzY3JpYmUgb3IgdW5zdWJzY3JpYmUgd2hpbGUgdGhlIGxpc3RlbmVycyBhcmUgYmVpbmcgaW52b2tlZCwgdGhpc1xuICAgKiB3aWxsIG5vdCBoYXZlIGFueSBlZmZlY3Qgb24gdGhlIGBkaXNwYXRjaCgpYCB0aGF0IGlzIGN1cnJlbnRseSBpbiBwcm9ncmVzcy5cbiAgICogSG93ZXZlciwgdGhlIG5leHQgYGRpc3BhdGNoKClgIGNhbGwsIHdoZXRoZXIgbmVzdGVkIG9yIG5vdCwgd2lsbCB1c2UgYSBtb3JlXG4gICAqIHJlY2VudCBzbmFwc2hvdCBvZiB0aGUgc3Vic2NyaXB0aW9uIGxpc3QuXG4gICAqXG4gICAqIDIuIFRoZSBsaXN0ZW5lciBzaG91bGQgbm90IGV4cGVjdCB0byBzZWUgYWxsIHN0YXRlIGNoYW5nZXMsIGFzIHRoZSBzdGF0ZVxuICAgKiBtaWdodCBoYXZlIGJlZW4gdXBkYXRlZCBtdWx0aXBsZSB0aW1lcyBkdXJpbmcgYSBuZXN0ZWQgYGRpc3BhdGNoKClgIGJlZm9yZVxuICAgKiB0aGUgbGlzdGVuZXIgaXMgY2FsbGVkLiBJdCBpcywgaG93ZXZlciwgZ3VhcmFudGVlZCB0aGF0IGFsbCBzdWJzY3JpYmVyc1xuICAgKiByZWdpc3RlcmVkIGJlZm9yZSB0aGUgYGRpc3BhdGNoKClgIHN0YXJ0ZWQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgbGF0ZXN0XG4gICAqIHN0YXRlIGJ5IHRoZSB0aW1lIGl0IGV4aXRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBBIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgb24gZXZlcnkgZGlzcGF0Y2guXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0byByZW1vdmUgdGhpcyBjaGFuZ2UgbGlzdGVuZXIuXG4gICAqL1xuICBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuc3Vic2NyaWJlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ0lmIHlvdSB3b3VsZCBsaWtlIHRvIGJlIG5vdGlmaWVkIGFmdGVyIHRoZSBzdG9yZSBoYXMgYmVlbiB1cGRhdGVkLCBzdWJzY3JpYmUgZnJvbSBhICcgKyAnY29tcG9uZW50IGFuZCBpbnZva2Ugc3RvcmUuZ2V0U3RhdGUoKSBpbiB0aGUgY2FsbGJhY2sgdG8gYWNjZXNzIHRoZSBsYXRlc3Qgc3RhdGUuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlKGxpc3RlbmVyKSBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgIH1cblxuICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuXG4gICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgIG5leHRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICBpZiAoIWlzU3Vic2NyaWJlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgdW5zdWJzY3JpYmUgZnJvbSBhIHN0b3JlIGxpc3RlbmVyIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmUobGlzdGVuZXIpIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgICB9XG5cbiAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuXG4gICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgICB2YXIgaW5kZXggPSBuZXh0TGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbmV4dExpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRGlzcGF0Y2hlcyBhbiBhY3Rpb24uIEl0IGlzIHRoZSBvbmx5IHdheSB0byB0cmlnZ2VyIGEgc3RhdGUgY2hhbmdlLlxuICAgKlxuICAgKiBUaGUgYHJlZHVjZXJgIGZ1bmN0aW9uLCB1c2VkIHRvIGNyZWF0ZSB0aGUgc3RvcmUsIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlXG4gICAqIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGdpdmVuIGBhY3Rpb25gLiBJdHMgcmV0dXJuIHZhbHVlIHdpbGxcbiAgICogYmUgY29uc2lkZXJlZCB0aGUgKipuZXh0Kiogc3RhdGUgb2YgdGhlIHRyZWUsIGFuZCB0aGUgY2hhbmdlIGxpc3RlbmVyc1xuICAgKiB3aWxsIGJlIG5vdGlmaWVkLlxuICAgKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvbmx5IHN1cHBvcnRzIHBsYWluIG9iamVjdCBhY3Rpb25zLiBJZiB5b3Ugd2FudCB0b1xuICAgKiBkaXNwYXRjaCBhIFByb21pc2UsIGFuIE9ic2VydmFibGUsIGEgdGh1bmssIG9yIHNvbWV0aGluZyBlbHNlLCB5b3UgbmVlZCB0b1xuICAgKiB3cmFwIHlvdXIgc3RvcmUgY3JlYXRpbmcgZnVuY3Rpb24gaW50byB0aGUgY29ycmVzcG9uZGluZyBtaWRkbGV3YXJlLiBGb3JcbiAgICogZXhhbXBsZSwgc2VlIHRoZSBkb2N1bWVudGF0aW9uIGZvciB0aGUgYHJlZHV4LXRodW5rYCBwYWNrYWdlLiBFdmVuIHRoZVxuICAgKiBtaWRkbGV3YXJlIHdpbGwgZXZlbnR1YWxseSBkaXNwYXRjaCBwbGFpbiBvYmplY3QgYWN0aW9ucyB1c2luZyB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFjdGlvbiBBIHBsYWluIG9iamVjdCByZXByZXNlbnRpbmcg4oCcd2hhdCBjaGFuZ2Vk4oCdLiBJdCBpc1xuICAgKiBhIGdvb2QgaWRlYSB0byBrZWVwIGFjdGlvbnMgc2VyaWFsaXphYmxlIHNvIHlvdSBjYW4gcmVjb3JkIGFuZCByZXBsYXkgdXNlclxuICAgKiBzZXNzaW9ucywgb3IgdXNlIHRoZSB0aW1lIHRyYXZlbGxpbmcgYHJlZHV4LWRldnRvb2xzYC4gQW4gYWN0aW9uIG11c3QgaGF2ZVxuICAgKiBhIGB0eXBlYCBwcm9wZXJ0eSB3aGljaCBtYXkgbm90IGJlIGB1bmRlZmluZWRgLiBJdCBpcyBhIGdvb2QgaWRlYSB0byB1c2VcbiAgICogc3RyaW5nIGNvbnN0YW50cyBmb3IgYWN0aW9uIHR5cGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBGb3IgY29udmVuaWVuY2UsIHRoZSBzYW1lIGFjdGlvbiBvYmplY3QgeW91IGRpc3BhdGNoZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCwgaWYgeW91IHVzZSBhIGN1c3RvbSBtaWRkbGV3YXJlLCBpdCBtYXkgd3JhcCBgZGlzcGF0Y2goKWAgdG9cbiAgICogcmV0dXJuIHNvbWV0aGluZyBlbHNlIChmb3IgZXhhbXBsZSwgYSBQcm9taXNlIHlvdSBjYW4gYXdhaXQpLlxuICAgKi9cbiAgZnVuY3Rpb24gZGlzcGF0Y2goYWN0aW9uKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KGFjdGlvbikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtdXN0IGJlIHBsYWluIG9iamVjdHMuICcgKyAnVXNlIGN1c3RvbSBtaWRkbGV3YXJlIGZvciBhc3luYyBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYWN0aW9uLnR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbWF5IG5vdCBoYXZlIGFuIHVuZGVmaW5lZCBcInR5cGVcIiBwcm9wZXJ0eS4gJyArICdIYXZlIHlvdSBtaXNzcGVsbGVkIGEgY29uc3RhbnQ/Jyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVkdWNlcnMgbWF5IG5vdCBkaXNwYXRjaCBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gdHJ1ZTtcbiAgICAgIGN1cnJlbnRTdGF0ZSA9IGN1cnJlbnRSZWR1Y2VyKGN1cnJlbnRTdGF0ZSwgYWN0aW9uKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzID0gbmV4dExpc3RlbmVycztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJzW2ldO1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWN0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIHRoZSByZWR1Y2VyIGN1cnJlbnRseSB1c2VkIGJ5IHRoZSBzdG9yZSB0byBjYWxjdWxhdGUgdGhlIHN0YXRlLlxuICAgKlxuICAgKiBZb3UgbWlnaHQgbmVlZCB0aGlzIGlmIHlvdXIgYXBwIGltcGxlbWVudHMgY29kZSBzcGxpdHRpbmcgYW5kIHlvdSB3YW50IHRvXG4gICAqIGxvYWQgc29tZSBvZiB0aGUgcmVkdWNlcnMgZHluYW1pY2FsbHkuIFlvdSBtaWdodCBhbHNvIG5lZWQgdGhpcyBpZiB5b3VcbiAgICogaW1wbGVtZW50IGEgaG90IHJlbG9hZGluZyBtZWNoYW5pc20gZm9yIFJlZHV4LlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXh0UmVkdWNlciBUaGUgcmVkdWNlciBmb3IgdGhlIHN0b3JlIHRvIHVzZSBpbnN0ZWFkLlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBjdXJyZW50UmVkdWNlciA9IG5leHRSZWR1Y2VyO1xuICAgIGRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZXMuUkVQTEFDRSB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnRlcm9wZXJhYmlsaXR5IHBvaW50IGZvciBvYnNlcnZhYmxlL3JlYWN0aXZlIGxpYnJhcmllcy5cbiAgICogQHJldHVybnMge29ic2VydmFibGV9IEEgbWluaW1hbCBvYnNlcnZhYmxlIG9mIHN0YXRlIGNoYW5nZXMuXG4gICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIG9ic2VydmFibGUgcHJvcG9zYWw6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9ic2VydmFibGVcbiAgICovXG4gIGZ1bmN0aW9uIG9ic2VydmFibGUoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgb3V0ZXJTdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgcmV0dXJuIF9yZWYgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBtaW5pbWFsIG9ic2VydmFibGUgc3Vic2NyaXB0aW9uIG1ldGhvZC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYnNlcnZlciBBbnkgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgYXMgYW4gb2JzZXJ2ZXIuXG4gICAgICAgKiBUaGUgb2JzZXJ2ZXIgb2JqZWN0IHNob3VsZCBoYXZlIGEgYG5leHRgIG1ldGhvZC5cbiAgICAgICAqIEByZXR1cm5zIHtzdWJzY3JpcHRpb259IEFuIG9iamVjdCB3aXRoIGFuIGB1bnN1YnNjcmliZWAgbWV0aG9kIHRoYXQgY2FuXG4gICAgICAgKiBiZSB1c2VkIHRvIHVuc3Vic2NyaWJlIHRoZSBvYnNlcnZhYmxlIGZyb20gdGhlIHN0b3JlLCBhbmQgcHJldmVudCBmdXJ0aGVyXG4gICAgICAgKiBlbWlzc2lvbiBvZiB2YWx1ZXMgZnJvbSB0aGUgb2JzZXJ2YWJsZS5cbiAgICAgICAqL1xuICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKCh0eXBlb2Ygb2JzZXJ2ZXIgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG9ic2VydmVyKSkgIT09ICdvYmplY3QnIHx8IG9ic2VydmVyID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgdGhlIG9ic2VydmVyIHRvIGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9ic2VydmVTdGF0ZSgpIHtcbiAgICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChnZXRTdGF0ZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvYnNlcnZlU3RhdGUoKTtcbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gb3V0ZXJTdWJzY3JpYmUob2JzZXJ2ZVN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHsgdW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlIH07XG4gICAgICB9XG4gICAgfSwgX3JlZlskJG9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSwgX3JlZjtcbiAgfVxuXG4gIC8vIFdoZW4gYSBzdG9yZSBpcyBjcmVhdGVkLCBhbiBcIklOSVRcIiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCBzbyB0aGF0IGV2ZXJ5XG4gIC8vIHJlZHVjZXIgcmV0dXJucyB0aGVpciBpbml0aWFsIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAvLyB0aGUgaW5pdGlhbCBzdGF0ZSB0cmVlLlxuICBkaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGVzLklOSVQgfSk7XG5cbiAgcmV0dXJuIF9yZWYyID0ge1xuICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcbiAgICBzdWJzY3JpYmU6IHN1YnNjcmliZSxcbiAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgcmVwbGFjZVJlZHVjZXI6IHJlcGxhY2VSZWR1Y2VyXG4gIH0sIF9yZWYyWyQkb2JzZXJ2YWJsZV0gPSBvYnNlcnZhYmxlLCBfcmVmMjtcbn1cblxuLyoqXG4gKiBQcmludHMgYSB3YXJuaW5nIGluIHRoZSBjb25zb2xlIGlmIGl0IGV4aXN0cy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBUaGUgd2FybmluZyBtZXNzYWdlLlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHdhcm5pbmcobWVzc2FnZSkge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICB9XG4gIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuICB0cnkge1xuICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgaWYgeW91IGVuYWJsZVxuICAgIC8vIFwiYnJlYWsgb24gYWxsIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIGNvbnNvbGUsXG4gICAgLy8gaXQgd291bGQgcGF1c2UgdGhlIGV4ZWN1dGlvbiBhdCB0aGlzIGxpbmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9IGNhdGNoIChlKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG59XG5cbmZ1bmN0aW9uIGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKGtleSwgYWN0aW9uKSB7XG4gIHZhciBhY3Rpb25UeXBlID0gYWN0aW9uICYmIGFjdGlvbi50eXBlO1xuICB2YXIgYWN0aW9uRGVzY3JpcHRpb24gPSBhY3Rpb25UeXBlICYmICdhY3Rpb24gXCInICsgU3RyaW5nKGFjdGlvblR5cGUpICsgJ1wiJyB8fCAnYW4gYWN0aW9uJztcblxuICByZXR1cm4gJ0dpdmVuICcgKyBhY3Rpb25EZXNjcmlwdGlvbiArICcsIHJlZHVjZXIgXCInICsga2V5ICsgJ1wiIHJldHVybmVkIHVuZGVmaW5lZC4gJyArICdUbyBpZ25vcmUgYW4gYWN0aW9uLCB5b3UgbXVzdCBleHBsaWNpdGx5IHJldHVybiB0aGUgcHJldmlvdXMgc3RhdGUuICcgKyAnSWYgeW91IHdhbnQgdGhpcyByZWR1Y2VyIHRvIGhvbGQgbm8gdmFsdWUsIHlvdSBjYW4gcmV0dXJuIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuJztcbn1cblxuZnVuY3Rpb24gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShpbnB1dFN0YXRlLCByZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgYXJndW1lbnROYW1lID0gYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5JTklUID8gJ3ByZWxvYWRlZFN0YXRlIGFyZ3VtZW50IHBhc3NlZCB0byBjcmVhdGVTdG9yZScgOiAncHJldmlvdXMgc3RhdGUgcmVjZWl2ZWQgYnkgdGhlIHJlZHVjZXInO1xuXG4gIGlmIChyZWR1Y2VyS2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJ1N0b3JlIGRvZXMgbm90IGhhdmUgYSB2YWxpZCByZWR1Y2VyLiBNYWtlIHN1cmUgdGhlIGFyZ3VtZW50IHBhc3NlZCAnICsgJ3RvIGNvbWJpbmVSZWR1Y2VycyBpcyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSByZWR1Y2Vycy4nO1xuICB9XG5cbiAgaWYgKCFpc1BsYWluT2JqZWN0KGlucHV0U3RhdGUpKSB7XG4gICAgcmV0dXJuICdUaGUgJyArIGFyZ3VtZW50TmFtZSArICcgaGFzIHVuZXhwZWN0ZWQgdHlwZSBvZiBcIicgKyB7fS50b1N0cmluZy5jYWxsKGlucHV0U3RhdGUpLm1hdGNoKC9cXHMoW2EtenxBLVpdKykvKVsxXSArICdcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyAnICsgKCdrZXlzOiBcIicgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArICdcIicpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcblxuICB1bmV4cGVjdGVkS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XSA9IHRydWU7XG4gIH0pO1xuXG4gIGlmIChhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLlJFUExBQ0UpIHJldHVybjtcblxuICBpZiAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiAnVW5leHBlY3RlZCAnICsgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDEgPyAna2V5cycgOiAna2V5JykgKyAnICcgKyAoJ1wiJyArIHVuZXhwZWN0ZWRLZXlzLmpvaW4oJ1wiLCBcIicpICsgJ1wiIGZvdW5kIGluICcgKyBhcmd1bWVudE5hbWUgKyAnLiAnKSArICdFeHBlY3RlZCB0byBmaW5kIG9uZSBvZiB0aGUga25vd24gcmVkdWNlciBrZXlzIGluc3RlYWQ6ICcgKyAoJ1wiJyArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgJ1wiLiBVbmV4cGVjdGVkIGtleXMgd2lsbCBiZSBpZ25vcmVkLicpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFJlZHVjZXJTaGFwZShyZWR1Y2Vycykge1xuICBPYmplY3Qua2V5cyhyZWR1Y2VycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHJlZHVjZXIgPSByZWR1Y2Vyc1trZXldO1xuICAgIHZhciBpbml0aWFsU3RhdGUgPSByZWR1Y2VyKHVuZGVmaW5lZCwgeyB0eXBlOiBBY3Rpb25UeXBlcy5JTklUIH0pO1xuXG4gICAgaWYgKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXIgXCInICsga2V5ICsgJ1wiIHJldHVybmVkIHVuZGVmaW5lZCBkdXJpbmcgaW5pdGlhbGl6YXRpb24uICcgKyAnSWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGUgcmVkdWNlciBpcyB1bmRlZmluZWQsIHlvdSBtdXN0ICcgKyAnZXhwbGljaXRseSByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSAnICsgJ25vdCBiZSB1bmRlZmluZWQuIElmIHlvdSBkb25cXCd0IHdhbnQgdG8gc2V0IGEgdmFsdWUgZm9yIHRoaXMgcmVkdWNlciwgJyArICd5b3UgY2FuIHVzZSBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLicpO1xuICAgIH1cblxuICAgIHZhciB0eXBlID0gJ0BAcmVkdXgvUFJPQkVfVU5LTk9XTl9BQ1RJT05fJyArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg3KS5zcGxpdCgnJykuam9pbignLicpO1xuICAgIGlmICh0eXBlb2YgcmVkdWNlcih1bmRlZmluZWQsIHsgdHlwZTogdHlwZSB9KSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVkdWNlciBcIicgKyBrZXkgKyAnXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gJyArICgnRG9uXFwndCB0cnkgdG8gaGFuZGxlICcgKyBBY3Rpb25UeXBlcy5JTklUICsgJyBvciBvdGhlciBhY3Rpb25zIGluIFwicmVkdXgvKlwiICcpICsgJ25hbWVzcGFjZS4gVGhleSBhcmUgY29uc2lkZXJlZCBwcml2YXRlLiBJbnN0ZWFkLCB5b3UgbXVzdCByZXR1cm4gdGhlICcgKyAnY3VycmVudCBzdGF0ZSBmb3IgYW55IHVua25vd24gYWN0aW9ucywgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgJyArICdpbiB3aGljaCBjYXNlIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZSwgcmVnYXJkbGVzcyBvZiB0aGUgJyArICdhY3Rpb24gdHlwZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IG5vdCBiZSB1bmRlZmluZWQsIGJ1dCBjYW4gYmUgbnVsbC4nKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGRpZmZlcmVudCByZWR1Y2VyIGZ1bmN0aW9ucywgaW50byBhIHNpbmdsZVxuICogcmVkdWNlciBmdW5jdGlvbi4gSXQgd2lsbCBjYWxsIGV2ZXJ5IGNoaWxkIHJlZHVjZXIsIGFuZCBnYXRoZXIgdGhlaXIgcmVzdWx0c1xuICogaW50byBhIHNpbmdsZSBzdGF0ZSBvYmplY3QsIHdob3NlIGtleXMgY29ycmVzcG9uZCB0byB0aGUga2V5cyBvZiB0aGUgcGFzc2VkXG4gKiByZWR1Y2VyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVkdWNlcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBjb3JyZXNwb25kIHRvIGRpZmZlcmVudFxuICogcmVkdWNlciBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNvbWJpbmVkIGludG8gb25lLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpblxuICogaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXMgcmVkdWNlcnNgIHN5bnRheC4gVGhlIHJlZHVjZXJzIG1heSBuZXZlciByZXR1cm5cbiAqIHVuZGVmaW5lZCBmb3IgYW55IGFjdGlvbi4gSW5zdGVhZCwgdGhleSBzaG91bGQgcmV0dXJuIHRoZWlyIGluaXRpYWwgc3RhdGVcbiAqIGlmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlbSB3YXMgdW5kZWZpbmVkLCBhbmQgdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueVxuICogdW5yZWNvZ25pemVkIGFjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgcmVkdWNlciBmdW5jdGlvbiB0aGF0IGludm9rZXMgZXZlcnkgcmVkdWNlciBpbnNpZGUgdGhlXG4gKiBwYXNzZWQgb2JqZWN0LCBhbmQgYnVpbGRzIGEgc3RhdGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUuXG4gKi9cbmZ1bmN0aW9uIGNvbWJpbmVSZWR1Y2VycyhyZWR1Y2Vycykge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBmaW5hbFJlZHVjZXJzID0ge307XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gcmVkdWNlcktleXNbaV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3YXJuaW5nKCdObyByZWR1Y2VyIHByb3ZpZGVkIGZvciBrZXkgXCInICsga2V5ICsgJ1wiJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmaW5hbFJlZHVjZXJzW2tleV0gPSByZWR1Y2Vyc1trZXldO1xuICAgIH1cbiAgfVxuICB2YXIgZmluYWxSZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKGZpbmFsUmVkdWNlcnMpO1xuXG4gIHZhciB1bmV4cGVjdGVkS2V5Q2FjaGUgPSB2b2lkIDA7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlID0ge307XG4gIH1cblxuICB2YXIgc2hhcGVBc3NlcnRpb25FcnJvciA9IHZvaWQgMDtcbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbigpIHtcbiAgICB2YXIgc3RhdGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIHZhciBhY3Rpb24gPSBhcmd1bWVudHNbMV07XG5cbiAgICBpZiAoc2hhcGVBc3NlcnRpb25FcnJvcikge1xuICAgICAgdGhyb3cgc2hhcGVBc3NlcnRpb25FcnJvcjtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIHdhcm5pbmdNZXNzYWdlID0gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShzdGF0ZSwgZmluYWxSZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpO1xuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9rZXkgPSBmaW5hbFJlZHVjZXJLZXlzW19pXTtcbiAgICAgIHZhciByZWR1Y2VyID0gZmluYWxSZWR1Y2Vyc1tfa2V5XTtcbiAgICAgIHZhciBwcmV2aW91c1N0YXRlRm9yS2V5ID0gc3RhdGVbX2tleV07XG4gICAgICB2YXIgbmV4dFN0YXRlRm9yS2V5ID0gcmVkdWNlcihwcmV2aW91c1N0YXRlRm9yS2V5LCBhY3Rpb24pO1xuICAgICAgaWYgKHR5cGVvZiBuZXh0U3RhdGVGb3JLZXkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShfa2V5LCBhY3Rpb24pO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICAgIH1cbiAgICAgIG5leHRTdGF0ZVtfa2V5XSA9IG5leHRTdGF0ZUZvcktleTtcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IG5leHRTdGF0ZUZvcktleSAhPT0gcHJldmlvdXNTdGF0ZUZvcktleTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc0NoYW5nZWQgPyBuZXh0U3RhdGUgOiBzdGF0ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb24gY3JlYXRvcnMsIGludG8gYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBzYW1lIGtleXMsIGJ1dCB3aXRoIGV2ZXJ5IGZ1bmN0aW9uIHdyYXBwZWQgaW50byBhIGBkaXNwYXRjaGAgY2FsbCBzbyB0aGV5XG4gKiBtYXkgYmUgaW52b2tlZCBkaXJlY3RseS4gVGhpcyBpcyBqdXN0IGEgY29udmVuaWVuY2UgbWV0aG9kLCBhcyB5b3UgY2FuIGNhbGxcbiAqIGBzdG9yZS5kaXNwYXRjaChNeUFjdGlvbkNyZWF0b3JzLmRvU29tZXRoaW5nKCkpYCB5b3Vyc2VsZiBqdXN0IGZpbmUuXG4gKlxuICogRm9yIGNvbnZlbmllbmNlLCB5b3UgY2FuIGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQsXG4gKiBhbmQgZ2V0IGEgZnVuY3Rpb24gaW4gcmV0dXJuLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBhY3Rpb25DcmVhdG9ycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb25cbiAqIGNyZWF0b3IgZnVuY3Rpb25zLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpbiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhc2BcbiAqIHN5bnRheC4gWW91IG1heSBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZGlzcGF0Y2ggVGhlIGBkaXNwYXRjaGAgZnVuY3Rpb24gYXZhaWxhYmxlIG9uIHlvdXIgUmVkdXhcbiAqIHN0b3JlLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFRoZSBvYmplY3QgbWltaWNraW5nIHRoZSBvcmlnaW5hbCBvYmplY3QsIGJ1dCB3aXRoXG4gKiBldmVyeSBhY3Rpb24gY3JlYXRvciB3cmFwcGVkIGludG8gdGhlIGBkaXNwYXRjaGAgY2FsbC4gSWYgeW91IHBhc3NlZCBhXG4gKiBmdW5jdGlvbiBhcyBgYWN0aW9uQ3JlYXRvcnNgLCB0aGUgcmV0dXJuIHZhbHVlIHdpbGwgYWxzbyBiZSBhIHNpbmdsZVxuICogZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9ycyhhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpO1xuICB9XG5cbiAgaWYgKCh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGFjdGlvbkNyZWF0b3JzKSkgIT09ICdvYmplY3QnIHx8IGFjdGlvbkNyZWF0b3JzID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdiaW5kQWN0aW9uQ3JlYXRvcnMgZXhwZWN0ZWQgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24sIGluc3RlYWQgcmVjZWl2ZWQgJyArIChhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYWN0aW9uQ3JlYXRvcnMpKSArICcuICcgKyAnRGlkIHlvdSB3cml0ZSBcImltcG9ydCBBY3Rpb25DcmVhdG9ycyBmcm9tXCIgaW5zdGVhZCBvZiBcImltcG9ydCAqIGFzIEFjdGlvbkNyZWF0b3JzIGZyb21cIj8nKTtcbiAgfVxuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWN0aW9uQ3JlYXRvcnMpO1xuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICB2YXIgYWN0aW9uQ3JlYXRvciA9IGFjdGlvbkNyZWF0b3JzW2tleV07XG4gICAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBib3VuZEFjdGlvbkNyZWF0b3JzW2tleV0gPSBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufVxuXG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5cbmZ1bmN0aW9uIGNvbXBvc2UoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmNzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGZ1bmNzWzBdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmNzLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYShiLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0b3JlIGVuaGFuY2VyIHRoYXQgYXBwbGllcyBtaWRkbGV3YXJlIHRvIHRoZSBkaXNwYXRjaCBtZXRob2RcbiAqIG9mIHRoZSBSZWR1eCBzdG9yZS4gVGhpcyBpcyBoYW5keSBmb3IgYSB2YXJpZXR5IG9mIHRhc2tzLCBzdWNoIGFzIGV4cHJlc3NpbmdcbiAqIGFzeW5jaHJvbm91cyBhY3Rpb25zIGluIGEgY29uY2lzZSBtYW5uZXIsIG9yIGxvZ2dpbmcgZXZlcnkgYWN0aW9uIHBheWxvYWQuXG4gKlxuICogU2VlIGByZWR1eC10aHVua2AgcGFja2FnZSBhcyBhbiBleGFtcGxlIG9mIHRoZSBSZWR1eCBtaWRkbGV3YXJlLlxuICpcbiAqIEJlY2F1c2UgbWlkZGxld2FyZSBpcyBwb3RlbnRpYWxseSBhc3luY2hyb25vdXMsIHRoaXMgc2hvdWxkIGJlIHRoZSBmaXJzdFxuICogc3RvcmUgZW5oYW5jZXIgaW4gdGhlIGNvbXBvc2l0aW9uIGNoYWluLlxuICpcbiAqIE5vdGUgdGhhdCBlYWNoIG1pZGRsZXdhcmUgd2lsbCBiZSBnaXZlbiB0aGUgYGRpc3BhdGNoYCBhbmQgYGdldFN0YXRlYCBmdW5jdGlvbnNcbiAqIGFzIG5hbWVkIGFyZ3VtZW50cy5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBtaWRkbGV3YXJlcyBUaGUgbWlkZGxld2FyZSBjaGFpbiB0byBiZSBhcHBsaWVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHN0b3JlIGVuaGFuY2VyIGFwcGx5aW5nIHRoZSBtaWRkbGV3YXJlLlxuICovXG5mdW5jdGlvbiBhcHBseU1pZGRsZXdhcmUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBtaWRkbGV3YXJlcyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIG1pZGRsZXdhcmVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChjcmVhdGVTdG9yZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICB2YXIgX2Rpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRGlzcGF0Y2hpbmcgd2hpbGUgY29uc3RydWN0aW5nIHlvdXIgbWlkZGxld2FyZSBpcyBub3QgYWxsb3dlZC4gJyArICdPdGhlciBtaWRkbGV3YXJlIHdvdWxkIG5vdCBiZSBhcHBsaWVkIHRvIHRoaXMgZGlzcGF0Y2guJyk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbWlkZGxld2FyZUFQSSA9IHtcbiAgICAgICAgZ2V0U3RhdGU6IHN0b3JlLmdldFN0YXRlLFxuICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgICAgcmV0dXJuIF9kaXNwYXRjaC5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgY2hhaW4gPSBtaWRkbGV3YXJlcy5tYXAoZnVuY3Rpb24gKG1pZGRsZXdhcmUpIHtcbiAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmUobWlkZGxld2FyZUFQSSk7XG4gICAgICB9KTtcbiAgICAgIF9kaXNwYXRjaCA9IGNvbXBvc2UuYXBwbHkodW5kZWZpbmVkLCBjaGFpbikoc3RvcmUuZGlzcGF0Y2gpO1xuXG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0b3JlLCB7XG4gICAgICAgIGRpc3BhdGNoOiBfZGlzcGF0Y2hcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59XG5cbi8qXG4gKiBUaGlzIGlzIGEgZHVtbXkgZnVuY3Rpb24gdG8gY2hlY2sgaWYgdGhlIGZ1bmN0aW9uIG5hbWUgaGFzIGJlZW4gYWx0ZXJlZCBieSBtaW5pZmljYXRpb24uXG4gKiBJZiB0aGUgZnVuY3Rpb24gaGFzIGJlZW4gbWluaWZpZWQgYW5kIE5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsIHdhcm4gdGhlIHVzZXIuXG4gKi9cbmZ1bmN0aW9uIGlzQ3J1c2hlZCgpIHt9XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBpc0NydXNoZWQubmFtZSA9PT0gJ3N0cmluZycgJiYgaXNDcnVzaGVkLm5hbWUgIT09ICdpc0NydXNoZWQnKSB7XG4gIHdhcm5pbmcoXCJZb3UgYXJlIGN1cnJlbnRseSB1c2luZyBtaW5pZmllZCBjb2RlIG91dHNpZGUgb2YgTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJy4gXCIgKyAnVGhpcyBtZWFucyB0aGF0IHlvdSBhcmUgcnVubmluZyBhIHNsb3dlciBkZXZlbG9wbWVudCBidWlsZCBvZiBSZWR1eC4gJyArICdZb3UgY2FuIHVzZSBsb29zZS1lbnZpZnkgKGh0dHBzOi8vZ2l0aHViLmNvbS96ZXJ0b3NoL2xvb3NlLWVudmlmeSkgZm9yIGJyb3dzZXJpZnkgJyArICdvciBEZWZpbmVQbHVnaW4gZm9yIHdlYnBhY2sgKGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzAwMzAwMzEpICcgKyAndG8gZW5zdXJlIHlvdSBoYXZlIHRoZSBjb3JyZWN0IGNvZGUgZm9yIHlvdXIgcHJvZHVjdGlvbiBidWlsZC4nKTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlU3RvcmUsIGNvbWJpbmVSZWR1Y2VycywgYmluZEFjdGlvbkNyZWF0b3JzLCBhcHBseU1pZGRsZXdhcmUsIGNvbXBvc2UsIEFjdGlvblR5cGVzIGFzIF9fRE9fTk9UX1VTRV9fQWN0aW9uVHlwZXMgfTtcbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbmltcG9ydCBwb255ZmlsbCBmcm9tICcuL3BvbnlmaWxsLmpzJztcblxudmFyIHJvb3Q7XG5cbmlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHNlbGY7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBtb2R1bGU7XG59IGVsc2Uge1xuICByb290ID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbn1cblxudmFyIHJlc3VsdCA9IHBvbnlmaWxsKHJvb3QpO1xuZXhwb3J0IGRlZmF1bHQgcmVzdWx0O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgZ2V0VXNlciB9IGZyb20gJy4uL2F1dGgvcmVkdWNlcnMnO1xuaW1wb3J0IHsgUm91dGUsIFJlZGlyZWN0IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5cbmNvbnN0IFByaXZhdGVSb3V0ZSA9ICh7IHVzZXIsIGNvbXBvbmVudDogQ29tcG9uZW50LCByZW5kZXIsIC4uLnJlc3QgfSkgPT4ge1xuICBcbiAgcmV0dXJuIDxSb3V0ZSB7Li4ucmVzdH0gcmVuZGVyPXtwcm9wcyA9PiB7XG4gICAgaWYoIXVzZXIpIHJldHVybiA8UmVkaXJlY3RcbiAgICAgIHRvPXt7XG4gICAgICAgIHBhdGhuYW1lOiAnL2F1dGgvc2lnbmluJyxcbiAgICAgICAgc3RhdGU6IHsgZnJvbTogcHJvcHMubG9jYXRpb24ucGF0aG5hbWUgfVxuICAgICAgfX1cbiAgICAvPjtcblxuICAgIGlmKENvbXBvbmVudCkgcmV0dXJuIDxDb21wb25lbnQgey4uLnByb3BzfS8+O1xuICAgIGlmKHJlbmRlcikgcmV0dXJuIHJlbmRlcihwcm9wcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH19Lz47XG59O1xuXG5Qcml2YXRlUm91dGUucHJvdG9UeXBlcyA9IHtcbiAgdXNlcjogUHJvcFR5cGVzLm9iamVjdCxcbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZnVuYyxcbiAgcmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3Rcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoXG4gIHN0YXRlID0+ICh7IHVzZXI6IGdldFVzZXIoc3RhdGUpIH0pLFxuICBudWxsXG4pKFByaXZhdGVSb3V0ZSk7IiwiaW1wb3J0IHsgZ2V0LCBwb3N0IH0gZnJvbSAnLi9yZXF1ZXN0JztcblxuY29uc3QgVVJMID0gJy9hcGknO1xuY29uc3QgQUxCVU1TX1VSTCA9IGAke1VSTH0vYWxidW1zYDtcbmNvbnN0IElNQUdFU19VUkwgPSBgJHtVUkx9L2ltYWdlc2A7XG5jb25zdCBBVVRIX1VSTCA9IGAke1VSTH0vYXV0aGA7XG5cbmV4cG9ydCBjb25zdCBnZXRBbGxBbGJ1bXMgPSAoKSA9PiBnZXQoQUxCVU1TX1VSTCk7XG5leHBvcnQgY29uc3QgcG9zdEFsYnVtID0gYWxidW0gPT4gcG9zdChBTEJVTVNfVVJMLCBhbGJ1bSk7XG5leHBvcnQgY29uc3QgZ2V0QWxsSW1hZ2VzID0gKCkgPT4gZ2V0KElNQUdFU19VUkwpO1xuZXhwb3J0IGNvbnN0IGdldEltYWdlc0J5QWxidW0gPSBpZCA9PiBnZXQoYCR7SU1BR0VTX1VSTH0/YWxidW1JZD0ke2lkfWApO1xuZXhwb3J0IGNvbnN0IHBvc3RJbWFnZSA9IGltYWdlID0+IHBvc3QoSU1BR0VTX1VSTCwgaW1hZ2UpO1xuXG5leHBvcnQgY29uc3Qgc2lnbmluID0gY3JlZGVudGlhbHMgPT4gcG9zdChgJHtBVVRIX1VSTH0vc2lnbmluYCwgY3JlZGVudGlhbHMpO1xuZXhwb3J0IGNvbnN0IHNpZ251cCA9IGNyZWRlbnRpYWxzID0+IHBvc3QoYCR7QVVUSF9VUkx9L3NpZ251cGAsIGNyZWRlbnRpYWxzKTtcblxuZXhwb3J0IGNvbnN0IHZlcmlmeVVzZXIgPSB0b2tlbiA9PiBnZXQoYCR7QVVUSF9VUkx9L3ZlcmlmeWAsIHtcbiAgaGVhZGVyOiB7XG4gICAgQXV0aG9yaXphdGlvbjogdG9rZW5cbiAgfVxufSk7IiwiZXhwb3J0IGNvbnN0IEVSUk9SID0gJ0VSUk9SJztcbmV4cG9ydCBjb25zdCBFUlJPUl9DTEVBUiA9ICdFUlJPUl9DTEVBUic7XG5leHBvcnQgY29uc3QgTE9BRElOR19TVEFSVCA9ICdMT0FESU5HX1NUQVJUJztcbmV4cG9ydCBjb25zdCBMT0FESU5HX0VORCA9ICdMT0FESU5HX0VORCc7XG5cbmV4cG9ydCBjb25zdCBnZXRFcnJvciA9IHN0YXRlID0+IHN0YXRlLmVycm9yO1xuZXhwb3J0IGNvbnN0IGdldExvYWRpbmcgPSBzdGF0ZSA9PiBzdGF0ZS5sb2FkaW5nO1xuXG5leHBvcnQgZnVuY3Rpb24gZXJyb3Ioc3RhdGUgPSBudWxsLCB7IHR5cGUsIHBheWxvYWQgfSkge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIEVSUk9SOlxuICAgICAgcmV0dXJuIHBheWxvYWQ7XG4gICAgY2FzZSBFUlJPUl9DTEVBUjpcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRpbmcoc3RhdGUgPSBmYWxzZSwgeyB0eXBlIH0pIHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBMT0FESU5HX1NUQVJUOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgY2FzZSBMT0FESU5HX0VORDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59IiwiaW1wb3J0IHsgY3JlYXRlU3RvcmUsIGNvbWJpbmVSZWR1Y2VycywgYXBwbHlNaWRkbGV3YXJlLCBjb21wb3NlIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHRodW5rIGZyb20gJ3JlZHV4LXRodW5rJztcbmltcG9ydCBwcm9taXNlTWlkZGxld2FyZSBmcm9tICcuL3Byb21pc2UtbWlkZGxld2FyZSc7XG5pbXBvcnQgeyBlcnJvciwgbG9hZGluZyB9IGZyb20gJy4uL2NvbXBvbmVudHMvYXBwL3JlZHVjZXJzJztcbmltcG9ydCB7IHVzZXIsIGNoZWNrZWRBdXRoIH0gZnJvbSAnLi4vY29tcG9uZW50cy9hdXRoL3JlZHVjZXJzJztcbmltcG9ydCB7IGFsYnVtcywgYWxidW0sIGltYWdlcyB9IGZyb20gJy4uL2NvbXBvbmVudHMvYWxidW1zL3JlZHVjZXJzJztcblxuY29uc3Qgcm9vdFJlZHVjZXIgPSBjb21iaW5lUmVkdWNlcnMoe1xuICBhbGJ1bXMsXG4gIGFsYnVtLFxuICBpbWFnZXMsXG4gIHVzZXIsXG4gIGVycm9yLFxuICBsb2FkaW5nLFxuICBjaGVja2VkQXV0aFxufSk7XG5cbmNvbnN0IGNvbXBvc2VFbmhhbmNlcnMgPSB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fIHx8IGNvbXBvc2U7XG5cbmNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUoXG4gIHJvb3RSZWR1Y2VyLFxuICBjb21wb3NlRW5oYW5jZXJzKFxuICAgIGFwcGx5TWlkZGxld2FyZShcbiAgICAgIHRodW5rLFxuICAgICAgcHJvbWlzZU1pZGRsZXdhcmVcbiAgICApXG4gIClcbik7XG5cbmV4cG9ydCBkZWZhdWx0IHN0b3JlOyIsImltcG9ydCBzdG9yZSBmcm9tICcuLi9zdG9yZS9zdG9yZSc7XG5pbXBvcnQgeyBnZXRVc2VyIH0gZnJvbSAnLi4vY29tcG9uZW50cy9hdXRoL3JlZHVjZXJzJztcblxubGV0IHRva2VuID0gJyc7XG5cbmNvbnN0IGtleSA9ICd1c2VyJztcbmNvbnN0IHN0b3JhZ2UgPSB3aW5kb3cubG9jYWxTdG9yYWdlO1xuXG5zdG9yZS5zdWJzY3JpYmUoKCkgPT4ge1xuICBjb25zdCB1c2VyID0gZ2V0VXNlcihzdG9yZS5nZXRTdGF0ZSgpKTtcbiAgY29uc3QgbmV4dFRva2VuID0gdXNlciA/ICh1c2VyLnRva2VuIHx8ICcnKSA6ICcnO1xuICBpZihuZXh0VG9rZW4gPT09IHRva2VuKSByZXR1cm47XG5cbiAgdG9rZW4gPSBuZXh0VG9rZW47XG4gIHRva2VuID8gc3RvcmFnZS5zZXRJdGVtKGtleSwgSlNPTi5zdHJpbmdpZnkodXNlcikpIDogY2xlYXJTdG9yZWRVc2VyKCk7XG59KTtcblxuZXhwb3J0IGNvbnN0IGdldFN0b3JlZFVzZXIgPSAoKSA9PiB7XG4gIGNvbnN0IGpzb24gPSBzdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShqc29uKTtcbiAgfVxuICBjYXRjaChlcnIpIHtcbiAgICBjbGVhclN0b3JlZFVzZXIoKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGNsZWFyU3RvcmVkVXNlciA9ICgpID0+IHN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuXG5mdW5jdGlvbiByZXF1ZXN0KHVybCwgb3B0aW9ucyA9IHt9LCBkYXRhKSB7XG4gIGlmKGRhdGEpIG9wdGlvbnMuYm9keSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICBpZih0b2tlbikge1xuICAgIGlmKCFvcHRpb25zLmhlYWRlcnMpIG9wdGlvbnMuaGVhZGVycyA9IHt9O1xuICAgIG9wdGlvbnMuaGVhZGVycy5BdXRob3JpemF0aW9uID0gdG9rZW47XG4gIH1cbiAgcmV0dXJuIGZldGNoKHVybCwgb3B0aW9ucylcbiAgICAudGhlbihyZXNwb25zZSA9PiBbcmVzcG9uc2Uub2ssIHJlc3BvbnNlLmpzb24oKV0pXG4gICAgLnRoZW4oKFtvaywganNvbl0pID0+IHtcbiAgICAgIGlmKG9rKSByZXR1cm4ganNvbjtcbiAgICAgIHRocm93IGpzb24ubWVzc2FnZSB8fCBqc29uLmVycm9yIHx8IGpzb24uZXJyb3JzIHx8IGpzb247XG4gICAgfSk7XG59XG5cbmNvbnN0IGhlYWRlcnMgPSB7XG4gICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbn07XG5cbmV4cG9ydCBjb25zdCBnZXQgPSAodXJsLCBvcHRpb25zID0ge30pID0+IHJlcXVlc3QodXJsLCB7IG1ldGhvZDogJ0dFVCcsIC4uLm9wdGlvbnMgfSk7XG5leHBvcnQgY29uc3QgcG9zdCA9ICh1cmwsIGRhdGEpID0+IHJlcXVlc3QodXJsLCB7IG1ldGhvZDogJ1BPU1QnLCBoZWFkZXJzIH0sIGRhdGEpO1xuZXhwb3J0IGNvbnN0IHB1dCA9ICh1cmwsIGRhdGEpID0+IHJlcXVlc3QodXJsLCB7IG1ldGhvZDogJ1BVVCcsIGhlYWRlcnMgfSwgZGF0YSk7XG5leHBvcnQgY29uc3QgZGVsID0gKHVybCwgZGF0YSkgPT4gcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAnREVMRVRFJywgaGVhZGVycyB9LCBkYXRhKTsiLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuZnVuY3Rpb24gbWFrZUVtcHR5RnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGFyZztcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgYW5kIGRpc2NhcmRzIGlucHV0czsgaXQgaGFzIG5vIHNpZGUgZWZmZWN0cy4gVGhpcyBpc1xuICogcHJpbWFyaWx5IHVzZWZ1bCBpZGlvbWF0aWNhbGx5IGZvciBvdmVycmlkYWJsZSBmdW5jdGlvbiBlbmRwb2ludHMgd2hpY2hcbiAqIGFsd2F5cyBuZWVkIHRvIGJlIGNhbGxhYmxlLCBzaW5jZSBKUyBsYWNrcyBhIG51bGwtY2FsbCBpZGlvbSBhbGEgQ29jb2EuXG4gKi9cbnZhciBlbXB0eUZ1bmN0aW9uID0gZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9O1xuXG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zID0gbWFrZUVtcHR5RnVuY3Rpb247XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2UgPSBtYWtlRW1wdHlGdW5jdGlvbihmYWxzZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKHRydWUpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwgPSBtYWtlRW1wdHlGdW5jdGlvbihudWxsKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUaGlzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcztcbn07XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQgPSBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiBhcmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5RnVuY3Rpb247IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlPYmplY3QgPSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgT2JqZWN0LmZyZWV6ZShlbXB0eU9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlPYmplY3Q7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCk7XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcignTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50OyIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuZXhwb3J0IGRlZmF1bHQgZnJlZUdsb2JhbDtcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSh0cnVlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi8qISBub3JtYWxpemUuY3NzIHY4LjAuMCB8IE1JVCBMaWNlbnNlIHwgZ2l0aHViLmNvbS9uZWNvbGFzL25vcm1hbGl6ZS5jc3MgKi9cXG5cXG4vKiBEb2N1bWVudFxcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXFxuXFxuLyoqXFxuICogMS4gQ29ycmVjdCB0aGUgbGluZSBoZWlnaHQgaW4gYWxsIGJyb3dzZXJzLlxcbiAqIDIuIFByZXZlbnQgYWRqdXN0bWVudHMgb2YgZm9udCBzaXplIGFmdGVyIG9yaWVudGF0aW9uIGNoYW5nZXMgaW4gaU9TLlxcbiAqL1xcblxcbmh0bWwge1xcbiAgbGluZS1oZWlnaHQ6IDEuMTU7IC8qIDEgKi9cXG4gIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTsgLyogMiAqL1xcbn1cXG5cXG4vKiBTZWN0aW9uc1xcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXFxuXFxuLyoqXFxuICogUmVtb3ZlIHRoZSBtYXJnaW4gaW4gYWxsIGJyb3dzZXJzLlxcbiAqL1xcblxcbmJvZHkge1xcbiAgbWFyZ2luOiAwO1xcbn1cXG5cXG4vKipcXG4gKiBDb3JyZWN0IHRoZSBmb250IHNpemUgYW5kIG1hcmdpbiBvbiBgaDFgIGVsZW1lbnRzIHdpdGhpbiBgc2VjdGlvbmAgYW5kXFxuICogYGFydGljbGVgIGNvbnRleHRzIGluIENocm9tZSwgRmlyZWZveCwgYW5kIFNhZmFyaS5cXG4gKi9cXG5cXG5oMSB7XFxuICBmb250LXNpemU6IDJlbTtcXG4gIG1hcmdpbjogMC42N2VtIDA7XFxufVxcblxcbi8qIEdyb3VwaW5nIGNvbnRlbnRcXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xcblxcbi8qKlxcbiAqIDEuIEFkZCB0aGUgY29ycmVjdCBib3ggc2l6aW5nIGluIEZpcmVmb3guXFxuICogMi4gU2hvdyB0aGUgb3ZlcmZsb3cgaW4gRWRnZSBhbmQgSUUuXFxuICovXFxuXFxuaHIge1xcbiAgYm94LXNpemluZzogY29udGVudC1ib3g7IC8qIDEgKi9cXG4gIGhlaWdodDogMDsgLyogMSAqL1xcbiAgb3ZlcmZsb3c6IHZpc2libGU7IC8qIDIgKi9cXG59XFxuXFxuLyoqXFxuICogMS4gQ29ycmVjdCB0aGUgaW5oZXJpdGFuY2UgYW5kIHNjYWxpbmcgb2YgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cXG4gKiAyLiBDb3JyZWN0IHRoZSBvZGQgYGVtYCBmb250IHNpemluZyBpbiBhbGwgYnJvd3NlcnMuXFxuICovXFxuXFxucHJlIHtcXG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTsgLyogMSAqL1xcbiAgZm9udC1zaXplOiAxZW07IC8qIDIgKi9cXG59XFxuXFxuLyogVGV4dC1sZXZlbCBzZW1hbnRpY3NcXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xcblxcbi8qKlxcbiAqIFJlbW92ZSB0aGUgZ3JheSBiYWNrZ3JvdW5kIG9uIGFjdGl2ZSBsaW5rcyBpbiBJRSAxMC5cXG4gKi9cXG5cXG5hIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG4vKipcXG4gKiAxLiBSZW1vdmUgdGhlIGJvdHRvbSBib3JkZXIgaW4gQ2hyb21lIDU3LVxcbiAqIDIuIEFkZCB0aGUgY29ycmVjdCB0ZXh0IGRlY29yYXRpb24gaW4gQ2hyb21lLCBFZGdlLCBJRSwgT3BlcmEsIGFuZCBTYWZhcmkuXFxuICovXFxuXFxuYWJiclt0aXRsZV0ge1xcbiAgYm9yZGVyLWJvdHRvbTogbm9uZTsgLyogMSAqL1xcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7IC8qIDIgKi9cXG4gIC13ZWJraXQtdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmUgZG90dGVkO1xcbiAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZSBkb3R0ZWQ7IC8qIDIgKi9cXG59XFxuXFxuLyoqXFxuICogQWRkIHRoZSBjb3JyZWN0IGZvbnQgd2VpZ2h0IGluIENocm9tZSwgRWRnZSwgYW5kIFNhZmFyaS5cXG4gKi9cXG5cXG5iLFxcbnN0cm9uZyB7XFxuICBmb250LXdlaWdodDogYm9sZGVyO1xcbn1cXG5cXG4vKipcXG4gKiAxLiBDb3JyZWN0IHRoZSBpbmhlcml0YW5jZSBhbmQgc2NhbGluZyBvZiBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxcbiAqIDIuIENvcnJlY3QgdGhlIG9kZCBgZW1gIGZvbnQgc2l6aW5nIGluIGFsbCBicm93c2Vycy5cXG4gKi9cXG5cXG5jb2RlLFxcbmtiZCxcXG5zYW1wIHtcXG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTsgLyogMSAqL1xcbiAgZm9udC1zaXplOiAxZW07IC8qIDIgKi9cXG59XFxuXFxuLyoqXFxuICogQWRkIHRoZSBjb3JyZWN0IGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXFxuICovXFxuXFxuc21hbGwge1xcbiAgZm9udC1zaXplOiA4MCU7XFxufVxcblxcbi8qKlxcbiAqIFByZXZlbnQgYHN1YmAgYW5kIGBzdXBgIGVsZW1lbnRzIGZyb20gYWZmZWN0aW5nIHRoZSBsaW5lIGhlaWdodCBpblxcbiAqIGFsbCBicm93c2Vycy5cXG4gKi9cXG5cXG5zdWIsXFxuc3VwIHtcXG4gIGZvbnQtc2l6ZTogNzUlO1xcbiAgbGluZS1oZWlnaHQ6IDA7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XFxufVxcblxcbnN1YiB7XFxuICBib3R0b206IC0wLjI1ZW07XFxufVxcblxcbnN1cCB7XFxuICB0b3A6IC0wLjVlbTtcXG59XFxuXFxuLyogRW1iZWRkZWQgY29udGVudFxcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXFxuXFxuLyoqXFxuICogUmVtb3ZlIHRoZSBib3JkZXIgb24gaW1hZ2VzIGluc2lkZSBsaW5rcyBpbiBJRSAxMC5cXG4gKi9cXG5cXG5pbWcge1xcbiAgYm9yZGVyLXN0eWxlOiBub25lO1xcbn1cXG5cXG4vKiBGb3Jtc1xcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXFxuXFxuLyoqXFxuICogMS4gQ2hhbmdlIHRoZSBmb250IHN0eWxlcyBpbiBhbGwgYnJvd3NlcnMuXFxuICogMi4gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gRmlyZWZveCBhbmQgU2FmYXJpLlxcbiAqL1xcblxcbmJ1dHRvbixcXG5pbnB1dCxcXG5vcHRncm91cCxcXG5zZWxlY3QsXFxudGV4dGFyZWEge1xcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7IC8qIDEgKi9cXG4gIGZvbnQtc2l6ZTogMTAwJTsgLyogMSAqL1xcbiAgbGluZS1oZWlnaHQ6IDEuMTU7IC8qIDEgKi9cXG4gIG1hcmdpbjogMDsgLyogMiAqL1xcbn1cXG5cXG4vKipcXG4gKiBTaG93IHRoZSBvdmVyZmxvdyBpbiBJRS5cXG4gKiAxLiBTaG93IHRoZSBvdmVyZmxvdyBpbiBFZGdlLlxcbiAqL1xcblxcbmJ1dHRvbixcXG5pbnB1dCB7IC8qIDEgKi9cXG4gIG92ZXJmbG93OiB2aXNpYmxlO1xcbn1cXG5cXG4vKipcXG4gKiBSZW1vdmUgdGhlIGluaGVyaXRhbmNlIG9mIHRleHQgdHJhbnNmb3JtIGluIEVkZ2UsIEZpcmVmb3gsIGFuZCBJRS5cXG4gKiAxLiBSZW1vdmUgdGhlIGluaGVyaXRhbmNlIG9mIHRleHQgdHJhbnNmb3JtIGluIEZpcmVmb3guXFxuICovXFxuXFxuYnV0dG9uLFxcbnNlbGVjdCB7IC8qIDEgKi9cXG4gIHRleHQtdHJhbnNmb3JtOiBub25lO1xcbn1cXG5cXG4vKipcXG4gKiBDb3JyZWN0IHRoZSBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIHR5cGVzIGluIGlPUyBhbmQgU2FmYXJpLlxcbiAqL1xcblxcbmJ1dHRvbixcXG5bdHlwZT1cXFwiYnV0dG9uXFxcIl0sXFxuW3R5cGU9XFxcInJlc2V0XFxcIl0sXFxuW3R5cGU9XFxcInN1Ym1pdFxcXCJdIHtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uO1xcbn1cXG5cXG4vKipcXG4gKiBSZW1vdmUgdGhlIGlubmVyIGJvcmRlciBhbmQgcGFkZGluZyBpbiBGaXJlZm94LlxcbiAqL1xcblxcbmJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lcixcXG5bdHlwZT1cXFwiYnV0dG9uXFxcIl06Oi1tb3otZm9jdXMtaW5uZXIsXFxuW3R5cGU9XFxcInJlc2V0XFxcIl06Oi1tb3otZm9jdXMtaW5uZXIsXFxuW3R5cGU9XFxcInN1Ym1pdFxcXCJdOjotbW96LWZvY3VzLWlubmVyIHtcXG4gIGJvcmRlci1zdHlsZTogbm9uZTtcXG4gIHBhZGRpbmc6IDA7XFxufVxcblxcbi8qKlxcbiAqIFJlc3RvcmUgdGhlIGZvY3VzIHN0eWxlcyB1bnNldCBieSB0aGUgcHJldmlvdXMgcnVsZS5cXG4gKi9cXG5cXG5idXR0b246LW1vei1mb2N1c3JpbmcsXFxuW3R5cGU9XFxcImJ1dHRvblxcXCJdOi1tb3otZm9jdXNyaW5nLFxcblt0eXBlPVxcXCJyZXNldFxcXCJdOi1tb3otZm9jdXNyaW5nLFxcblt0eXBlPVxcXCJzdWJtaXRcXFwiXTotbW96LWZvY3VzcmluZyB7XFxuICBvdXRsaW5lOiAxcHggZG90dGVkIEJ1dHRvblRleHQ7XFxufVxcblxcbi8qKlxcbiAqIENvcnJlY3QgdGhlIHBhZGRpbmcgaW4gRmlyZWZveC5cXG4gKi9cXG5cXG5maWVsZHNldCB7XFxuICBwYWRkaW5nOiAwLjM1ZW0gMC43NWVtIDAuNjI1ZW07XFxufVxcblxcbi8qKlxcbiAqIDEuIENvcnJlY3QgdGhlIHRleHQgd3JhcHBpbmcgaW4gRWRnZSBhbmQgSUUuXFxuICogMi4gQ29ycmVjdCB0aGUgY29sb3IgaW5oZXJpdGFuY2UgZnJvbSBgZmllbGRzZXRgIGVsZW1lbnRzIGluIElFLlxcbiAqIDMuIFJlbW92ZSB0aGUgcGFkZGluZyBzbyBkZXZlbG9wZXJzIGFyZSBub3QgY2F1Z2h0IG91dCB3aGVuIHRoZXkgemVybyBvdXRcXG4gKiAgICBgZmllbGRzZXRgIGVsZW1lbnRzIGluIGFsbCBicm93c2Vycy5cXG4gKi9cXG5cXG5sZWdlbmQge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDsgLyogMSAqL1xcbiAgY29sb3I6IGluaGVyaXQ7IC8qIDIgKi9cXG4gIGRpc3BsYXk6IHRhYmxlOyAvKiAxICovXFxuICBtYXgtd2lkdGg6IDEwMCU7IC8qIDEgKi9cXG4gIHBhZGRpbmc6IDA7IC8qIDMgKi9cXG4gIHdoaXRlLXNwYWNlOiBub3JtYWw7IC8qIDEgKi9cXG59XFxuXFxuLyoqXFxuICogQWRkIHRoZSBjb3JyZWN0IHZlcnRpY2FsIGFsaWdubWVudCBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBPcGVyYS5cXG4gKi9cXG5cXG5wcm9ncmVzcyB7XFxuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XFxufVxcblxcbi8qKlxcbiAqIFJlbW92ZSB0aGUgZGVmYXVsdCB2ZXJ0aWNhbCBzY3JvbGxiYXIgaW4gSUUgMTArLlxcbiAqL1xcblxcbnRleHRhcmVhIHtcXG4gIG92ZXJmbG93OiBhdXRvO1xcbn1cXG5cXG4vKipcXG4gKiAxLiBBZGQgdGhlIGNvcnJlY3QgYm94IHNpemluZyBpbiBJRSAxMC5cXG4gKiAyLiBSZW1vdmUgdGhlIHBhZGRpbmcgaW4gSUUgMTAuXFxuICovXFxuXFxuW3R5cGU9XFxcImNoZWNrYm94XFxcIl0sXFxuW3R5cGU9XFxcInJhZGlvXFxcIl0ge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDsgLyogMSAqL1xcbiAgcGFkZGluZzogMDsgLyogMiAqL1xcbn1cXG5cXG4vKipcXG4gKiBDb3JyZWN0IHRoZSBjdXJzb3Igc3R5bGUgb2YgaW5jcmVtZW50IGFuZCBkZWNyZW1lbnQgYnV0dG9ucyBpbiBDaHJvbWUuXFxuICovXFxuXFxuW3R5cGU9XFxcIm51bWJlclxcXCJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLFxcblt0eXBlPVxcXCJudW1iZXJcXFwiXTo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbiB7XFxuICBoZWlnaHQ6IGF1dG87XFxufVxcblxcbi8qKlxcbiAqIDEuIENvcnJlY3QgdGhlIG9kZCBhcHBlYXJhbmNlIGluIENocm9tZSBhbmQgU2FmYXJpLlxcbiAqIDIuIENvcnJlY3QgdGhlIG91dGxpbmUgc3R5bGUgaW4gU2FmYXJpLlxcbiAqL1xcblxcblt0eXBlPVxcXCJzZWFyY2hcXFwiXSB7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IHRleHRmaWVsZDsgLyogMSAqL1xcbiAgb3V0bGluZS1vZmZzZXQ6IC0ycHg7IC8qIDIgKi9cXG59XFxuXFxuLyoqXFxuICogUmVtb3ZlIHRoZSBpbm5lciBwYWRkaW5nIGluIENocm9tZSBhbmQgU2FmYXJpIG9uIG1hY09TLlxcbiAqL1xcblxcblt0eXBlPVxcXCJzZWFyY2hcXFwiXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XFxufVxcblxcbi8qKlxcbiAqIDEuIENvcnJlY3QgdGhlIGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgdHlwZXMgaW4gaU9TIGFuZCBTYWZhcmkuXFxuICogMi4gQ2hhbmdlIGZvbnQgcHJvcGVydGllcyB0byBgaW5oZXJpdGAgaW4gU2FmYXJpLlxcbiAqL1xcblxcbjo6LXdlYmtpdC1maWxlLXVwbG9hZC1idXR0b24ge1xcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247IC8qIDEgKi9cXG4gIGZvbnQ6IGluaGVyaXQ7IC8qIDIgKi9cXG59XFxuXFxuLyogSW50ZXJhY3RpdmVcXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xcblxcbi8qXFxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gRWRnZSwgSUUgMTArLCBhbmQgRmlyZWZveC5cXG4gKi9cXG5cXG5kZXRhaWxzIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG4vKlxcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIGFsbCBicm93c2Vycy5cXG4gKi9cXG5cXG5zdW1tYXJ5IHtcXG4gIGRpc3BsYXk6IGxpc3QtaXRlbTtcXG59XFxuXFxuLyogTWlzY1xcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXFxuXFxuLyoqXFxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgMTArLlxcbiAqL1xcblxcbnRlbXBsYXRlIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi8qKlxcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDEwLlxcbiAqL1xcblxcbltoaWRkZW5dIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblwiLCBcIlwiLCB7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCIvVXNlcnMvc3RlcGhhbmllc21pdGgvQUNML0Z1bGxTdGFjay9TbmFwU2hvdC9TbmFwU2hvdC1BcHAvbm9kZV9tb2R1bGVzL25vcm1hbGl6ZS5jc3Mvbm9ybWFsaXplLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSw0RUFBNEU7O0FBRTVFO2dGQUNnRjs7QUFFaEY7OztHQUdHOztBQUVIO0VBQ0Usa0JBQWtCLENBQUMsT0FBTztFQUMxQiwrQkFBK0IsQ0FBQyxPQUFPO0NBQ3hDOztBQUVEO2dGQUNnRjs7QUFFaEY7O0dBRUc7O0FBRUg7RUFDRSxVQUFVO0NBQ1g7O0FBRUQ7OztHQUdHOztBQUVIO0VBQ0UsZUFBZTtFQUNmLGlCQUFpQjtDQUNsQjs7QUFFRDtnRkFDZ0Y7O0FBRWhGOzs7R0FHRzs7QUFFSDtFQUNFLHdCQUF3QixDQUFDLE9BQU87RUFDaEMsVUFBVSxDQUFDLE9BQU87RUFDbEIsa0JBQWtCLENBQUMsT0FBTztDQUMzQjs7QUFFRDs7O0dBR0c7O0FBRUg7RUFDRSxrQ0FBa0MsQ0FBQyxPQUFPO0VBQzFDLGVBQWUsQ0FBQyxPQUFPO0NBQ3hCOztBQUVEO2dGQUNnRjs7QUFFaEY7O0dBRUc7O0FBRUg7RUFDRSw4QkFBOEI7Q0FDL0I7O0FBRUQ7OztHQUdHOztBQUVIO0VBQ0Usb0JBQW9CLENBQUMsT0FBTztFQUM1QiwyQkFBMkIsQ0FBQyxPQUFPO0VBQ25DLDBDQUFrQztVQUFsQyxrQ0FBa0MsQ0FBQyxPQUFPO0NBQzNDOztBQUVEOztHQUVHOztBQUVIOztFQUVFLG9CQUFvQjtDQUNyQjs7QUFFRDs7O0dBR0c7O0FBRUg7OztFQUdFLGtDQUFrQyxDQUFDLE9BQU87RUFDMUMsZUFBZSxDQUFDLE9BQU87Q0FDeEI7O0FBRUQ7O0dBRUc7O0FBRUg7RUFDRSxlQUFlO0NBQ2hCOztBQUVEOzs7R0FHRzs7QUFFSDs7RUFFRSxlQUFlO0VBQ2YsZUFBZTtFQUNmLG1CQUFtQjtFQUNuQix5QkFBeUI7Q0FDMUI7O0FBRUQ7RUFDRSxnQkFBZ0I7Q0FDakI7O0FBRUQ7RUFDRSxZQUFZO0NBQ2I7O0FBRUQ7Z0ZBQ2dGOztBQUVoRjs7R0FFRzs7QUFFSDtFQUNFLG1CQUFtQjtDQUNwQjs7QUFFRDtnRkFDZ0Y7O0FBRWhGOzs7R0FHRzs7QUFFSDs7Ozs7RUFLRSxxQkFBcUIsQ0FBQyxPQUFPO0VBQzdCLGdCQUFnQixDQUFDLE9BQU87RUFDeEIsa0JBQWtCLENBQUMsT0FBTztFQUMxQixVQUFVLENBQUMsT0FBTztDQUNuQjs7QUFFRDs7O0dBR0c7O0FBRUg7UUFDUSxPQUFPO0VBQ2Isa0JBQWtCO0NBQ25COztBQUVEOzs7R0FHRzs7QUFFSDtTQUNTLE9BQU87RUFDZCxxQkFBcUI7Q0FDdEI7O0FBRUQ7O0dBRUc7O0FBRUg7Ozs7RUFJRSwyQkFBMkI7Q0FDNUI7O0FBRUQ7O0dBRUc7O0FBRUg7Ozs7RUFJRSxtQkFBbUI7RUFDbkIsV0FBVztDQUNaOztBQUVEOztHQUVHOztBQUVIOzs7O0VBSUUsK0JBQStCO0NBQ2hDOztBQUVEOztHQUVHOztBQUVIO0VBQ0UsK0JBQStCO0NBQ2hDOztBQUVEOzs7OztHQUtHOztBQUVIO0VBQ0UsdUJBQXVCLENBQUMsT0FBTztFQUMvQixlQUFlLENBQUMsT0FBTztFQUN2QixlQUFlLENBQUMsT0FBTztFQUN2QixnQkFBZ0IsQ0FBQyxPQUFPO0VBQ3hCLFdBQVcsQ0FBQyxPQUFPO0VBQ25CLG9CQUFvQixDQUFDLE9BQU87Q0FDN0I7O0FBRUQ7O0dBRUc7O0FBRUg7RUFDRSx5QkFBeUI7Q0FDMUI7O0FBRUQ7O0dBRUc7O0FBRUg7RUFDRSxlQUFlO0NBQ2hCOztBQUVEOzs7R0FHRzs7QUFFSDs7RUFFRSx1QkFBdUIsQ0FBQyxPQUFPO0VBQy9CLFdBQVcsQ0FBQyxPQUFPO0NBQ3BCOztBQUVEOztHQUVHOztBQUVIOztFQUVFLGFBQWE7Q0FDZDs7QUFFRDs7O0dBR0c7O0FBRUg7RUFDRSw4QkFBOEIsQ0FBQyxPQUFPO0VBQ3RDLHFCQUFxQixDQUFDLE9BQU87Q0FDOUI7O0FBRUQ7O0dBRUc7O0FBRUg7RUFDRSx5QkFBeUI7Q0FDMUI7O0FBRUQ7OztHQUdHOztBQUVIO0VBQ0UsMkJBQTJCLENBQUMsT0FBTztFQUNuQyxjQUFjLENBQUMsT0FBTztDQUN2Qjs7QUFFRDtnRkFDZ0Y7O0FBRWhGOztHQUVHOztBQUVIO0VBQ0UsZUFBZTtDQUNoQjs7QUFFRDs7R0FFRzs7QUFFSDtFQUNFLG1CQUFtQjtDQUNwQjs7QUFFRDtnRkFDZ0Y7O0FBRWhGOztHQUVHOztBQUVIO0VBQ0UsY0FBYztDQUNmOztBQUVEOztHQUVHOztBQUVIO0VBQ0UsY0FBYztDQUNmXCIsXCJmaWxlXCI6XCJub3JtYWxpemUuY3NzXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8qISBub3JtYWxpemUuY3NzIHY4LjAuMCB8IE1JVCBMaWNlbnNlIHwgZ2l0aHViLmNvbS9uZWNvbGFzL25vcm1hbGl6ZS5jc3MgKi9cXG5cXG4vKiBEb2N1bWVudFxcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXFxuXFxuLyoqXFxuICogMS4gQ29ycmVjdCB0aGUgbGluZSBoZWlnaHQgaW4gYWxsIGJyb3dzZXJzLlxcbiAqIDIuIFByZXZlbnQgYWRqdXN0bWVudHMgb2YgZm9udCBzaXplIGFmdGVyIG9yaWVudGF0aW9uIGNoYW5nZXMgaW4gaU9TLlxcbiAqL1xcblxcbmh0bWwge1xcbiAgbGluZS1oZWlnaHQ6IDEuMTU7IC8qIDEgKi9cXG4gIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTsgLyogMiAqL1xcbn1cXG5cXG4vKiBTZWN0aW9uc1xcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXFxuXFxuLyoqXFxuICogUmVtb3ZlIHRoZSBtYXJnaW4gaW4gYWxsIGJyb3dzZXJzLlxcbiAqL1xcblxcbmJvZHkge1xcbiAgbWFyZ2luOiAwO1xcbn1cXG5cXG4vKipcXG4gKiBDb3JyZWN0IHRoZSBmb250IHNpemUgYW5kIG1hcmdpbiBvbiBgaDFgIGVsZW1lbnRzIHdpdGhpbiBgc2VjdGlvbmAgYW5kXFxuICogYGFydGljbGVgIGNvbnRleHRzIGluIENocm9tZSwgRmlyZWZveCwgYW5kIFNhZmFyaS5cXG4gKi9cXG5cXG5oMSB7XFxuICBmb250LXNpemU6IDJlbTtcXG4gIG1hcmdpbjogMC42N2VtIDA7XFxufVxcblxcbi8qIEdyb3VwaW5nIGNvbnRlbnRcXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xcblxcbi8qKlxcbiAqIDEuIEFkZCB0aGUgY29ycmVjdCBib3ggc2l6aW5nIGluIEZpcmVmb3guXFxuICogMi4gU2hvdyB0aGUgb3ZlcmZsb3cgaW4gRWRnZSBhbmQgSUUuXFxuICovXFxuXFxuaHIge1xcbiAgYm94LXNpemluZzogY29udGVudC1ib3g7IC8qIDEgKi9cXG4gIGhlaWdodDogMDsgLyogMSAqL1xcbiAgb3ZlcmZsb3c6IHZpc2libGU7IC8qIDIgKi9cXG59XFxuXFxuLyoqXFxuICogMS4gQ29ycmVjdCB0aGUgaW5oZXJpdGFuY2UgYW5kIHNjYWxpbmcgb2YgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cXG4gKiAyLiBDb3JyZWN0IHRoZSBvZGQgYGVtYCBmb250IHNpemluZyBpbiBhbGwgYnJvd3NlcnMuXFxuICovXFxuXFxucHJlIHtcXG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTsgLyogMSAqL1xcbiAgZm9udC1zaXplOiAxZW07IC8qIDIgKi9cXG59XFxuXFxuLyogVGV4dC1sZXZlbCBzZW1hbnRpY3NcXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xcblxcbi8qKlxcbiAqIFJlbW92ZSB0aGUgZ3JheSBiYWNrZ3JvdW5kIG9uIGFjdGl2ZSBsaW5rcyBpbiBJRSAxMC5cXG4gKi9cXG5cXG5hIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG4vKipcXG4gKiAxLiBSZW1vdmUgdGhlIGJvdHRvbSBib3JkZXIgaW4gQ2hyb21lIDU3LVxcbiAqIDIuIEFkZCB0aGUgY29ycmVjdCB0ZXh0IGRlY29yYXRpb24gaW4gQ2hyb21lLCBFZGdlLCBJRSwgT3BlcmEsIGFuZCBTYWZhcmkuXFxuICovXFxuXFxuYWJiclt0aXRsZV0ge1xcbiAgYm9yZGVyLWJvdHRvbTogbm9uZTsgLyogMSAqL1xcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7IC8qIDIgKi9cXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lIGRvdHRlZDsgLyogMiAqL1xcbn1cXG5cXG4vKipcXG4gKiBBZGQgdGhlIGNvcnJlY3QgZm9udCB3ZWlnaHQgaW4gQ2hyb21lLCBFZGdlLCBhbmQgU2FmYXJpLlxcbiAqL1xcblxcbmIsXFxuc3Ryb25nIHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkZXI7XFxufVxcblxcbi8qKlxcbiAqIDEuIENvcnJlY3QgdGhlIGluaGVyaXRhbmNlIGFuZCBzY2FsaW5nIG9mIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXFxuICogMi4gQ29ycmVjdCB0aGUgb2RkIGBlbWAgZm9udCBzaXppbmcgaW4gYWxsIGJyb3dzZXJzLlxcbiAqL1xcblxcbmNvZGUsXFxua2JkLFxcbnNhbXAge1xcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSwgbW9ub3NwYWNlOyAvKiAxICovXFxuICBmb250LXNpemU6IDFlbTsgLyogMiAqL1xcbn1cXG5cXG4vKipcXG4gKiBBZGQgdGhlIGNvcnJlY3QgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cXG4gKi9cXG5cXG5zbWFsbCB7XFxuICBmb250LXNpemU6IDgwJTtcXG59XFxuXFxuLyoqXFxuICogUHJldmVudCBgc3ViYCBhbmQgYHN1cGAgZWxlbWVudHMgZnJvbSBhZmZlY3RpbmcgdGhlIGxpbmUgaGVpZ2h0IGluXFxuICogYWxsIGJyb3dzZXJzLlxcbiAqL1xcblxcbnN1YixcXG5zdXAge1xcbiAgZm9udC1zaXplOiA3NSU7XFxuICBsaW5lLWhlaWdodDogMDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcXG59XFxuXFxuc3ViIHtcXG4gIGJvdHRvbTogLTAuMjVlbTtcXG59XFxuXFxuc3VwIHtcXG4gIHRvcDogLTAuNWVtO1xcbn1cXG5cXG4vKiBFbWJlZGRlZCBjb250ZW50XFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cXG5cXG4vKipcXG4gKiBSZW1vdmUgdGhlIGJvcmRlciBvbiBpbWFnZXMgaW5zaWRlIGxpbmtzIGluIElFIDEwLlxcbiAqL1xcblxcbmltZyB7XFxuICBib3JkZXItc3R5bGU6IG5vbmU7XFxufVxcblxcbi8qIEZvcm1zXFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cXG5cXG4vKipcXG4gKiAxLiBDaGFuZ2UgdGhlIGZvbnQgc3R5bGVzIGluIGFsbCBicm93c2Vycy5cXG4gKiAyLiBSZW1vdmUgdGhlIG1hcmdpbiBpbiBGaXJlZm94IGFuZCBTYWZhcmkuXFxuICovXFxuXFxuYnV0dG9uLFxcbmlucHV0LFxcbm9wdGdyb3VwLFxcbnNlbGVjdCxcXG50ZXh0YXJlYSB7XFxuICBmb250LWZhbWlseTogaW5oZXJpdDsgLyogMSAqL1xcbiAgZm9udC1zaXplOiAxMDAlOyAvKiAxICovXFxuICBsaW5lLWhlaWdodDogMS4xNTsgLyogMSAqL1xcbiAgbWFyZ2luOiAwOyAvKiAyICovXFxufVxcblxcbi8qKlxcbiAqIFNob3cgdGhlIG92ZXJmbG93IGluIElFLlxcbiAqIDEuIFNob3cgdGhlIG92ZXJmbG93IGluIEVkZ2UuXFxuICovXFxuXFxuYnV0dG9uLFxcbmlucHV0IHsgLyogMSAqL1xcbiAgb3ZlcmZsb3c6IHZpc2libGU7XFxufVxcblxcbi8qKlxcbiAqIFJlbW92ZSB0aGUgaW5oZXJpdGFuY2Ugb2YgdGV4dCB0cmFuc2Zvcm0gaW4gRWRnZSwgRmlyZWZveCwgYW5kIElFLlxcbiAqIDEuIFJlbW92ZSB0aGUgaW5oZXJpdGFuY2Ugb2YgdGV4dCB0cmFuc2Zvcm0gaW4gRmlyZWZveC5cXG4gKi9cXG5cXG5idXR0b24sXFxuc2VsZWN0IHsgLyogMSAqL1xcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XFxufVxcblxcbi8qKlxcbiAqIENvcnJlY3QgdGhlIGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgdHlwZXMgaW4gaU9TIGFuZCBTYWZhcmkuXFxuICovXFxuXFxuYnV0dG9uLFxcblt0eXBlPVxcXCJidXR0b25cXFwiXSxcXG5bdHlwZT1cXFwicmVzZXRcXFwiXSxcXG5bdHlwZT1cXFwic3VibWl0XFxcIl0ge1xcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247XFxufVxcblxcbi8qKlxcbiAqIFJlbW92ZSB0aGUgaW5uZXIgYm9yZGVyIGFuZCBwYWRkaW5nIGluIEZpcmVmb3guXFxuICovXFxuXFxuYnV0dG9uOjotbW96LWZvY3VzLWlubmVyLFxcblt0eXBlPVxcXCJidXR0b25cXFwiXTo6LW1vei1mb2N1cy1pbm5lcixcXG5bdHlwZT1cXFwicmVzZXRcXFwiXTo6LW1vei1mb2N1cy1pbm5lcixcXG5bdHlwZT1cXFwic3VibWl0XFxcIl06Oi1tb3otZm9jdXMtaW5uZXIge1xcbiAgYm9yZGVyLXN0eWxlOiBub25lO1xcbiAgcGFkZGluZzogMDtcXG59XFxuXFxuLyoqXFxuICogUmVzdG9yZSB0aGUgZm9jdXMgc3R5bGVzIHVuc2V0IGJ5IHRoZSBwcmV2aW91cyBydWxlLlxcbiAqL1xcblxcbmJ1dHRvbjotbW96LWZvY3VzcmluZyxcXG5bdHlwZT1cXFwiYnV0dG9uXFxcIl06LW1vei1mb2N1c3JpbmcsXFxuW3R5cGU9XFxcInJlc2V0XFxcIl06LW1vei1mb2N1c3JpbmcsXFxuW3R5cGU9XFxcInN1Ym1pdFxcXCJdOi1tb3otZm9jdXNyaW5nIHtcXG4gIG91dGxpbmU6IDFweCBkb3R0ZWQgQnV0dG9uVGV4dDtcXG59XFxuXFxuLyoqXFxuICogQ29ycmVjdCB0aGUgcGFkZGluZyBpbiBGaXJlZm94LlxcbiAqL1xcblxcbmZpZWxkc2V0IHtcXG4gIHBhZGRpbmc6IDAuMzVlbSAwLjc1ZW0gMC42MjVlbTtcXG59XFxuXFxuLyoqXFxuICogMS4gQ29ycmVjdCB0aGUgdGV4dCB3cmFwcGluZyBpbiBFZGdlIGFuZCBJRS5cXG4gKiAyLiBDb3JyZWN0IHRoZSBjb2xvciBpbmhlcml0YW5jZSBmcm9tIGBmaWVsZHNldGAgZWxlbWVudHMgaW4gSUUuXFxuICogMy4gUmVtb3ZlIHRoZSBwYWRkaW5nIHNvIGRldmVsb3BlcnMgYXJlIG5vdCBjYXVnaHQgb3V0IHdoZW4gdGhleSB6ZXJvIG91dFxcbiAqICAgIGBmaWVsZHNldGAgZWxlbWVudHMgaW4gYWxsIGJyb3dzZXJzLlxcbiAqL1xcblxcbmxlZ2VuZCB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94OyAvKiAxICovXFxuICBjb2xvcjogaW5oZXJpdDsgLyogMiAqL1xcbiAgZGlzcGxheTogdGFibGU7IC8qIDEgKi9cXG4gIG1heC13aWR0aDogMTAwJTsgLyogMSAqL1xcbiAgcGFkZGluZzogMDsgLyogMyAqL1xcbiAgd2hpdGUtc3BhY2U6IG5vcm1hbDsgLyogMSAqL1xcbn1cXG5cXG4vKipcXG4gKiBBZGQgdGhlIGNvcnJlY3QgdmVydGljYWwgYWxpZ25tZW50IGluIENocm9tZSwgRmlyZWZveCwgYW5kIE9wZXJhLlxcbiAqL1xcblxcbnByb2dyZXNzIHtcXG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcXG59XFxuXFxuLyoqXFxuICogUmVtb3ZlIHRoZSBkZWZhdWx0IHZlcnRpY2FsIHNjcm9sbGJhciBpbiBJRSAxMCsuXFxuICovXFxuXFxudGV4dGFyZWEge1xcbiAgb3ZlcmZsb3c6IGF1dG87XFxufVxcblxcbi8qKlxcbiAqIDEuIEFkZCB0aGUgY29ycmVjdCBib3ggc2l6aW5nIGluIElFIDEwLlxcbiAqIDIuIFJlbW92ZSB0aGUgcGFkZGluZyBpbiBJRSAxMC5cXG4gKi9cXG5cXG5bdHlwZT1cXFwiY2hlY2tib3hcXFwiXSxcXG5bdHlwZT1cXFwicmFkaW9cXFwiXSB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94OyAvKiAxICovXFxuICBwYWRkaW5nOiAwOyAvKiAyICovXFxufVxcblxcbi8qKlxcbiAqIENvcnJlY3QgdGhlIGN1cnNvciBzdHlsZSBvZiBpbmNyZW1lbnQgYW5kIGRlY3JlbWVudCBidXR0b25zIGluIENocm9tZS5cXG4gKi9cXG5cXG5bdHlwZT1cXFwibnVtYmVyXFxcIl06Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24sXFxuW3R5cGU9XFxcIm51bWJlclxcXCJdOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uIHtcXG4gIGhlaWdodDogYXV0bztcXG59XFxuXFxuLyoqXFxuICogMS4gQ29ycmVjdCB0aGUgb2RkIGFwcGVhcmFuY2UgaW4gQ2hyb21lIGFuZCBTYWZhcmkuXFxuICogMi4gQ29ycmVjdCB0aGUgb3V0bGluZSBzdHlsZSBpbiBTYWZhcmkuXFxuICovXFxuXFxuW3R5cGU9XFxcInNlYXJjaFxcXCJdIHtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkOyAvKiAxICovXFxuICBvdXRsaW5lLW9mZnNldDogLTJweDsgLyogMiAqL1xcbn1cXG5cXG4vKipcXG4gKiBSZW1vdmUgdGhlIGlubmVyIHBhZGRpbmcgaW4gQ2hyb21lIGFuZCBTYWZhcmkgb24gbWFjT1MuXFxuICovXFxuXFxuW3R5cGU9XFxcInNlYXJjaFxcXCJdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uIHtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXG59XFxuXFxuLyoqXFxuICogMS4gQ29ycmVjdCB0aGUgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSB0eXBlcyBpbiBpT1MgYW5kIFNhZmFyaS5cXG4gKiAyLiBDaGFuZ2UgZm9udCBwcm9wZXJ0aWVzIHRvIGBpbmhlcml0YCBpbiBTYWZhcmkuXFxuICovXFxuXFxuOjotd2Via2l0LWZpbGUtdXBsb2FkLWJ1dHRvbiB7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjsgLyogMSAqL1xcbiAgZm9udDogaW5oZXJpdDsgLyogMiAqL1xcbn1cXG5cXG4vKiBJbnRlcmFjdGl2ZVxcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXFxuXFxuLypcXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBFZGdlLCBJRSAxMCssIGFuZCBGaXJlZm94LlxcbiAqL1xcblxcbmRldGFpbHMge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbi8qXFxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gYWxsIGJyb3dzZXJzLlxcbiAqL1xcblxcbnN1bW1hcnkge1xcbiAgZGlzcGxheTogbGlzdC1pdGVtO1xcbn1cXG5cXG4vKiBNaXNjXFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cXG5cXG4vKipcXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSAxMCsuXFxuICovXFxuXFxudGVtcGxhdGUge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLyoqXFxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgMTAuXFxuICovXFxuXFxuW2hpZGRlbl0ge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG5cbi8vIGV4cG9ydHNcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuLi9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tNS0yIS4vbm9ybWFsaXplLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wic291cmNlTWFwXCI6dHJ1ZSxcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS01LTEhLi4vcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTUtMiEuL25vcm1hbGl6ZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuLi9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tNS0yIS4vbm9ybWFsaXplLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikodHJ1ZSk7XG4vLyBpbXBvcnRzXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9Um9ib3RvOjEwMCw0MDAsNTAwLDkwMCw5MDBpKTtcIiwgXCJcIl0pO1xuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi52QXNyU1VYSEx6X25aUFhvVnoteWgge1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG4gIHdpZHRoOiAxMDB2dztcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlLXJvd3M6IDEwMHZoIDFmcjtcXG4gIG92ZXJmbG93LXg6IGhpZGRlbjtcXG4gIG92ZXJmbG93LXk6IGF1dG87XFxuICAtd2Via2l0LXBlcnNwZWN0aXZlOiAxcHg7XFxuICAgICAgICAgIHBlcnNwZWN0aXZlOiAxcHg7XFxuICBtYXJnaW46IDA7XFxufVxcblxcbi52QXNyU1VYSEx6X25aUFhvVnoteWggbWFpbiB7XFxuICAgIG1pbi1oZWlnaHQ6IDEwMHZoO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgaGVpZ2h0OiAtd2Via2l0LWZpdC1jb250ZW50O1xcbiAgICBoZWlnaHQ6IC1tb3otZml0LWNvbnRlbnQ7XFxuICAgIGhlaWdodDogZml0LWNvbnRlbnQ7XFxuICAgIHBhZGRpbmctdG9wOiAyZW07XFxuICAgIHBhZGRpbmctYm90dG9tOiAyZW07XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcblxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHRvcDogMDtcXG4gICAgbGVmdDogMDtcXG4gICAgcmlnaHQ6IDA7XFxuICAgIGJvdHRvbTogMDtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVooMCk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1xcbiAgICB0b3A6IDEwMHZoO1xcbiAgfVxcblxcbi52QXNyU1VYSEx6X25aUFhvVnoteWggbWFpbiBuYXYge1xcbiAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgIGhlaWdodDogM2VtO1xcbiAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIH1cXG5cXG4udkFzclNVWEhMel9uWlBYb1Z6LXloIG1haW4gbmF2IGEge1xcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgICAgICAgY29sb3I6IGJsYWNrO1xcbiAgICAgICAgZm9udC1mYW1pbHk6IFJvYm90bywgSGVsdmV0aWNhO1xcbiAgICAgICAgZm9udC13ZWlnaHQ6IDEwMDtcXG4gICAgICAgIGZvbnQtc2l6ZTogMWVtO1xcbiAgICAgICAgbWFyZ2luOiAuMjVlbSAuNzVlbTtcXG4gICAgICB9XCIsIFwiXCIsIHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIi9Vc2Vycy9zdGVwaGFuaWVzbWl0aC9BQ0wvRnVsbFN0YWNrL1NuYXBTaG90L1NuYXBTaG90LUFwcC9zcmMvY29tcG9uZW50cy9hcHAvQXBwLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFFQTtFQUNFLGNBQWM7RUFDZCxhQUFhO0VBQ2IsY0FBYztFQUNkLDhCQUE4QjtFQUM5QixtQkFBbUI7RUFDbkIsaUJBQWlCO0VBQ2pCLHlCQUFpQjtVQUFqQixpQkFBaUI7RUFDakIsVUFBVTtDQWtDWDs7QUFoQ0M7SUFDRSxrQkFBa0I7SUFDbEIsWUFBWTtJQUNaLDRCQUFvQjtJQUFwQix5QkFBb0I7SUFBcEIsb0JBQW9CO0lBQ3BCLGlCQUFpQjtJQUNqQixvQkFBb0I7SUFDcEIsd0JBQXdCOztJQUV4QixtQkFBbUI7SUFDbkIsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLGlDQUF5QjtZQUF6Qix5QkFBeUI7SUFDekIsV0FBVztHQWlCWjs7QUFmQztNQUNFLFlBQVk7TUFDWixZQUFZO01BQ1osY0FBYztNQUNkLHdCQUF3QjtLQVV6Qjs7QUFSQztRQUNFLHNCQUFzQjtRQUN0QixhQUFhO1FBQ2IsK0JBQStCO1FBQy9CLGlCQUFpQjtRQUNqQixlQUFlO1FBQ2Ysb0JBQW9CO09BQ3JCXCIsXCJmaWxlXCI6XCJBcHAuY3NzXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgdXJsKCdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9Um9ib3RvOjEwMCw0MDAsNTAwLDkwMCw5MDBpJyk7XFxuXFxuOmxvY2FsKC5hcHApIHtcXG4gIGhlaWdodDogMTAwdmg7XFxuICB3aWR0aDogMTAwdnc7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAxMDB2aCAxZnI7XFxuICBvdmVyZmxvdy14OiBoaWRkZW47XFxuICBvdmVyZmxvdy15OiBhdXRvO1xcbiAgcGVyc3BlY3RpdmU6IDFweDtcXG4gIG1hcmdpbjogMDtcXG5cXG4gIG1haW4ge1xcbiAgICBtaW4taGVpZ2h0OiAxMDB2aDtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogZml0LWNvbnRlbnQ7XFxuICAgIHBhZGRpbmctdG9wOiAyZW07XFxuICAgIHBhZGRpbmctYm90dG9tOiAyZW07XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcblxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHRvcDogMDtcXG4gICAgbGVmdDogMDtcXG4gICAgcmlnaHQ6IDA7XFxuICAgIGJvdHRvbTogMDtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1xcbiAgICB0b3A6IDEwMHZoO1xcblxcbiAgICBuYXYge1xcbiAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgIGhlaWdodDogM2VtO1xcbiAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgICAgXFxuICAgICAgYSB7XFxuICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICAgICAgICBjb2xvcjogYmxhY2s7XFxuICAgICAgICBmb250LWZhbWlseTogUm9ib3RvLCBIZWx2ZXRpY2E7XFxuICAgICAgICBmb250LXdlaWdodDogMTAwO1xcbiAgICAgICAgZm9udC1zaXplOiAxZW07XFxuICAgICAgICBtYXJnaW46IC4yNWVtIC43NWVtO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfVxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcblxuLy8gZXhwb3J0c1xuZXhwb3J0cy5sb2NhbHMgPSB7XG5cdFwiYXBwXCI6IFwidkFzclNVWEhMel9uWlBYb1Z6LXloXCJcbn07IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTUtMiEuL0FwcC5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcInNvdXJjZU1hcFwiOnRydWUsXCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS01LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS01LTIhLi9BcHAuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNS0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tNS0yIS4vQXBwLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5jbGFzcyBGb3JtQ29udHJvbCBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBsYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLmVsZW1lbnRcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBsYWJlbCwgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgeyBsYWJlbCAmJiA8bGFiZWw+e2xhYmVsfTo8L2xhYmVsPiB9XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRm9ybUNvbnRyb2w7IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgRm9ybUNvbnRyb2wgZnJvbSAnLi9Gb3JtQ29udHJvbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENyZWRlbnRpYWxzIGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICBzdGF0aWMgcHJvcFR5cGVzID0geyBcbiAgICBzdWJtaXQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgYWN0aW9uOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgYWxsb3dOYW1lOiBQcm9wVHlwZXMuYm9vbFxuICB9O1xuXG4gIHN0YXRlID0ge1xuICAgIG5hbWU6ICcnLFxuICAgIGVtYWlsOiAnJyxcbiAgICBwYXNzd29yZDogJydcbiAgfTtcblxuICBoYW5kbGVDaGFuZ2UgPSAoeyB0YXJnZXQgfSkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBbdGFyZ2V0Lm5hbWVdOiB0YXJnZXQudmFsdWUgfSk7XG4gIH07XG5cbiAgaGFuZGxlU3VibWl0ID0gZXZlbnQgPT4ge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5wcm9wcy5zdWJtaXQodGhpcy5zdGF0ZSk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgYWN0aW9uLCBhbGxvd05hbWUgPSBmYWxzZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IG5hbWUsIGVtYWlsLCBwYXNzd29yZCB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8Zm9ybSBvblN1Ym1pdD17dGhpcy5oYW5kbGVTdWJtaXR9PlxuICAgICAgICB7IGFsbG93TmFtZSAmJlxuICAgICAgICAgIDxGb3JtQ29udHJvbCBsYWJlbD1cIm5hbWVcIj5cbiAgICAgICAgICAgIDxpbnB1dCBuYW1lPVwibmFtZVwiIHZhbHVlPXtuYW1lfSBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9Lz5cbiAgICAgICAgICA8L0Zvcm1Db250cm9sPlxuICAgICAgICB9XG4gICAgICAgIDxGb3JtQ29udHJvbCBsYWJlbD1cImVtYWlsXCI+XG4gICAgICAgICAgPGlucHV0IG5hbWU9XCJlbWFpbFwiIHZhbHVlPXtlbWFpbH0gb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfS8+XG4gICAgICAgIDwvRm9ybUNvbnRyb2w+XG4gICAgICAgIDxGb3JtQ29udHJvbCBsYWJlbD1cInBhc3N3b3JkXCI+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJwYXNzd29yZFwiIG5hbWU9XCJwYXNzd29yZFwiIHZhbHVlPXtwYXNzd29yZH0gb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfS8+XG4gICAgICAgIDwvRm9ybUNvbnRyb2w+XG4gICAgICAgIDxGb3JtQ29udHJvbCBsYWJlbD1cInBhc3N3b3JkXCI+XG4gICAgICAgICAgPGJ1dHRvbj57YWN0aW9ufTwvYnV0dG9uPlxuICAgICAgICA8L0Zvcm1Db250cm9sPlxuICAgICAgPC9mb3JtPlxuICAgICk7XG4gIH1cbn0iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFN3aXRjaCwgUm91dGUsIExpbmssIFJlZGlyZWN0IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgc2lnbmluLCBzaWdudXAgfSBmcm9tICcuL2FjdGlvbnMnO1xuaW1wb3J0IHsgZ2V0VXNlciB9IGZyb20gJy4vcmVkdWNlcnMnO1xuaW1wb3J0IENyZWRlbnRpYWxzIGZyb20gJy4vQ3JlZGVudGlhbHMnO1xuXG5jbGFzcyBBdXRoIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICB1c2VyOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHNpZ25pbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBzaWdudXA6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB1c2VyLCBzaWduaW4sIHNpZ251cCwgbG9jYXRpb24gfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgcmVkaXJlY3QgPSBsb2NhdGlvbi5zdGF0ZSA/IGxvY2F0aW9uLnN0YXRlLmZyb20gOiAnLyc7XG4gICAgaWYodXNlcikgcmV0dXJuIDxSZWRpcmVjdCB0bz17cmVkaXJlY3R9Lz47XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxTd2l0Y2g+XG4gICAgICAgICAgPFJvdXRlIHBhdGg9XCIvYXV0aC9zaWduaW5cIiBjb21wb25lbnQ9eygpID0+IChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxwPnsnRG9uXFwndCBoYXZlIGFuIGFjY291bnQ/J30gPExpbmsgdG89XCIvYXV0aC9zaWdudXBcIj5TaWduIFVwPC9MaW5rPjwvcD5cbiAgICAgICAgICAgICAgPENyZWRlbnRpYWxzIGFjdGlvbj1cIlNpZ24gSW5cIiBzdWJtaXQ9e3NpZ25pbn0vPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX0vPlxuICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2F1dGgvc2lnbnVwXCIgY29tcG9uZW50PXsoKSA9PiAoXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICA8cD5BbHJlYWR5IGhhdmUgYW4gYWNjb3VudD8gPExpbmsgdG89XCIvYXV0aC9zaWduaW5cIj5TaWduIEluPC9MaW5rPjwvcD5cbiAgICAgICAgICAgICAgPENyZWRlbnRpYWxzIGFjdGlvbj1cIlNpZ24gVXBcIiBzdWJtaXQ9e3NpZ251cH0gYWxsb3dOYW1lPXt0cnVlfS8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApfS8+XG4gICAgICAgICAgPFJlZGlyZWN0IHRvPVwiL2F1dGgvc2lnbmluXCIvPlxuICAgICAgICA8L1N3aXRjaD5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChcbiAgc3RhdGUgPT4gKHtcbiAgICB1c2VyOiBnZXRVc2VyKHN0YXRlKVxuICB9KSxcbiAgeyBzaWdudXAsIHNpZ25pbiB9XG4pKEF1dGgpOyIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IGdldEltYWdlcyB9IGZyb20gJy4uL2FsYnVtcy9yZWR1Y2Vycyc7XG5pbXBvcnQgeyBsb2FkSW1hZ2VzIH0gZnJvbSAnLi4vYWxidW1zL2FjdGlvbnMnO1xuaW1wb3J0IFRodW1ibmFpbCBmcm9tICcuLi90aHVtYm5haWwvVGh1bWJuYWlsJztcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi4vYWxidW1zL0FsYnVtcy5jc3MnO1xuXG5jbGFzcyBJbWFnZXMgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgbG9hZEltYWdlczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBpbWFnZXM6IFByb3BUeXBlcy5hcnJheVxuICB9O1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMucHJvcHMubG9hZEltYWdlcygpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgaW1hZ2VzIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmKCFpbWFnZXMpIHJldHVybiBudWxsO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuYWxidW1zfT5cbiAgICAgICAge2ltYWdlcy5tYXAoaW1hZ2UgPT4gPFRodW1ibmFpbCBrZXk9e2ltYWdlLl9pZH0gdXJsPXtpbWFnZS51cmx9IHRpdGxlPXtpbWFnZS50aXRsZX0vPil9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoXG4gIHN0YXRlID0+ICh7IGltYWdlczogZ2V0SW1hZ2VzKHN0YXRlKSB9KSxcbiAgeyBsb2FkSW1hZ2VzIH1cbikoSW1hZ2VzKTsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJiMTcwYWNlYjc2NThlNTVjYWRkNDEyMGI5YzYxN2NjOS5wbmdcIjsiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKHRydWUpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLkYwZ1BPZlJFUFBwTEJKRWljUEI1SiB7XFxuICBmb250LWZhbWlseTogUm9ib3RvLCBIZWx2ZXRpY2E7XFxuICBtYXJnaW46IDAgNWVtO1xcbn1cXG5cXG4gIC5GMGdQT2ZSRVBQcExCSkVpY1BCNUogYSB7XFxuICAgIHdpZHRoOiAtd2Via2l0LWZpdC1jb250ZW50O1xcbiAgICB3aWR0aDogLW1vei1maXQtY29udGVudDtcXG4gICAgd2lkdGg6IGZpdC1jb250ZW50O1xcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICB9XCIsIFwiXCIsIHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIi9Vc2Vycy9zdGVwaGFuaWVzbWl0aC9BQ0wvRnVsbFN0YWNrL1NuYXBTaG90L1NuYXBTaG90LUFwcC9zcmMvY29tcG9uZW50cy9hYm91dC9BYm91dC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSwrQkFBK0I7RUFDL0IsY0FBYztDQU1mOztFQUpDO0lBQ0UsMkJBQW1CO0lBQW5CLHdCQUFtQjtJQUFuQixtQkFBbUI7SUFDbkIsc0JBQXNCO0dBQ3ZCXCIsXCJmaWxlXCI6XCJBYm91dC5jc3NcIixcInNvdXJjZXNDb250ZW50XCI6W1wiOmxvY2FsKC5hYm91dCkge1xcbiAgZm9udC1mYW1pbHk6IFJvYm90bywgSGVsdmV0aWNhO1xcbiAgbWFyZ2luOiAwIDVlbTtcXG5cXG4gIGEge1xcbiAgICB3aWR0aDogZml0LWNvbnRlbnQ7XFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gIH1cXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG5cbi8vIGV4cG9ydHNcbmV4cG9ydHMubG9jYWxzID0ge1xuXHRcImFib3V0XCI6IFwiRjBnUE9mUkVQUHBMQkpFaWNQQjVKXCJcbn07IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTUtMiEuL0Fib3V0LmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wic291cmNlTWFwXCI6dHJ1ZSxcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTUtMiEuL0Fib3V0LmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTUtMiEuL0Fib3V0LmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVGh1bWJuYWlsIGZyb20gJy4uL3RodW1ibmFpbC9UaHVtYm5haWwnO1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0Fib3V0LmNzcyc7XG5pbXBvcnQgc3RlcGggZnJvbSAnLi9zdGVwaC5wbmcnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBYm91dCBleHRlbmRzIENvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5hYm91dH0+XG4gICAgICAgIDxhIGhyZWY9J2h0dHBzOi8vaGFwcHktbm9ydGhjdXR0LWMwOTkyYy5uZXRsaWZ5LmNvbS8nPlxuICAgICAgICAgIDxUaHVtYm5haWwgdXJsPXtzdGVwaH0gdGl0bGU9J0hlbGxvJy8+XG4gICAgICAgIDwvYT5cbiAgICAgICAgPGgxPkkgYW0gU3RlcGhhbmllLjwvaDE+XG4gICAgICAgIDxoMj5JIG1hZGUgdGhpcyBzaXRlLiBIZXJlIGlzIGEgbGl0dGxlIGFib3V0IG1lLjwvaDI+XG4gICAgICAgIDxwPkZ1bGwtU3RhY2sgSmF2YVNjcmlwdCBkZXZlbG9wZXIgd2l0aCBhIGRlZ3JlZSBpbiBpbmR1c3RyaWFsIGRlc2lnbi4gSSBoYXZlIHBhc3Npb24gZm9yIGNvbGxhYm9yYXRpbmcsIGdyb3d0aCwgYW5kIGFuYWx5emluZyBjb2RlIHRvIGZpbmQgc29sdXRpb25zLiBBcyBhbiBhdmlkIGhpa2VyIGFuZCBjcmVhdGl2ZSwgeW91IGNhbiBmaW5kIG1lIGluIHRoZSBtb3VudGFpbnMgbWFraW5nIHZpZGVvcyBhYm91dCB0aGUgUE5XLjwvcD5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IGdldEltYWdlcyB9IGZyb20gJy4uL2FsYnVtcy9yZWR1Y2Vycyc7XG5cbmNsYXNzIEltYWdlR2FsbGVyeSBleHRlbmRzIENvbXBvbmVudCB7XG4gIFxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGltYWdlczogUHJvcFR5cGVzLmFycmF5LFxuICB9O1xuXG4gIHN0YXRlID0ge1xuICAgIGluZGV4OiAwXG4gIH07XG5cbiAgaGFuZGxlSW5kZXgoaW5jcmVtZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCB7IGluZGV4IH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGluZGV4OiBpbmRleCArIGluY3JlbWVudCB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGltYWdlcyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGluZGV4IH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHsgdGl0bGUsIGRlc2NyaXB0aW9uLCB1cmwgfSA9IGltYWdlc1tpbmRleF07XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiB0aGlzLmhhbmRsZUluZGV4KC0xKX0gZGlzYWJsZWQ9e2luZGV4ID09PSAwfT5iYWNrPC9idXR0b24+XG4gICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gdGhpcy5oYW5kbGVJbmRleCgrMSl9IGRpc2FibGVkPXtpbmRleCA9PT0gaW1hZ2VzLmxlbmd0aCAtIDF9Pm5leHQ8L2J1dHRvbj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8aDI+e3RpdGxlfTwvaDI+XG4gICAgICAgICAgPGltZyBzcmM9e3VybH0vPlxuICAgICAgICAgIDxwPntkZXNjcmlwdGlvbn08L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxuICBzdGF0ZSA9PiAoe1xuICAgIGltYWdlczogZ2V0SW1hZ2VzKHN0YXRlKVxuICB9KSxcbiAgbnVsbFxuKShJbWFnZUdhbGxlcnkpOyIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IGdldEltYWdlcyB9IGZyb20gJy4uL2FsYnVtcy9yZWR1Y2Vycyc7XG5cblxuY2xhc3MgSW1hZ2VEZXRhaWxzIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgaW1hZ2VzOiBQcm9wVHlwZXMuYXJyYXlcbiAgfTsgXG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgaW1hZ2VzIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDx1bD5cbiAgICAgICAge2ltYWdlcyAmJiBpbWFnZXMubWFwKGltYWdlID0+IDxsaSBrZXk9e2ltYWdlLl9pZH0+XG4gICAgICAgICAgPGgzPntpbWFnZS50aXRsZX08L2gzPlxuICAgICAgICAgIDxwPntpbWFnZS5kZXNjcmlwdGlvbn08L3A+XG4gICAgICAgICAgPHA+e2ltYWdlLnRpdGxlfTwvcD5cbiAgICAgICAgPC9saT4pfVxuICAgICAgPC91bD5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoXG4gIHN0YXRlID0+ICh7IFxuICAgIGltYWdlczogZ2V0SW1hZ2VzKHN0YXRlKVxuICB9KSxcbiAgbnVsbFxuKShJbWFnZURldGFpbHMpOyIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgVGh1bWJuYWlsIGZyb20gJy4uL3RodW1ibmFpbC9UaHVtYm5haWwnO1xuaW1wb3J0IHsgZ2V0QWxidW0sIGdldEltYWdlcyB9IGZyb20gJy4uL2FsYnVtcy9yZWR1Y2Vycyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi4vYWxidW1zL0FsYnVtcy5jc3MnO1xuaW1wb3J0IHsgZ2V0VXNlciB9IGZyb20gJy4uL2F1dGgvcmVkdWNlcnMnO1xuXG5jbGFzcyBBbGJ1bUltYWdlcyBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBhbGJ1bTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBpbWFnZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgICB1c2VyOiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgaW1hZ2VzLCBhbGJ1bSwgdXNlciB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmFsYnVtc30+XG4gICAgICAgIHt1c2VyICYmIDxMaW5rIHRvPXtgL2FsYnVtcy8ke2FsYnVtLl9pZH0vaW1hZ2VzL25ld2B9PlxuICAgICAgICAgIDxUaHVtYm5haWwgdXJsPVwiaHR0cHM6Ly9kaGFybWFtZXJjaGFudHNlcnZpY2VzLmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAxNS8wNi9hZGQucG5nXCIgdGl0bGU9XCJcIi8+XG4gICAgICAgIDwvTGluaz59XG4gICAgICAgIHtpbWFnZXMgJiYgaW1hZ2VzLm1hcChpbWFnZSA9PiA8VGh1bWJuYWlsXG4gICAgICAgICAga2V5PXtpbWFnZS5faWR9XG4gICAgICAgICAgdXJsPXtpbWFnZS51cmx9XG4gICAgICAgICAgdGl0bGU9e2ltYWdlLnRpdGxlfS8+KX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChcbiAgc3RhdGUgPT4gKHsgXG4gICAgYWxidW06IGdldEFsYnVtKHN0YXRlKSxcbiAgICBpbWFnZXM6IGdldEltYWdlcyhzdGF0ZSksXG4gICAgdXNlcjogZ2V0VXNlcihzdGF0ZSlcbiAgfSksXG4gIG51bGxcbikoQWxidW1JbWFnZXMpOyIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IGNyZWF0ZUltYWdlIH0gZnJvbSAnLi4vYWxidW1zL2FjdGlvbnMnO1xuaW1wb3J0IHsgZ2V0SW1hZ2VzLCBnZXRBbGJ1bSB9IGZyb20gJy4uL2FsYnVtcy9yZWR1Y2Vycyc7XG5cblxuY29uc3QgZGVmYXVsdFN0YXRlID0ge1xuICB0aXRsZTogJycsXG4gIGRlc2NyaXB0aW9uOiAnJyxcbiAgdXJsOiAnJ1xufTtcblxuY2xhc3MgTmV3SW1hZ2UgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY3JlYXRlSW1hZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgYWxidW1JZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoeyBpbWFnZSB9LCB7IGVkaXQgfSkge1xuICAgIGlmKGVkaXQpIHJldHVybiBudWxsO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGVkaXQ6IGltYWdlID8geyAuLi5pbWFnZSB9IDogeyAuLi5kZWZhdWx0U3RhdGUgfVxuICAgIH07IFxuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKXtcbiAgICB0aGlzLnNldFN0YXRlKHsgXG4gICAgICBlZGl0OiB7IGFsYnVtSWQ6IHRoaXMucHJvcHMuYWxidW1JZCwgLi4udGhpcy5zdGF0ZS5lZGl0IH1cbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRlID0ge1xuICAgIGVkaXQ6IG51bGxcbiAgfTtcblxuICBoYW5kbGVDaGFuZ2UgPSAoeyB0YXJnZXQgfSkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoKHsgZWRpdCB9KSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBlZGl0OiB7XG4gICAgICAgICAgLi4uZWRpdCxcbiAgICAgICAgICBbdGFyZ2V0LnBsYWNlaG9sZGVyXTogdGFyZ2V0LnZhbHVlXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gIH07XG5cbiAgaGFuZGxlU3VibWl0ID0gZXZlbnQgPT4ge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5wcm9wcy5jcmVhdGVJbWFnZSh0aGlzLnN0YXRlLmVkaXQpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZWRpdDogeyAuLi5kZWZhdWx0U3RhdGUgfVxuICAgIH0pO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcblxuICAgIGNvbnN0IHsgdGl0bGUsIGRlc2NyaXB0aW9uLCB1cmwgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGZvcm0gb25TdWJtaXQ9e3RoaXMuaGFuZGxlU3VibWl0fT5cbiAgICAgICAgPGlucHV0IHBsYWNlaG9sZGVyPVwidGl0bGVcIiB2YWx1ZT17dGl0bGV9IG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX0vPlxuICAgICAgICA8aW5wdXQgcGxhY2Vob2xkZXI9XCJkZXNjcmlwdGlvblwiIHZhbHVlPXtkZXNjcmlwdGlvbn0gb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfS8+XG4gICAgICAgIDxpbnB1dCBwbGFjZWhvbGRlcj1cInVybFwiIHZhbHVlPXt1cmx9IG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX0vPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIj5BZGQgSW1hZ2U8L2J1dHRvbj5cbiAgICAgIDwvZm9ybT5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoXG4gIHN0YXRlID0+ICh7IFxuICAgIGltYWdlczogZ2V0SW1hZ2VzKHN0YXRlKSxcbiAgICBhbGJ1bUlkOiBnZXRBbGJ1bShzdGF0ZSkuX2lkXG4gIH0pLFxuICB7IGNyZWF0ZUltYWdlIH1cbikoTmV3SW1hZ2UpO1xuXG5cbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyLCBTd2l0Y2gsIFJvdXRlLCBSZWRpcmVjdCwgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IFByaXZhdGVSb3V0ZSBmcm9tICcuLi9hcHAvUHJpdmF0ZVJvdXRlJztcbmltcG9ydCB7IGdldEFsYnVtLCBnZXRJbWFnZXMgfSBmcm9tICcuL3JlZHVjZXJzJztcbmltcG9ydCB7IGxvYWRBbGJ1bSB9IGZyb20gJy4vYWN0aW9ucyc7XG5pbXBvcnQgTmV3SW1hZ2UgZnJvbSAnLi4vaW1hZ2VzL05ld0ltYWdlJztcbmltcG9ydCBBbGJ1bUltYWdlcyBmcm9tICcuLi9pbWFnZXMvQWxidW1JbWFnZXMnO1xuaW1wb3J0IEltYWdlRGV0YWlscyBmcm9tICcuLi9pbWFnZXMvSW1hZ2VEZXRhaWxzJztcbmltcG9ydCBJbWFnZUdhbGxlcnkgZnJvbSAnLi4vaW1hZ2VzL0ltYWdlR2FsbGVyeSc7XG5cbmNsYXNzIEFsYnVtRGV0YWlsIGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGFsYnVtOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGltYWdlczogUHJvcFR5cGVzLmFycmF5LFxuICAgIG1hdGNoOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxvYWRBbGJ1bTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICB9O1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMucHJvcHMubG9hZEFsYnVtKHRoaXMucHJvcHMubWF0Y2gucGFyYW1zLmlkKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGFsYnVtIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgdGl0bGUsIGRlc2NyaXB0aW9uLCBwb3N0ZXJJbWFnZSB9ID0gYWxidW07XG4gICAgXG4gICAgcmV0dXJuIChcbiAgICAgIDxSb3V0ZXI+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAge3RpdGxlID8gPGgxPnt0aXRsZX08L2gxPiA6IDxoMT5ObyB0aXRsZTwvaDE+fVxuICAgICAgICAgIHtkZXNjcmlwdGlvbiA/IDxwPntkZXNjcmlwdGlvbn08L3A+IDogPHA+Tm8gZGVzY3JpcHRpb248L3A+fVxuICAgICAgICAgIHtwb3N0ZXJJbWFnZSA/IDxpbWcgc3JjPXtwb3N0ZXJJbWFnZX0vPiA6IDxoMT5ObyBDb3ZlciBJbWFnZTwvaDE+fVxuICAgICAgICAgIDxuYXY+XG4gICAgICAgICAgICA8TGluayB0bz17YC9hbGJ1bXMvJHthbGJ1bS5faWR9L2ltYWdlcy90aHVtYm5haWxgfT5UaHVtYm5haWxzPC9MaW5rPlxuICAgICAgICAgICZuYnNwO1xuICAgICAgICAgICAgPExpbmsgdG89e2AvYWxidW1zLyR7YWxidW0uX2lkfS9pbWFnZXMvbGlzdGB9PkltYWdlIERldGFpbHM8L0xpbms+XG4gICAgICAgICAgJm5ic3A7XG4gICAgICAgICAgICA8TGluayB0bz17YC9hbGJ1bXMvJHthbGJ1bS5faWR9L2ltYWdlcy9nYWxsZXJ5YH0+SW1hZ2UgR2FsbGVyeTwvTGluaz5cbiAgICAgICAgICAmbmJzcDtcbiAgICAgICAgICA8L25hdj5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPFN3aXRjaD5cbiAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9e2AvYWxidW1zLyR7YWxidW0uX2lkfS9pbWFnZXMvdGh1bWJuYWlsYH0gY29tcG9uZW50PXtBbGJ1bUltYWdlc30vPlxuICAgICAgICAgICAgICA8Um91dGUgcGF0aD17YC9hbGJ1bXMvJHthbGJ1bS5faWR9L2ltYWdlcy9nYWxsZXJ5YH0gY29tcG9uZW50PXtJbWFnZUdhbGxlcnl9Lz5cbiAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9e2AvYWxidW1zLyR7YWxidW0uX2lkfS9pbWFnZXMvbGlzdGB9IGNvbXBvbmVudD17SW1hZ2VEZXRhaWxzfS8+XG4gICAgICAgICAgICAgIDxQcml2YXRlUm91dGUgcGF0aD17YC9hbGJ1bXMvJHthbGJ1bS5faWR9L2ltYWdlcy9uZXdgfSBjb21wb25lbnQ9e05ld0ltYWdlfS8+XG4gICAgICAgICAgICAgIDxSZWRpcmVjdCB0bz17YC9hbGJ1bXMvJHthbGJ1bS5faWR9L2ltYWdlcy90aHVtYm5haWxgfS8+XG4gICAgICAgICAgICA8L1N3aXRjaD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L1JvdXRlcj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoXG4gIHN0YXRlID0+ICh7IFxuICAgIGFsYnVtOiBnZXRBbGJ1bShzdGF0ZSksXG4gICAgaW1hZ2VzOiBnZXRJbWFnZXMoc3RhdGUpXG4gIH0pLFxuICB7IGxvYWRBbGJ1bSB9XG4pKEFsYnVtRGV0YWlsKTsiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBjcmVhdGVBbGJ1bSB9IGZyb20gJy4vYWN0aW9ucyc7XG5pbXBvcnQgeyBnZXRBbGJ1bXMgfSBmcm9tICcuL3JlZHVjZXJzJztcblxuY29uc3QgZGVmYXVsdFN0YXRlID0ge1xuICB0aXRsZTogJycsXG4gIGRlc2NyaXB0aW9uOiAnJyxcbiAgcG9zdGVySW1hZ2U6ICcnXG59O1xuXG5cbmNsYXNzIE5ld0FsYnVtIGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNyZWF0ZUFsYnVtOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoeyBhbGJ1bSB9LCB7IGVkaXQgfSkge1xuICAgIGlmKGVkaXQpIHJldHVybiBudWxsO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGVkaXQ6IGFsYnVtID8geyAuLi5hbGJ1bSB9IDogeyAuLi5kZWZhdWx0U3RhdGUgfVxuICAgIH07IFxuICB9XG5cbiAgc3RhdGUgPSB7XG4gICAgZWRpdDogbnVsbFxuICB9O1xuXG4gIGhhbmRsZUNoYW5nZSA9ICh7IHRhcmdldCB9KSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSgoeyBlZGl0IH0pID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVkaXQ6IHtcbiAgICAgICAgICAuLi5lZGl0LFxuICAgICAgICAgIFt0YXJnZXQucGxhY2Vob2xkZXJdOiB0YXJnZXQudmFsdWVcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgfTtcblxuICBoYW5kbGVTdWJtaXQgPSBldmVudCA9PiB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLnByb3BzLmNyZWF0ZUFsYnVtKHRoaXMuc3RhdGUuZWRpdCk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBlZGl0OiB7IC4uLmRlZmF1bHRTdGF0ZSB9XG4gICAgfSk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuXG4gICAgY29uc3QgeyB0aXRsZSwgZGVzY3JpcHRpb24sIHBvc3RlckltYWdlIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxmb3JtIG9uU3VibWl0PXt0aGlzLmhhbmRsZVN1Ym1pdH0+XG4gICAgICAgIDxpbnB1dCBwbGFjZWhvbGRlcj1cInRpdGxlXCIgdmFsdWU9e3RpdGxlfSBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9Lz5cbiAgICAgICAgPGlucHV0IHBsYWNlaG9sZGVyPVwiZGVzY3JpcHRpb25cIiB2YWx1ZT17ZGVzY3JpcHRpb259IG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX0vPlxuICAgICAgICA8aW5wdXQgcGxhY2Vob2xkZXI9XCJwb3N0ZXJJbWFnZVwiIHZhbHVlPXtwb3N0ZXJJbWFnZX0gb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfS8+XG4gICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiPkFkZCBBbGJ1bTwvYnV0dG9uPlxuICAgICAgPC9mb3JtPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChcbiAgc3RhdGUgPT4gKHsgYWxidW1zOiBnZXRBbGJ1bXMoc3RhdGUpIH0pLFxuICB7IGNyZWF0ZUFsYnVtIH1cbikoTmV3QWxidW0pO1xuXG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKHRydWUpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLl8zUDZCODVPQm0yanFoM1FpaXdVVlIxIHtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLWNvbHVtbi1nYXA6IDJyZW07XFxuICBncmlkLXJvdy1nYXA6IDJyZW07XFxuICBhbGlnbi1jb250ZW50OiBzcGFjZS1ldmVubHk7XFxuICBtYXJnaW46IDAgYXV0bztcXG59XFxuXFxuICAuXzNQNkI4NU9CbTJqcWgzUWlpd1VWUjEgYSB7XFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gIH1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogODAwcHgpIHtcXG5cXG4gIC5fM1A2Qjg1T0JtMmpxaDNRaWl3VVZSMSB7XFxuICAgIG1heC13aWR0aDogNzAwcHg7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmcjtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDExNTBweCkge1xcblxcbiAgLl8zUDZCODVPQm0yanFoM1FpaXdVVlIxIHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyIDFmcjtcXG4gICAgbWF4LXdpZHRoOiAxMDUwcHg7XFxuICB9XFxufVwiLCBcIlwiLCB7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCIvVXNlcnMvc3RlcGhhbmllc21pdGgvQUNML0Z1bGxTdGFjay9TbmFwU2hvdC9TbmFwU2hvdC1BcHAvc3JjL2NvbXBvbmVudHMvYWxidW1zL0FsYnVtcy5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxjQUFjO0VBQ2Qsc0JBQXNCO0VBQ3RCLG1CQUFtQjtFQUNuQiw0QkFBNEI7RUFDNUIsZUFBZTtDQWdCaEI7O0VBZEM7SUFDRSxzQkFBc0I7R0FDdkI7O0FBRUQ7O0VBWEY7SUFZSSxpQkFBaUI7SUFDakIsY0FBYztJQUNkLCtCQUErQjtHQU9sQztDQU5FOztBQUNEOztFQWhCRjtJQWlCSSxjQUFjO0lBQ2QsbUNBQW1DO0lBQ25DLGtCQUFrQjtHQUVyQjtDQURFXCIsXCJmaWxlXCI6XCJBbGJ1bXMuY3NzXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIjpsb2NhbCguYWxidW1zKSB7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC1jb2x1bW4tZ2FwOiAycmVtO1xcbiAgZ3JpZC1yb3ctZ2FwOiAycmVtO1xcbiAgYWxpZ24tY29udGVudDogc3BhY2UtZXZlbmx5O1xcbiAgbWFyZ2luOiAwIGF1dG87XFxuXFxuICBhIHtcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgfVxcblxcbiAgQG1lZGlhIChtaW4td2lkdGg6IDgwMHB4KSB7XFxuICAgIG1heC13aWR0aDogNzAwcHg7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmcjtcXG4gIH1cXG4gIEBtZWRpYSAobWluLXdpZHRoOiAxMTUwcHgpIHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyIDFmcjtcXG4gICAgbWF4LXdpZHRoOiAxMDUwcHg7XFxuICB9XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuXG4vLyBleHBvcnRzXG5leHBvcnRzLmxvY2FscyA9IHtcblx0XCJhbGJ1bXNcIjogXCJfM1A2Qjg1T0JtMmpxaDNRaWl3VVZSMVwiXG59OyIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikodHJ1ZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuXzJheXhmYlEyWXFFaHBjdm43MU43Y2Qge1xcbiAgaGVpZ2h0OiAxMDB2dztcXG4gIHdpZHRoOiAxMDB2dztcXG4gIG1heC13aWR0aDogMzI1cHg7XFxuICBtYXgtaGVpZ2h0OiAzMjVweDtcXG4gIG1hcmdpbjogYXV0bztcXG4gIGNvbG9yOiBibGFjaztcXG4gIGZvbnQtZmFtaWx5OiBSb2JvdG8sIEhlbHZldGljYTtcXG4gIGZvbnQtd2VpZ2h0OiAxMDA7XFxuICBmb250LXNpemU6IDFlbTtcXG4gIGJveC1zaGFkb3c6IDJweCAycHggMTBweCByZ2JhKDgyLCA4MiwgODIsIDAuNjYpO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7IFxcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcXG59XFxuICBcXG4gIC5fMmF5eGZiUTJZcUVocGN2bjcxTjdjZCBoMiB7XFxuICAgIHdpZHRoOiAtd2Via2l0LWZpdC1jb250ZW50O1xcbiAgICB3aWR0aDogLW1vei1maXQtY29udGVudDtcXG4gICAgd2lkdGg6IGZpdC1jb250ZW50O1xcbiAgICBtYXJnaW46IC4yNWVtIC41ZW07XFxuICAgIGZvbnQtc2l6ZTogM2VtO1xcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgdGV4dC1zaGFkb3c6IDEuNXB4IDEuNXB4IDVweCByZ2JhKDgyLCA4MiwgODIsIDAuNjYpO1xcbiAgfVxcbiAgXFxuQG1lZGlhIChtaW4td2lkdGg6IDcwMHB4KSB7XFxuICBcXG4gIC5fMmF5eGZiUTJZcUVocGN2bjcxTjdjZCB7XFxuICAgIGhlaWdodDogNTB2dztcXG4gICAgd2lkdGg6IDUwdnc7XFxuICB9XFxufVxcbiAgXFxuQG1lZGlhIChtaW4td2lkdGg6IDEwNTBweCkge1xcbiAgXFxuICAuXzJheXhmYlEyWXFFaHBjdm43MU43Y2Qge1xcbiAgICBoZWlnaHQ6IDMzdnc7XFxuICAgIHdpZHRoOiAzM3Z3O1xcbiAgfVxcbn1cXG5cIiwgXCJcIiwge1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wiL1VzZXJzL3N0ZXBoYW5pZXNtaXRoL0FDTC9GdWxsU3RhY2svU25hcFNob3QvU25hcFNob3QtQXBwL3NyYy9jb21wb25lbnRzL3RodW1ibmFpbC9UaHVtYm5haWwuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsY0FBYztFQUNkLGFBQWE7RUFDYixpQkFBaUI7RUFDakIsa0JBQWtCO0VBQ2xCLGFBQWE7RUFDYixhQUFhO0VBQ2IsK0JBQStCO0VBQy9CLGlCQUFpQjtFQUNqQixlQUFlO0VBQ2YsZ0RBQWdEO0VBQ2hELGlCQUFpQjtFQUNqQiw2QkFBNkI7RUFDN0IsNEJBQTRCO0VBQzVCLHVCQUF1QjtDQW9CeEI7O0VBbEJDO0lBQ0UsMkJBQW1CO0lBQW5CLHdCQUFtQjtJQUFuQixtQkFBbUI7SUFDbkIsbUJBQW1CO0lBQ25CLGVBQWU7SUFDZixzQkFBc0I7SUFDdEIsYUFBYTtJQUNiLG9EQUFvRDtHQUNyRDs7QUFFRDs7RUF6QkY7SUEwQkksYUFBYTtJQUNiLFlBQVk7R0FPZjtDQU5FOztBQUVEOztFQTlCRjtJQStCSSxhQUFhO0lBQ2IsWUFBWTtHQUVmO0NBREVcIixcImZpbGVcIjpcIlRodW1ibmFpbC5jc3NcIixcInNvdXJjZXNDb250ZW50XCI6W1wiOmxvY2FsKC50aHVtYm5haWwpIHtcXG4gIGhlaWdodDogMTAwdnc7XFxuICB3aWR0aDogMTAwdnc7XFxuICBtYXgtd2lkdGg6IDMyNXB4O1xcbiAgbWF4LWhlaWdodDogMzI1cHg7XFxuICBtYXJnaW46IGF1dG87XFxuICBjb2xvcjogYmxhY2s7XFxuICBmb250LWZhbWlseTogUm9ib3RvLCBIZWx2ZXRpY2E7XFxuICBmb250LXdlaWdodDogMTAwO1xcbiAgZm9udC1zaXplOiAxZW07XFxuICBib3gtc2hhZG93OiAycHggMnB4IDEwcHggcmdiYSg4MiwgODIsIDgyLCAwLjY2KTtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyOyBcXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XFxuICBcXG4gIGgyIHtcXG4gICAgd2lkdGg6IGZpdC1jb250ZW50O1xcbiAgICBtYXJnaW46IC4yNWVtIC41ZW07XFxuICAgIGZvbnQtc2l6ZTogM2VtO1xcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgdGV4dC1zaGFkb3c6IDEuNXB4IDEuNXB4IDVweCByZ2JhKDgyLCA4MiwgODIsIDAuNjYpO1xcbiAgfVxcblxcbiAgQG1lZGlhIChtaW4td2lkdGg6IDcwMHB4KSB7XFxuICAgIGhlaWdodDogNTB2dztcXG4gICAgd2lkdGg6IDUwdnc7XFxuICB9XFxuXFxuICBAbWVkaWEgKG1pbi13aWR0aDogMTA1MHB4KSB7XFxuICAgIGhlaWdodDogMzN2dztcXG4gICAgd2lkdGg6IDMzdnc7XFxuICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuXG4vLyBleHBvcnRzXG5leHBvcnRzLmxvY2FscyA9IHtcblx0XCJ0aHVtYm5haWxcIjogXCJfMmF5eGZiUTJZcUVocGN2bjcxTjdjZFwiXG59OyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS01LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS01LTIhLi9UaHVtYm5haWwuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJzb3VyY2VNYXBcIjp0cnVlLFwiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNS0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tNS0yIS4vVGh1bWJuYWlsLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTUtMiEuL1RodW1ibmFpbC5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBnZXRBbGJ1bXMgfSBmcm9tICcuL3JlZHVjZXJzJztcbmltcG9ydCB7IGxvYWRBbGJ1bXMgfSBmcm9tICcuL2FjdGlvbnMnO1xuaW1wb3J0IFRodW1ibmFpbCBmcm9tICcuLi90aHVtYm5haWwvVGh1bWJuYWlsJztcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9BbGJ1bXMuY3NzJztcblxuY2xhc3MgQWxidW1zIGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGxvYWRBbGJ1bXM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgYWxidW1zOiBQcm9wVHlwZXMuYXJyYXlcbiAgfTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnByb3BzLmxvYWRBbGJ1bXMoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGFsYnVtcyB9ID0gdGhpcy5wcm9wcztcbiAgICBpZighYWxidW1zKSByZXR1cm4gbnVsbDtcbiAgICBcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5hbGJ1bXN9PlxuICAgICAgICA8TGluayB0bz1cIi9hbGJ1bXMvbmV3XCI+XG4gICAgICAgICAgPFRodW1ibmFpbCB1cmw9XCJodHRwczovL2RoYXJtYW1lcmNoYW50c2VydmljZXMuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDE1LzA2L2FkZC5wbmdcIiB0aXRsZT1cIlwiLz5cbiAgICAgICAgPC9MaW5rPlxuICAgICAgICB7YWxidW1zLm1hcChhbGJ1bSA9PiA8TGluayBrZXk9e2FsYnVtLl9pZH0gdG89e2AvYWxidW1zLyR7YWxidW0uX2lkfS9pbWFnZXMvdGh1bWJuYWlsYH0+XG4gICAgICAgICAgPFRodW1ibmFpbCB1cmw9e2FsYnVtLnBvc3RlckltYWdlfSB0aXRsZT17YWxidW0udGl0bGV9Lz5cbiAgICAgICAgPC9MaW5rPlxuICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxuICBzdGF0ZSA9PiAoeyBhbGJ1bXM6IGdldEFsYnVtcyhzdGF0ZSkgfSksXG4gIHsgbG9hZEFsYnVtcyB9XG4pKEFsYnVtcyk7XG4iLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikodHJ1ZSk7XG4vLyBpbXBvcnRzXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9Um9ib3RvOjkwMCk7XCIsIFwiXCJdKTtcblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuXzNBR2x0LUdnM2NKd2pFbGJOaEh2eFoge1xcbiAgd2lkdGg6IDEwMHZ3O1xcbiAgZm9udC1mYW1pbHk6ICdSb2JvdG8nO1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtdGVtcGxhdGUtcm93czogMTAwdmggNTBweDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICByaWdodDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVaKC0xcHgpIHNjYWxlKDIpO1xcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooLTFweCkgc2NhbGUoMik7XFxufVxcblxcbi5fM0FHbHQtR2czY0p3akVsYk5oSHZ4WiBpbWcge1xcbiAgICAgIGhlaWdodDogMTAwdmg7XFxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgIG1hcmdpbi1sZWZ0OiA1MCU7XFxuICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTU0JSk7XFxuICAgICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTU0JSk7XFxuICAgICAgei1pbmRleDogLTE7XFxuICAgICAgYm94LXNoYWRvdzogaW5zZXQgMCAtNGVtIDE1ZW0gYmxhY2s7XFxuICAgICAgfVxcblxcbi5fM0FHbHQtR2czY0p3akVsYk5oSHZ4WiBoMSB7XFxuICAgICAgZm9udC13ZWlnaHQ6IDkwMGk7XFxuICAgICAgY29sb3I6IHdoaXRlO1xcbiAgICAgIGZvbnQtc2l6ZTogNWVtO1xcbiAgICAgIHdpZHRoOiAtd2Via2l0LWZpdC1jb250ZW50O1xcbiAgICAgIHdpZHRoOiAtbW96LWZpdC1jb250ZW50O1xcbiAgICAgIHdpZHRoOiBmaXQtY29udGVudDtcXG4gICAgICBtYXJnaW46IDQ1dmggYXV0byBhdXRvIGF1dG87XFxuICAgIH1cXG5cXG4uXzNBR2x0LUdnM2NKd2pFbGJOaEh2eFogbmF2IHtcXG4gIC8vICAgYmFja2dyb3VuZC1jb2xvcjogYXF1YTtcXG4gIC8vICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgLy8gICBtYXJnaW46IDAgYXV0bztcXG4gIC8vICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgfVwiLCBcIlwiLCB7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCIvVXNlcnMvc3RlcGhhbmllc21pdGgvQUNML0Z1bGxTdGFjay9TbmFwU2hvdC9TbmFwU2hvdC1BcHAvc3JjL2NvbXBvbmVudHMvYXBwL0hlYWRlci5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUE7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLGNBQWM7RUFDZCwrQkFBK0I7RUFDL0IsbUJBQW1CO0VBQ25CLE9BQU87RUFDUCxRQUFRO0VBQ1IsU0FBUztFQUNULFVBQVU7RUFDViw2Q0FBcUM7VUFBckMscUNBQXFDO0NBeUJ0Qzs7QUF2Qkc7TUFDRSxjQUFjO01BQ2QsbUJBQW1CO01BQ25CLGlCQUFpQjtNQUNqQixvQ0FBNEI7Y0FBNUIsNEJBQTRCO01BQzVCLFlBQVk7TUFDWixvQ0FBb0M7T0FDbkM7O0FBRUg7TUFDRSxrQkFBa0I7TUFDbEIsYUFBYTtNQUNiLGVBQWU7TUFDZiwyQkFBbUI7TUFBbkIsd0JBQW1CO01BQW5CLG1CQUFtQjtNQUNuQiw0QkFBNEI7S0FDN0I7O0FBRUg7RUFDQSw0QkFBNEI7RUFDNUIsd0JBQXdCO0VBQ3hCLG9CQUFvQjtFQUNwQix3QkFBd0I7R0FDdkJcIixcImZpbGVcIjpcIkhlYWRlci5jc3NcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCB1cmwoJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1Sb2JvdG86OTAwJyk7XFxuXFxuOmxvY2FsKC5oZWFkZXIpIHtcXG4gIHdpZHRoOiAxMDB2dztcXG4gIGZvbnQtZmFtaWx5OiAnUm9ib3RvJztcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlLXJvd3M6IDEwMHZoIDUwcHg7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBib3R0b206IDA7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVooLTFweCkgc2NhbGUoMik7XFxuICAgICBcXG4gICAgaW1nIHtcXG4gICAgICBoZWlnaHQ6IDEwMHZoO1xcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICBtYXJnaW4tbGVmdDogNTAlO1xcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTQlKTtcXG4gICAgICB6LWluZGV4OiAtMTtcXG4gICAgICBib3gtc2hhZG93OiBpbnNldCAwIC00ZW0gMTVlbSBibGFjaztcXG4gICAgICB9XFxuICBcXG4gICAgaDEge1xcbiAgICAgIGZvbnQtd2VpZ2h0OiA5MDBpO1xcbiAgICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgICBmb250LXNpemU6IDVlbTtcXG4gICAgICB3aWR0aDogZml0LWNvbnRlbnQ7XFxuICAgICAgbWFyZ2luOiA0NXZoIGF1dG8gYXV0byBhdXRvO1xcbiAgICB9XFxuXFxuICBuYXYge1xcbiAgLy8gICBiYWNrZ3JvdW5kLWNvbG9yOiBhcXVhO1xcbiAgLy8gICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAvLyAgIG1hcmdpbjogMCBhdXRvO1xcbiAgLy8gICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB9XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuXG4vLyBleHBvcnRzXG5leHBvcnRzLmxvY2FscyA9IHtcblx0XCJoZWFkZXJcIjogXCJfM0FHbHQtR2czY0p3akVsYk5oSHZ4WlwiXG59OyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS01LTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS01LTIhLi9IZWFkZXIuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJzb3VyY2VNYXBcIjp0cnVlLFwiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNS0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tNS0yIS4vSGVhZGVyLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTUtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTUtMiEuL0hlYWRlci5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI5ZWVhNmU5ZDYyNjkzMTcyODhjNTg4MjI0NzRlNDlkZC5qcGdcIjsiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBnZXRVc2VyIH0gZnJvbSAnLi4vYXV0aC9yZWR1Y2Vycyc7XG5pbXBvcnQgeyBsb2dvdXQgfSBmcm9tICcuLi9hdXRoL2FjdGlvbnMnO1xuaW1wb3J0IGhlcm8gZnJvbSAnLi4vYXBwL2hlcm8uanBnJztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0hlYWRlci5jc3MnO1xuXG5jbGFzcyBIZWFkZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgdXNlcjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICAvLyBsb2dvdXQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgfTtcblxuICAvLyBoYW5kbGVMb2dvdXQgPSAoKSA9PiB7XG4gIC8vICAgdGhpcy5wcm9wcy5sb2dvdXQoKTtcbiAgLy8gfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB1c2VyIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxoZWFkZXIgY2xhc3NOYW1lPXtzdHlsZXMuaGVhZGVyfT5cbiAgICAgICAgPGltZyBzcmM9e2hlcm99Lz5cbiAgICAgICAgPGgxPlNuYXBTaG90PC9oMT5cbiAgICAgICAgeyB1c2VyICYmIDxzcGFuPkhlbGxvIHt1c2VyLm5hbWV9ITwvc3Bhbj4gfVxuXG4gICAgICAgIHsvKiA8bmF2PlxuICAgICAgICAgIDxMaW5rIHRvPVwiL2FsYnVtc1wiPkFsYnVtczwvTGluaz5cbiAgICAgICAgICAgICZuYnNwO1xuICAgICAgICAgIDxMaW5rIHRvPVwiL2Fib3V0XCI+QWJvdXQ8L0xpbms+XG4gICAgICAgICAgICAmbmJzcDtcbiAgICAgICAgICA8TGluayB0bz1cIi9pbWFnZXNcIj5JbWFnZXM8L0xpbms+XG4gICAgICAgICAgICAmbmJzcDtcbiAgICAgICAgICB7XG4gICAgICAgICAgICB1c2VyXG4gICAgICAgICAgICAgID8gPExpbmsgdG89XCIvXCIgb25DbGljaz17dGhpcy5oYW5kbGVMb2dvdXR9PkxvZ291dDwvTGluaz5cbiAgICAgICAgICAgICAgOiA8TGluayB0bz1cIi9hdXRoXCI+TG9naW48L0xpbms+XG4gICAgICAgICAgfVxuICAgICAgICA8L25hdj4gKi99XG4gICAgICA8L2hlYWRlcj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoXG4gIHN0YXRlID0+ICh7IHVzZXI6IGdldFVzZXIoc3RhdGUpIH0pLFxuICAvLyB7IGxvZ291dCB9XG4gIG51bGxcbikoSGVhZGVyKTsiLCJpbXBvcnQgeyBMT0FESU5HX1NUQVJULCBMT0FESU5HX0VORCwgRVJST1IgfSBmcm9tICcuLi9jb21wb25lbnRzL2FwcC9yZWR1Y2Vycyc7XG5cbmNvbnN0IGlzUHJvbWlzZSA9IHZhbCA9PiB2YWwgJiYgdHlwZW9mIHZhbC50aGVuID09PSAnZnVuY3Rpb24nO1xuXG5leHBvcnQgZGVmYXVsdCAoeyBkaXNwYXRjaCB9KSA9PiBuZXh0ID0+IGFjdGlvbiA9PiB7XG5cbiAgY29uc3QgeyB0eXBlLCBwYXlsb2FkIH0gPSBhY3Rpb247XG4gIGlmKCFpc1Byb21pc2UocGF5bG9hZCkpIHJldHVybiBuZXh0KGFjdGlvbik7XG5cbiAgZGlzcGF0Y2goeyB0eXBlOiBMT0FESU5HX1NUQVJUIH0pO1xuXG4gIHJldHVybiBwYXlsb2FkXG4gICAgLnRoZW4oXG4gICAgICByZXN1bHQgPT4ge1xuICAgICAgICBkaXNwYXRjaCh7IHR5cGU6IExPQURJTkdfRU5EIH0pO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGRpc3BhdGNoKHtcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIHBheWxvYWQ6IHJlc3VsdFxuICAgICAgICB9KTtcblxuICAgICAgfSxcbiAgICAgIGVyciA9PiB7XG4gICAgICAgIGRpc3BhdGNoKHsgdHlwZTogTE9BRElOR19FTkQgfSk7XG4gICAgICAgIGRpc3BhdGNoKHsgdHlwZTogRVJST1IsIHBheWxvYWQ6IGVyciB9KTtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgICk7XG5cbn07IiwiZnVuY3Rpb24gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKGV4dHJhQXJndW1lbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGRpc3BhdGNoID0gX3JlZi5kaXNwYXRjaCxcbiAgICAgICAgZ2V0U3RhdGUgPSBfcmVmLmdldFN0YXRlO1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gYWN0aW9uKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZXh0cmFBcmd1bWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufVxuXG52YXIgdGh1bmsgPSBjcmVhdGVUaHVua01pZGRsZXdhcmUoKTtcbnRodW5rLndpdGhFeHRyYUFyZ3VtZW50ID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlO1xuXG5leHBvcnQgZGVmYXVsdCB0aHVuazsiLCJtb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyLCBTd2l0Y2gsIFJvdXRlLCBSZWRpcmVjdCwgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IHRyeUxvYWRVc2VyIH0gZnJvbSAnLi4vYXV0aC9hY3Rpb25zJztcbmltcG9ydCB7IGdldENoZWNrZWRBdXRoLCBnZXRVc2VyIH0gZnJvbSAnLi4vYXV0aC9yZWR1Y2Vycyc7XG5pbXBvcnQgUHJpdmF0ZVJvdXRlIGZyb20gJy4vUHJpdmF0ZVJvdXRlJztcbmltcG9ydCBIZWFkZXIgZnJvbSAnLi9IZWFkZXInO1xuaW1wb3J0IEFsYnVtcyBmcm9tICcuLi9hbGJ1bXMvQWxidW1zJztcbmltcG9ydCBOZXdBbGJ1bSBmcm9tICcuLi9hbGJ1bXMvTmV3QWxidW0nO1xuaW1wb3J0IEFsYnVtRGV0YWlsIGZyb20gJy4uL2FsYnVtcy9BbGJ1bURldGFpbCc7XG5pbXBvcnQgQWJvdXQgZnJvbSAnLi4vYWJvdXQvQWJvdXQnO1xuaW1wb3J0IEltYWdlcyBmcm9tICcuLi9pbWFnZXMvSW1hZ2VzJztcbmltcG9ydCBBdXRoIGZyb20gJy4uL2F1dGgvQXV0aCc7XG5pbXBvcnQgeyBsb2dvdXQgfSBmcm9tICcuLi9hdXRoL2FjdGlvbnMnO1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vQXBwLmNzcyc7XG5cbmNsYXNzIEFwcCBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBsb2dvdXQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdHJ5TG9hZFVzZXI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgY2hlY2tlZEF1dGg6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgdXNlcjogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMucHJvcHMudHJ5TG9hZFVzZXIoKTtcbiAgfVxuXG4gIGhhbmRsZUxvZ291dCA9ICgpID0+IHtcbiAgICB0aGlzLnByb3BzLmxvZ291dCgpO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGNoZWNrZWRBdXRoLCB1c2VyIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIFxuICAgICAgPFJvdXRlcj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5hcHB9PlxuICAgICAgICAgIDxIZWFkZXIvPlxuICAgICAgICAgIDxtYWluPlxuICAgICAgICAgICAgPG5hdj5cbiAgICAgICAgICAgICAgPExpbmsgdG89XCIvYWxidW1zXCI+QWxidW1zPC9MaW5rPlxuICAgICAgICAgICAgICAmbmJzcDtcbiAgICAgICAgICAgICAgPExpbmsgdG89XCIvYWJvdXRcIj5BYm91dDwvTGluaz5cbiAgICAgICAgICAgICAgJm5ic3A7XG4gICAgICAgICAgICAgIDxMaW5rIHRvPVwiL2ltYWdlc1wiPkltYWdlczwvTGluaz5cbiAgICAgICAgICAgICAgJm5ic3A7XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB1c2VyXG4gICAgICAgICAgICAgICAgICA/IDxMaW5rIHRvPVwiL1wiIG9uQ2xpY2s9e3RoaXMuaGFuZGxlTG9nb3V0fT5Mb2dvdXQ8L0xpbms+XG4gICAgICAgICAgICAgICAgICA6IDxMaW5rIHRvPVwiL2F1dGhcIj5Mb2dpbjwvTGluaz5cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC9uYXY+XG4gICAgICAgICAgICB7IGNoZWNrZWRBdXRoICYmXG4gICAgICAgICAgICA8U3dpdGNoPlxuICAgICAgICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD1cIi9cIiBjb21wb25lbnQ9e0FsYnVtc30vPlxuICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9hdXRoXCIgY29tcG9uZW50PXtBdXRofS8+XG4gICAgICAgICAgICAgIDxQcml2YXRlUm91dGUgcGF0aD1cIi9hbGJ1bXMvbmV3XCIgY29tcG9uZW50PXtOZXdBbGJ1bX0vPlxuICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9hbGJ1bXMvOmlkL2ltYWdlcy90aHVtYm5haWxcIiBjb21wb25lbnQ9e0FsYnVtRGV0YWlsfS8+XG4gICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2FsYnVtc1wiIGNvbXBvbmVudD17QWxidW1zfS8+XG4gICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2Fib3V0XCIgY29tcG9uZW50PXtBYm91dH0vPlxuICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9pbWFnZXNcIiBjb21wb25lbnQ9e0ltYWdlc30vPlxuICAgICAgICAgICAgICA8UmVkaXJlY3QgdG89XCIvXCIvPlxuICAgICAgICAgICAgPC9Td2l0Y2g+XG4gICAgICAgICAgICB9XG4gICAgICAgICAgPC9tYWluPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvUm91dGVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChcbiAgc3RhdGUgPT4gKHsgXG4gICAgY2hlY2tlZEF1dGg6IGdldENoZWNrZWRBdXRoKHN0YXRlKSxcbiAgICB1c2VyOiBnZXRVc2VyKHN0YXRlKVxuICB9KSxcbiAgeyB0cnlMb2FkVXNlciwgbG9nb3V0IH1cbikoQXBwKTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsTW9kdWxlKSB7XG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMgPSBlbXB0eUZ1bmN0aW9uO1xuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSBub2RlLlxuICovXG5mdW5jdGlvbiBpc05vZGUob2JqZWN0KSB7XG4gIHZhciBkb2MgPSBvYmplY3QgPyBvYmplY3Qub3duZXJEb2N1bWVudCB8fCBvYmplY3QgOiBkb2N1bWVudDtcbiAgdmFyIGRlZmF1bHRWaWV3ID0gZG9jLmRlZmF1bHRWaWV3IHx8IHdpbmRvdztcbiAgcmV0dXJuICEhKG9iamVjdCAmJiAodHlwZW9mIGRlZmF1bHRWaWV3Lk5vZGUgPT09ICdmdW5jdGlvbicgPyBvYmplY3QgaW5zdGFuY2VvZiBkZWZhdWx0Vmlldy5Ob2RlIDogdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iamVjdC5ub2RlVHlwZSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIG9iamVjdC5ub2RlTmFtZSA9PT0gJ3N0cmluZycpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc05vZGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vaXNOb2RlJyk7XG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gdGV4dCBub2RlLlxuICovXG5mdW5jdGlvbiBpc1RleHROb2RlKG9iamVjdCkge1xuICByZXR1cm4gaXNOb2RlKG9iamVjdCkgJiYgb2JqZWN0Lm5vZGVUeXBlID09IDM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNUZXh0Tm9kZTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxudmFyIGlzVGV4dE5vZGUgPSByZXF1aXJlKCcuL2lzVGV4dE5vZGUnKTtcblxuLyplc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlICovXG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgZ2l2ZW4gRE9NIG5vZGUgY29udGFpbnMgb3IgaXMgYW5vdGhlciBET00gbm9kZS5cbiAqL1xuZnVuY3Rpb24gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlKSB7XG4gIGlmICghb3V0ZXJOb2RlIHx8ICFpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlID09PSBpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKG91dGVyTm9kZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShpbm5lck5vZGUpKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZS5wYXJlbnROb2RlKTtcbiAgfSBlbHNlIGlmICgnY29udGFpbnMnIGluIG91dGVyTm9kZSkge1xuICAgIHJldHVybiBvdXRlck5vZGUuY29udGFpbnMoaW5uZXJOb2RlKTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24pIHtcbiAgICByZXR1cm4gISEob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGlubmVyTm9kZSkgJiAxNik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29udGFpbnNOb2RlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqIFxuICovXG5cbi8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBpbmxpbmVkIE9iamVjdC5pcyBwb2x5ZmlsbCB0byBhdm9pZCByZXF1aXJpbmcgY29uc3VtZXJzIHNoaXAgdGhlaXIgb3duXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAqL1xuZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBTYW1lVmFsdWUgYWxnb3JpdGhtXG4gIGlmICh4ID09PSB5KSB7XG4gICAgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICAvLyBBZGRlZCB0aGUgbm9uemVybyB5IGNoZWNrIHRvIG1ha2UgRmxvdyBoYXBweSwgYnV0IGl0IGlzIHJlZHVuZGFudFxuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIC8vIFN0ZXAgNi5hOiBOYU4gPT0gTmFOXG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG4vKipcbiAqIFBlcmZvcm1zIGVxdWFsaXR5IGJ5IGl0ZXJhdGluZyB0aHJvdWdoIGtleXMgb24gYW4gb2JqZWN0IGFuZCByZXR1cm5pbmcgZmFsc2VcbiAqIHdoZW4gYW55IGtleSBoYXMgdmFsdWVzIHdoaWNoIGFyZSBub3Qgc3RyaWN0bHkgZXF1YWwgYmV0d2VlbiB0aGUgYXJndW1lbnRzLlxuICogUmV0dXJucyB0cnVlIHdoZW4gdGhlIHZhbHVlcyBvZiBhbGwga2V5cyBhcmUgc3RyaWN0bHkgZXF1YWwuXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hhbGxvd0VxdWFsOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qIGVzbGludC1kaXNhYmxlIGZiLXd3dy90eXBlb2YtdW5kZWZpbmVkICovXG5cbi8qKlxuICogU2FtZSBhcyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGJ1dCB3cmFwcyBpbiBhIHRyeS1jYXRjaCBibG9jay4gSW4gSUUgaXQgaXNcbiAqIG5vdCBzYWZlIHRvIGNhbGwgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpZiB0aGVyZSBpcyBub3RoaW5nIGZvY3VzZWQuXG4gKlxuICogVGhlIGFjdGl2ZUVsZW1lbnQgd2lsbCBiZSBudWxsIG9ubHkgaWYgdGhlIGRvY3VtZW50IG9yIGRvY3VtZW50IGJvZHkgaXMgbm90XG4gKiB5ZXQgZGVmaW5lZC5cbiAqXG4gKiBAcGFyYW0gez9ET01Eb2N1bWVudH0gZG9jIERlZmF1bHRzIHRvIGN1cnJlbnQgZG9jdW1lbnQuXG4gKiBAcmV0dXJuIHs/RE9NRWxlbWVudH1cbiAqL1xuZnVuY3Rpb24gZ2V0QWN0aXZlRWxlbWVudChkb2MpIC8qP0RPTUVsZW1lbnQqL3tcbiAgZG9jID0gZG9jIHx8ICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiB1bmRlZmluZWQpO1xuICBpZiAodHlwZW9mIGRvYyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB0cnkge1xuICAgIHJldHVybiBkb2MuYWN0aXZlRWxlbWVudCB8fCBkb2MuYm9keTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBkb2MuYm9keTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFjdGl2ZUVsZW1lbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuLyoqXG4gKiBTaW1wbGUsIGxpZ2h0d2VpZ2h0IG1vZHVsZSBhc3Npc3Rpbmcgd2l0aCB0aGUgZGV0ZWN0aW9uIGFuZCBjb250ZXh0IG9mXG4gKiBXb3JrZXIuIEhlbHBzIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY2llcyBhbmQgYWxsb3dzIGNvZGUgdG8gcmVhc29uIGFib3V0XG4gKiB3aGV0aGVyIG9yIG5vdCB0aGV5IGFyZSBpbiBhIFdvcmtlciwgZXZlbiBpZiB0aGV5IG5ldmVyIGluY2x1ZGUgdGhlIG1haW5cbiAqIGBSZWFjdFdvcmtlcmAgZGVwZW5kZW5jeS5cbiAqL1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0ge1xuXG4gIGNhblVzZURPTTogY2FuVXNlRE9NLFxuXG4gIGNhblVzZVdvcmtlcnM6IHR5cGVvZiBXb3JrZXIgIT09ICd1bmRlZmluZWQnLFxuXG4gIGNhblVzZUV2ZW50TGlzdGVuZXJzOiBjYW5Vc2VET00gJiYgISEod2luZG93LmFkZEV2ZW50TGlzdGVuZXIgfHwgd2luZG93LmF0dGFjaEV2ZW50KSxcblxuICBjYW5Vc2VWaWV3cG9ydDogY2FuVXNlRE9NICYmICEhd2luZG93LnNjcmVlbixcblxuICBpc0luV29ya2VyOiAhY2FuVXNlRE9NIC8vIEZvciBub3csIHRoaXMgaXMgdHJ1ZSAtIG1pZ2h0IGNoYW5nZSBpbiB0aGUgZnV0dXJlLlxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV4ZWN1dGlvbkVudmlyb25tZW50OyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuNC4xXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSxiYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwiZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnRcIikscD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSx2PXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLGRhPXJlcXVpcmUoXCJmYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50XCIpLGVhPXJlcXVpcmUoXCJmYmpzL2xpYi9zaGFsbG93RXF1YWxcIiksZmE9cmVxdWlyZShcImZianMvbGliL2NvbnRhaW5zTm9kZVwiKSxoYT1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlPYmplY3RcIik7XG5mdW5jdGlvbiBBKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsYz1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsZD0wO2Q8YjtkKyspYys9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbZCsxXSk7YWEoITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixjKX1iYT92b2lkIDA6QShcIjIyN1wiKTtcbmZ1bmN0aW9uIGlhKGEsYixjLGQsZSxmLGcsaCxrKXt0aGlzLl9oYXNDYXVnaHRFcnJvcj0hMTt0aGlzLl9jYXVnaHRFcnJvcj1udWxsO3ZhciBuPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLG4pfWNhdGNoKHIpe3RoaXMuX2NhdWdodEVycm9yPXIsdGhpcy5faGFzQ2F1Z2h0RXJyb3I9ITB9fVxudmFyIEI9e19jYXVnaHRFcnJvcjpudWxsLF9oYXNDYXVnaHRFcnJvcjohMSxfcmV0aHJvd0Vycm9yOm51bGwsX2hhc1JldGhyb3dFcnJvcjohMSxpbnZva2VHdWFyZGVkQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyxoLGspe2lhLmFwcGx5KEIsYXJndW1lbnRzKX0saW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yOmZ1bmN0aW9uKGEsYixjLGQsZSxmLGcsaCxrKXtCLmludm9rZUd1YXJkZWRDYWxsYmFjay5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoQi5oYXNDYXVnaHRFcnJvcigpKXt2YXIgbj1CLmNsZWFyQ2F1Z2h0RXJyb3IoKTtCLl9oYXNSZXRocm93RXJyb3J8fChCLl9oYXNSZXRocm93RXJyb3I9ITAsQi5fcmV0aHJvd0Vycm9yPW4pfX0scmV0aHJvd0NhdWdodEVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIGthLmFwcGx5KEIsYXJndW1lbnRzKX0saGFzQ2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtyZXR1cm4gQi5faGFzQ2F1Z2h0RXJyb3J9LGNsZWFyQ2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtpZihCLl9oYXNDYXVnaHRFcnJvcil7dmFyIGE9XG5CLl9jYXVnaHRFcnJvcjtCLl9jYXVnaHRFcnJvcj1udWxsO0IuX2hhc0NhdWdodEVycm9yPSExO3JldHVybiBhfUEoXCIxOThcIil9fTtmdW5jdGlvbiBrYSgpe2lmKEIuX2hhc1JldGhyb3dFcnJvcil7dmFyIGE9Qi5fcmV0aHJvd0Vycm9yO0IuX3JldGhyb3dFcnJvcj1udWxsO0IuX2hhc1JldGhyb3dFcnJvcj0hMTt0aHJvdyBhO319dmFyIGxhPW51bGwsbWE9e307XG5mdW5jdGlvbiBuYSgpe2lmKGxhKWZvcih2YXIgYSBpbiBtYSl7dmFyIGI9bWFbYV0sYz1sYS5pbmRleE9mKGEpOy0xPGM/dm9pZCAwOkEoXCI5NlwiLGEpO2lmKCFvYVtjXSl7Yi5leHRyYWN0RXZlbnRzP3ZvaWQgMDpBKFwiOTdcIixhKTtvYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxnPWIsaD1kO3BhLmhhc093blByb3BlcnR5KGgpP0EoXCI5OVwiLGgpOnZvaWQgMDtwYVtoXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZxYShrW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8ocWEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtlP3ZvaWQgMDpBKFwiOThcIixkLGEpfX19fVxuZnVuY3Rpb24gcWEoYSxiLGMpe3JhW2FdP0EoXCIxMDBcIixhKTp2b2lkIDA7cmFbYV09YjtzYVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBvYT1bXSxwYT17fSxyYT17fSxzYT17fTtmdW5jdGlvbiB0YShhKXtsYT9BKFwiMTAxXCIpOnZvaWQgMDtsYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhKTtuYSgpfWZ1bmN0aW9uIHVhKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO21hLmhhc093blByb3BlcnR5KGMpJiZtYVtjXT09PWR8fChtYVtjXT9BKFwiMTAyXCIsYyk6dm9pZCAwLG1hW2NdPWQsYj0hMCl9YiYmbmEoKX1cbnZhciB2YT17cGx1Z2luczpvYSxldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M6cGEscmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM6cmEscmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llczpzYSxwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzOm51bGwsaW5qZWN0RXZlbnRQbHVnaW5PcmRlcjp0YSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6dWF9LHdhPW51bGwseGE9bnVsbCx5YT1udWxsO2Z1bmN0aW9uIHphKGEsYixjLGQpe2I9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9eWEoZCk7Qi5pbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IoYixjLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIEFhKGEsYil7bnVsbD09Yj9BKFwiMzBcIik6dm9pZCAwO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1mdW5jdGlvbiBCYShhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIgQ2E9bnVsbDtcbmZ1bmN0aW9uIERhKGEsYil7aWYoYSl7dmFyIGM9YS5fZGlzcGF0Y2hMaXN0ZW5lcnMsZD1hLl9kaXNwYXRjaEluc3RhbmNlcztpZihBcnJheS5pc0FycmF5KGMpKWZvcih2YXIgZT0wO2U8Yy5sZW5ndGgmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7ZSsrKXphKGEsYixjW2VdLGRbZV0pO2Vsc2UgYyYmemEoYSxiLGMsZCk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gRWEoYSl7cmV0dXJuIERhKGEsITApfWZ1bmN0aW9uIEZhKGEpe3JldHVybiBEYShhLCExKX12YXIgR2E9e2luamVjdEV2ZW50UGx1Z2luT3JkZXI6dGEsaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOnVhfTtcbmZ1bmN0aW9uIEhhKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9d2EoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7YyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGM/QShcIjIzMVwiLGIsdHlwZW9mIGMpOnZvaWQgMDtcbnJldHVybiBjfWZ1bmN0aW9uIElhKGEsYil7bnVsbCE9PWEmJihDYT1BYShDYSxhKSk7YT1DYTtDYT1udWxsO2EmJihiP0JhKGEsRWEpOkJhKGEsRmEpLENhP0EoXCI5NVwiKTp2b2lkIDAsQi5yZXRocm93Q2F1Z2h0RXJyb3IoKSl9ZnVuY3Rpb24gSmEoYSxiLGMsZCl7Zm9yKHZhciBlPW51bGwsZj0wO2Y8b2EubGVuZ3RoO2YrKyl7dmFyIGc9b2FbZl07ZyYmKGc9Zy5leHRyYWN0RXZlbnRzKGEsYixjLGQpKSYmKGU9QWEoZSxnKSl9SWEoZSwhMSl9dmFyIEthPXtpbmplY3Rpb246R2EsZ2V0TGlzdGVuZXI6SGEscnVuRXZlbnRzSW5CYXRjaDpJYSxydW5FeHRyYWN0ZWRFdmVudHNJbkJhdGNoOkphfSxMYT1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxDPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrTGEsTWE9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIitMYTtcbmZ1bmN0aW9uIE5hKGEpe2lmKGFbQ10pcmV0dXJuIGFbQ107Zm9yKDshYVtDXTspaWYoYS5wYXJlbnROb2RlKWE9YS5wYXJlbnROb2RlO2Vsc2UgcmV0dXJuIG51bGw7YT1hW0NdO3JldHVybiA1PT09YS50YWd8fDY9PT1hLnRhZz9hOm51bGx9ZnVuY3Rpb24gT2EoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO0EoXCIzM1wiKX1mdW5jdGlvbiBQYShhKXtyZXR1cm4gYVtNYV18fG51bGx9dmFyIFFhPXtwcmVjYWNoZUZpYmVyTm9kZTpmdW5jdGlvbihhLGIpe2JbQ109YX0sZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGU6TmEsZ2V0SW5zdGFuY2VGcm9tTm9kZTpmdW5jdGlvbihhKXthPWFbQ107cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnP251bGw6YX0sZ2V0Tm9kZUZyb21JbnN0YW5jZTpPYSxnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlOlBhLHVwZGF0ZUZpYmVyUHJvcHM6ZnVuY3Rpb24oYSxiKXthW01hXT1ifX07XG5mdW5jdGlvbiBGKGEpe2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9ZnVuY3Rpb24gUmEoYSxiLGMpe2Zvcih2YXIgZD1bXTthOylkLnB1c2goYSksYT1GKGEpO2ZvcihhPWQubGVuZ3RoOzA8YS0tOyliKGRbYV0sXCJjYXB0dXJlZFwiLGMpO2ZvcihhPTA7YTxkLmxlbmd0aDthKyspYihkW2FdLFwiYnViYmxlZFwiLGMpfWZ1bmN0aW9uIFNhKGEsYixjKXtpZihiPUhhKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9QWEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9QWEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9ZnVuY3Rpb24gVGEoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyYmUmEoYS5fdGFyZ2V0SW5zdCxTYSxhKX1cbmZ1bmN0aW9uIFVhKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe3ZhciBiPWEuX3RhcmdldEluc3Q7Yj1iP0YoYik6bnVsbDtSYShiLFNhLGEpfX1mdW5jdGlvbiBWYShhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1IYShhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9QWEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9QWEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIFhhKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmVmEoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfWZ1bmN0aW9uIFlhKGEpe0JhKGEsVGEpfVxuZnVuY3Rpb24gWmEoYSxiLGMsZCl7aWYoYyYmZClhOnt2YXIgZT1jO2Zvcih2YXIgZj1kLGc9MCxoPWU7aDtoPUYoaCkpZysrO2g9MDtmb3IodmFyIGs9ZjtrO2s9RihrKSloKys7Zm9yKDswPGctaDspZT1GKGUpLGctLTtmb3IoOzA8aC1nOylmPUYoZiksaC0tO2Zvcig7Zy0tOyl7aWYoZT09PWZ8fGU9PT1mLmFsdGVybmF0ZSlicmVhayBhO2U9RihlKTtmPUYoZil9ZT1udWxsfWVsc2UgZT1udWxsO2Y9ZTtmb3IoZT1bXTtjJiZjIT09Zjspe2c9Yy5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1mKWJyZWFrO2UucHVzaChjKTtjPUYoYyl9Zm9yKGM9W107ZCYmZCE9PWY7KXtnPWQuYWx0ZXJuYXRlO2lmKG51bGwhPT1nJiZnPT09ZilicmVhaztjLnB1c2goZCk7ZD1GKGQpfWZvcihkPTA7ZDxlLmxlbmd0aDtkKyspVmEoZVtkXSxcImJ1YmJsZWRcIixhKTtmb3IoYT1jLmxlbmd0aDswPGEtLTspVmEoY1thXSxcImNhcHR1cmVkXCIsYil9XG52YXIgJGE9e2FjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXM6WWEsYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQ6ZnVuY3Rpb24oYSl7QmEoYSxVYSl9LGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlczpaYSxhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlczpmdW5jdGlvbihhKXtCYShhLFhhKX19O2Z1bmN0aW9uIGFiKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7Y1tcIm1zXCIrYV09XCJNU1wiK2I7Y1tcIk9cIithXT1cIm9cIitiLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGN9XG52YXIgYmI9e2FuaW1hdGlvbmVuZDphYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjphYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OmFiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOmFiKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sY2I9e30sZGI9e307bS5jYW5Vc2VET00mJihkYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBiYi5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBiYi5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBiYi5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBiYi50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO1xuZnVuY3Rpb24gZWIoYSl7aWYoY2JbYV0pcmV0dXJuIGNiW2FdO2lmKCFiYlthXSlyZXR1cm4gYTt2YXIgYj1iYlthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBkYilyZXR1cm4gY2JbYV09YltjXTtyZXR1cm4gYX12YXIgZmI9ZWIoXCJhbmltYXRpb25lbmRcIiksZ2I9ZWIoXCJhbmltYXRpb25pdGVyYXRpb25cIiksaGI9ZWIoXCJhbmltYXRpb25zdGFydFwiKSxpYj1lYihcInRyYW5zaXRpb25lbmRcIiksamI9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLGtiPW51bGw7XG5mdW5jdGlvbiBsYigpeyFrYiYmbS5jYW5Vc2VET00mJihrYj1cInRleHRDb250ZW50XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ/XCJ0ZXh0Q29udGVudFwiOlwiaW5uZXJUZXh0XCIpO3JldHVybiBrYn12YXIgRz17X3Jvb3Q6bnVsbCxfc3RhcnRUZXh0Om51bGwsX2ZhbGxiYWNrVGV4dDpudWxsfTtmdW5jdGlvbiBtYigpe2lmKEcuX2ZhbGxiYWNrVGV4dClyZXR1cm4gRy5fZmFsbGJhY2tUZXh0O3ZhciBhLGI9Ry5fc3RhcnRUZXh0LGM9Yi5sZW5ndGgsZCxlPW5iKCksZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtHLl9mYWxsYmFja1RleHQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKTtyZXR1cm4gRy5fZmFsbGJhY2tUZXh0fWZ1bmN0aW9uIG5iKCl7cmV0dXJuXCJ2YWx1ZVwiaW4gRy5fcm9vdD9HLl9yb290LnZhbHVlOkcuX3Jvb3RbbGIoKV19XG52YXIgb2I9XCJkaXNwYXRjaENvbmZpZyBfdGFyZ2V0SW5zdCBuYXRpdmVFdmVudCBpc0RlZmF1bHRQcmV2ZW50ZWQgaXNQcm9wYWdhdGlvblN0b3BwZWQgX2Rpc3BhdGNoTGlzdGVuZXJzIF9kaXNwYXRjaEluc3RhbmNlc1wiLnNwbGl0KFwiIFwiKSxwYj17dHlwZTpudWxsLHRhcmdldDpudWxsLGN1cnJlbnRUYXJnZXQ6di50aGF0UmV0dXJuc051bGwsZXZlbnRQaGFzZTpudWxsLGJ1YmJsZXM6bnVsbCxjYW5jZWxhYmxlOm51bGwsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDpudWxsLGlzVHJ1c3RlZDpudWxsfTtcbmZ1bmN0aW9uIEgoYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP3YudGhhdFJldHVybnNUcnVlOnYudGhhdFJldHVybnNGYWxzZTt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXYudGhhdFJldHVybnNGYWxzZTtyZXR1cm4gdGhpc31cbnAoSC5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD12LnRoYXRSZXR1cm5zVHJ1ZSl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD12LnRoYXRSZXR1cm5zVHJ1ZSl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD12LnRoYXRSZXR1cm5zVHJ1ZX0saXNQZXJzaXN0ZW50OnYudGhhdFJldHVybnNGYWxzZSxcbmRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxiO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO2ZvcihhPTA7YTxvYi5sZW5ndGg7YSsrKXRoaXNbb2JbYV1dPW51bGx9fSk7SC5JbnRlcmZhY2U9cGI7SC5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7cChlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9cCh7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtxYihjKTtyZXR1cm4gY307cWIoSCk7XG5mdW5jdGlvbiByYihhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1mdW5jdGlvbiBzYihhKXthIGluc3RhbmNlb2YgdGhpcz92b2lkIDA6QShcIjIyM1wiKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9ZnVuY3Rpb24gcWIoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9cmI7YS5yZWxlYXNlPXNifXZhciB0Yj1ILmV4dGVuZCh7ZGF0YTpudWxsfSksdWI9SC5leHRlbmQoe2RhdGE6bnVsbH0pLHZiPVs5LDEzLDI3LDMyXSx3Yj1tLmNhblVzZURPTSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3cseGI9bnVsbDttLmNhblVzZURPTSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoeGI9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciB5Yj1tLmNhblVzZURPTSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIXhiLHpiPW0uY2FuVXNlRE9NJiYoIXdifHx4YiYmODx4YiYmMTE+PXhiKSxBYj1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxCYj17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbmVuZCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb251cGRhdGUga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9fSxDYj0hMTtcbmZ1bmN0aW9uIERiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09dmIuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBFYihhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBGYj0hMTtmdW5jdGlvbiBHYihhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gRWIoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO0NiPSEwO3JldHVybiBBYjtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1BYiYmQ2I/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gSGIoYSxiKXtpZihGYilyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhd2ImJkRiKGEsYik/KGE9bWIoKSxHLl9yb290PW51bGwsRy5fc3RhcnRUZXh0PW51bGwsRy5fZmFsbGJhY2tUZXh0PW51bGwsRmI9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHpiP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIEliPXtldmVudFR5cGVzOkJiLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dm9pZCAwO3ZhciBmPXZvaWQgMDtpZih3YiliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjplPUJiLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjplPUJiLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6ZT1CYi5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWU9dm9pZCAwfWVsc2UgRmI/RGIoYSxjKSYmKGU9QmIuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZT1CYi5jb21wb3NpdGlvblN0YXJ0KTtlPyh6YiYmKEZifHxlIT09QmIuY29tcG9zaXRpb25TdGFydD9lPT09QmIuY29tcG9zaXRpb25FbmQmJkZiJiYoZj1tYigpKTooRy5fcm9vdD1kLEcuX3N0YXJ0VGV4dD1uYigpLEZiPSEwKSksZT10Yi5nZXRQb29sZWQoZSxiLGMsZCksZj9lLmRhdGE9XG5mOihmPUViKGMpLG51bGwhPT1mJiYoZS5kYXRhPWYpKSxZYShlKSxmPWUpOmY9bnVsbDsoYT15Yj9HYihhLGMpOkhiKGEsYykpPyhiPXViLmdldFBvb2xlZChCYi5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsWWEoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWY/YjpudWxsPT09Yj9mOltmLGJdfX0sSmI9bnVsbCxLYj17aW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudDpmdW5jdGlvbihhKXtKYj1hfX0sTGI9bnVsbCxNYj1udWxsO2Z1bmN0aW9uIE5iKGEpe2lmKGE9eGEoYSkpe0piJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgSmIucmVzdG9yZUNvbnRyb2xsZWRTdGF0ZT92b2lkIDA6QShcIjE5NFwiKTt2YXIgYj13YShhLnN0YXRlTm9kZSk7SmIucmVzdG9yZUNvbnRyb2xsZWRTdGF0ZShhLnN0YXRlTm9kZSxhLnR5cGUsYil9fWZ1bmN0aW9uIE9iKGEpe0xiP01iP01iLnB1c2goYSk6TWI9W2FdOkxiPWF9XG5mdW5jdGlvbiBQYigpe3JldHVybiBudWxsIT09TGJ8fG51bGwhPT1NYn1mdW5jdGlvbiBRYigpe2lmKExiKXt2YXIgYT1MYixiPU1iO01iPUxiPW51bGw7TmIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKU5iKGJbYV0pfX12YXIgUmI9e2luamVjdGlvbjpLYixlbnF1ZXVlU3RhdGVSZXN0b3JlOk9iLG5lZWRzU3RhdGVSZXN0b3JlOlBiLHJlc3RvcmVTdGF0ZUlmTmVlZGVkOlFifTtmdW5jdGlvbiBTYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIFRiKGEsYixjKXtyZXR1cm4gYShiLGMpfWZ1bmN0aW9uIFViKCl7fXZhciBWYj0hMTtmdW5jdGlvbiBXYihhLGIpe2lmKFZiKXJldHVybiBhKGIpO1ZiPSEwO3RyeXtyZXR1cm4gU2IoYSxiKX1maW5hbGx5e1ZiPSExLFBiKCkmJihVYigpLFFiKCkpfX1cbnZhciBYYj17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBZYihhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIVhiW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBaYihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9XG5mdW5jdGlvbiAkYihhLGIpe2lmKCFtLmNhblVzZURPTXx8YiYmIShcImFkZEV2ZW50TGlzdGVuZXJcImluIGRvY3VtZW50KSlyZXR1cm4hMTthPVwib25cIithO2I9YSBpbiBkb2N1bWVudDtifHwoYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGIuc2V0QXR0cmlidXRlKGEsXCJyZXR1cm47XCIpLGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGJbYV0pO3JldHVybiBifWZ1bmN0aW9uIGFjKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBiYyhhKXt2YXIgYj1hYyhhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gY2MoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPWJjKGEpKX1mdW5jdGlvbiBkYyhhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9YWMoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1cbnZhciBlYz1iYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRC5SZWFjdEN1cnJlbnRPd25lcixmYz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGdjPWZjP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGhjPWZjP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsaWM9ZmM/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGpjPWZjP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxrYz1mYz9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsbGM9ZmM/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LG1jPWZjP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHBjPWZjP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLHFjPWZjP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixyYz1mYz9TeW1ib2wuZm9yKFwicmVhY3QudGltZW91dFwiKTpcbjYwMTEzLHNjPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiB0YyhhKXtpZihudWxsPT09YXx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO2E9c2MmJmFbc2NdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG5mdW5jdGlvbiB1YyhhKXt2YXIgYj1hLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGIuZGlzcGxheU5hbWV8fGIubmFtZTtpZihcInN0cmluZ1wiPT09dHlwZW9mIGIpcmV0dXJuIGI7c3dpdGNoKGIpe2Nhc2UgcGM6cmV0dXJuXCJBc3luY01vZGVcIjtjYXNlIG1jOnJldHVyblwiQ29udGV4dC5Db25zdW1lclwiO2Nhc2UgaWM6cmV0dXJuXCJSZWFjdEZyYWdtZW50XCI7Y2FzZSBoYzpyZXR1cm5cIlJlYWN0UG9ydGFsXCI7Y2FzZSBrYzpyZXR1cm5cIlByb2ZpbGVyKFwiK2EucGVuZGluZ1Byb3BzLmlkK1wiKVwiO2Nhc2UgbGM6cmV0dXJuXCJDb250ZXh0LlByb3ZpZGVyXCI7Y2FzZSBqYzpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIHJjOnJldHVyblwiVGltZW91dFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpc3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgcWM6cmV0dXJuIGE9Yi5yZW5kZXIuZGlzcGxheU5hbWV8fGIucmVuZGVyLm5hbWV8fFwiXCIsXCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK1xuYStcIilcIjpcIkZvcndhcmRSZWZcIn1yZXR1cm4gbnVsbH1mdW5jdGlvbiB2YyhhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxOmNhc2UgMjpjYXNlIDU6dmFyIGM9YS5fZGVidWdPd25lcixkPWEuX2RlYnVnU291cmNlO3ZhciBlPXVjKGEpO3ZhciBmPW51bGw7YyYmKGY9dWMoYykpO2M9ZDtlPVwiXFxuICAgIGluIFwiKyhlfHxcIlVua25vd25cIikrKGM/XCIgKGF0IFwiK2MuZmlsZU5hbWUucmVwbGFjZSgvXi4qW1xcXFxcXC9dLyxcIlwiKStcIjpcIitjLmxpbmVOdW1iZXIrXCIpXCI6Zj9cIiAoY3JlYXRlZCBieSBcIitmK1wiKVwiOlwiXCIpO2JyZWFrIGE7ZGVmYXVsdDplPVwiXCJ9Yis9ZTthPWEucmV0dXJufXdoaWxlKGEpO3JldHVybiBifVxudmFyIHdjPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyx4Yz17fSx6Yz17fTtmdW5jdGlvbiBBYyhhKXtpZih6Yy5oYXNPd25Qcm9wZXJ0eShhKSlyZXR1cm4hMDtpZih4Yy5oYXNPd25Qcm9wZXJ0eShhKSlyZXR1cm4hMTtpZih3Yy50ZXN0KGEpKXJldHVybiB6Y1thXT0hMDt4Y1thXT0hMDtyZXR1cm4hMX1cbmZ1bmN0aW9uIEJjKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIENjKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fEJjKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9XG5mdW5jdGlvbiBJKGEsYixjLGQsZSl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yn12YXIgSj17fTtcImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0pbYV09bmV3IEkoYSwwLCExLGEsbnVsbCl9KTtcbltbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtKW2JdPW5ldyBJKGIsMSwhMSxhWzFdLG51bGwpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7SlthXT1uZXcgSShhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtKW2FdPW5ldyBJKGEsMiwhMSxhLG51bGwpfSk7XG5cImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0pbYV09bmV3IEkoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtKW2FdPW5ldyBJKGEsMywhMCxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0pbYV09bmV3IEkoYSw0LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1xuW1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0pbYV09bmV3IEkoYSw2LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7SlthXT1uZXcgSShhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7dmFyIERjPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gRWMoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoRGMsXG5FYyk7SltiXT1uZXcgSShiLDEsITEsYSxudWxsKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOmhyZWYgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoRGMsRWMpO0pbYl09bmV3IEkoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoRGMsRWMpO0pbYl09bmV3IEkoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIil9KTtKLnRhYkluZGV4PW5ldyBJKFwidGFiSW5kZXhcIiwxLCExLFwidGFiaW5kZXhcIixudWxsKTtcbmZ1bmN0aW9uIEZjKGEsYixjLGQpe3ZhciBlPUouaGFzT3duUHJvcGVydHkoYik/SltiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KENjKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9BYyhiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxuZnVuY3Rpb24gR2MoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIHAoe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIEhjKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPUljKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gSmMoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZGYyhhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gS2MoYSxiKXtKYyhhLGIpO3ZhciBjPUljKGIudmFsdWUpO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWIudHlwZSl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtiLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/TGMoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmTGMoYSxiLnR5cGUsSWMoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBNYyhhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTt2YXIgZD1hLnZhbHVlO2N8fGI9PT1kfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1mdW5jdGlvbiBMYyhhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fGEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9XG5mdW5jdGlvbiBJYyhhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19dmFyIE5jPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNoYW5nZSBjbGljayBmb2N1cyBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O2Z1bmN0aW9uIE9jKGEsYixjKXthPUguZ2V0UG9vbGVkKE5jLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7T2IoYyk7WWEoYSk7cmV0dXJuIGF9dmFyIFBjPW51bGwsUWM9bnVsbDtmdW5jdGlvbiBSYyhhKXtJYShhLCExKX1mdW5jdGlvbiBTYyhhKXt2YXIgYj1PYShhKTtpZihkYyhiKSlyZXR1cm4gYX1cbmZ1bmN0aW9uIFRjKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIFVjPSExO20uY2FuVXNlRE9NJiYoVWM9JGIoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7ZnVuY3Rpb24gVmMoKXtQYyYmKFBjLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLFdjKSxRYz1QYz1udWxsKX1mdW5jdGlvbiBXYyhhKXtcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmU2MoUWMpJiYoYT1PYyhRYyxhLFpiKGEpKSxXYihSYyxhKSl9ZnVuY3Rpb24gWGMoYSxiLGMpe1wiZm9jdXNcIj09PWE/KFZjKCksUGM9YixRYz1jLFBjLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLFdjKSk6XCJibHVyXCI9PT1hJiZWYygpfWZ1bmN0aW9uIFljKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIFNjKFFjKX1cbmZ1bmN0aW9uIFpjKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gU2MoYil9ZnVuY3Rpb24gJGMoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gU2MoYil9XG52YXIgYWQ9e2V2ZW50VHlwZXM6TmMsX2lzSW5wdXRFdmVudFN1cHBvcnRlZDpVYyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWI/T2EoYik6d2luZG93LGY9dm9pZCAwLGc9dm9pZCAwLGg9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1wic2VsZWN0XCI9PT1ofHxcImlucHV0XCI9PT1oJiZcImZpbGVcIj09PWUudHlwZT9mPVRjOlliKGUpP1VjP2Y9JGM6KGY9WWMsZz1YYyk6KGg9ZS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWgudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWUudHlwZXx8XCJyYWRpb1wiPT09ZS50eXBlKSYmKGY9WmMpO2lmKGYmJihmPWYoYSxiKSkpcmV0dXJuIE9jKGYsYyxkKTtnJiZnKGEsZSxiKTtcImJsdXJcIj09PWEmJihhPWUuX3dyYXBwZXJTdGF0ZSkmJmEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWUudHlwZSYmTGMoZSxcIm51bWJlclwiLGUudmFsdWUpfX0sYmQ9SC5leHRlbmQoe3ZpZXc6bnVsbCxkZXRhaWw6bnVsbH0pLGNkPXtBbHQ6XCJhbHRLZXlcIixcbkNvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIGRkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9Y2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiBlZCgpe3JldHVybiBkZH1cbnZhciBmZD1iZC5leHRlbmQoe3NjcmVlblg6bnVsbCxzY3JlZW5ZOm51bGwsY2xpZW50WDpudWxsLGNsaWVudFk6bnVsbCxwYWdlWDpudWxsLHBhZ2VZOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6ZWQsYnV0dG9uOm51bGwsYnV0dG9uczpudWxsLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVsYXRlZFRhcmdldHx8KGEuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudCl9fSksZ2Q9ZmQuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHBvaW50ZXJUeXBlOm51bGwsaXNQcmltYXJ5Om51bGx9KSxoZD17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxcbm1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfX0saWQ9e2V2ZW50VHlwZXM6aGQsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSxmPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihlJiYoYy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KXx8IWYmJiFlKXJldHVybiBudWxsO2U9ZC53aW5kb3c9PT1kP2Q6KGU9ZC5vd25lckRvY3VtZW50KT9lLmRlZmF1bHRWaWV3fHxcbmUucGFyZW50V2luZG93OndpbmRvdztmPyhmPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT9OYShiKTpudWxsKTpmPW51bGw7aWYoZj09PWIpcmV0dXJuIG51bGw7dmFyIGc9dm9pZCAwLGg9dm9pZCAwLGs9dm9pZCAwLG49dm9pZCAwO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1hKWc9ZmQsaD1oZC5tb3VzZUxlYXZlLGs9aGQubW91c2VFbnRlcixuPVwibW91c2VcIjtlbHNlIGlmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSlnPWdkLGg9aGQucG9pbnRlckxlYXZlLGs9aGQucG9pbnRlckVudGVyLG49XCJwb2ludGVyXCI7YT1udWxsPT1mP2U6T2EoZik7ZT1udWxsPT1iP2U6T2EoYik7aD1nLmdldFBvb2xlZChoLGYsYyxkKTtoLnR5cGU9bitcImxlYXZlXCI7aC50YXJnZXQ9YTtoLnJlbGF0ZWRUYXJnZXQ9ZTtjPWcuZ2V0UG9vbGVkKGssYixjLGQpO2MudHlwZT1uK1wiZW50ZXJcIjtjLnRhcmdldD1lO2MucmVsYXRlZFRhcmdldD1hO1phKGgsXG5jLGYsYik7cmV0dXJuW2gsY119fTtmdW5jdGlvbiBqZChhKXt2YXIgYj1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXtpZigwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxO2Zvcig7Yi5yZXR1cm47KWlmKGI9Yi5yZXR1cm4sMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMX1yZXR1cm4gMz09PWIudGFnPzI6M31mdW5jdGlvbiBrZChhKXsyIT09amQoYSk/QShcIjE4OFwiKTp2b2lkIDB9XG5mdW5jdGlvbiBsZChhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYilyZXR1cm4gYj1qZChhKSwzPT09Yj9BKFwiMTg4XCIpOnZvaWQgMCwxPT09Yj9udWxsOmE7Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuLGY9ZT9lLmFsdGVybmF0ZTpudWxsO2lmKCFlfHwhZilicmVhaztpZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKHZhciBnPWUuY2hpbGQ7Zzspe2lmKGc9PT1jKXJldHVybiBrZChlKSxhO2lmKGc9PT1kKXJldHVybiBrZChlKSxiO2c9Zy5zaWJsaW5nfUEoXCIxODhcIil9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zz0hMTtmb3IodmFyIGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9Zz9cbnZvaWQgMDpBKFwiMTg5XCIpfX1jLmFsdGVybmF0ZSE9PWQ/QShcIjE5MFwiKTp2b2lkIDB9MyE9PWMudGFnP0EoXCIxODhcIik6dm9pZCAwO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gbWQoYSl7YT1sZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIG5kKGEpe2E9bGQoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCYmNCE9PWIudGFnKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH12YXIgb2Q9SC5leHRlbmQoe2FuaW1hdGlvbk5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLHBkPUguZXh0ZW5kKHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSkscWQ9YmQuZXh0ZW5kKHtyZWxhdGVkVGFyZ2V0Om51bGx9KTtcbmZ1bmN0aW9uIHJkKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIHNkPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSx0ZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sdWQ9YmQuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPXNkW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPXJkKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT90ZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6ZWQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/cmQoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/cmQoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSx2ZD1mZC5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSksd2Q9YmQuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6ZWR9KSx4ZD1ILmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSx5ZD1mZC5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLHpkPVtbXCJhYm9ydFwiLFwiYWJvcnRcIl0sW2ZiLFwiYW5pbWF0aW9uRW5kXCJdLFtnYixcImFuaW1hdGlvbkl0ZXJhdGlvblwiXSxbaGIsXCJhbmltYXRpb25TdGFydFwiXSxbXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCJdLFtcImNhbnBsYXl0aHJvdWdoXCIsXCJjYW5QbGF5VGhyb3VnaFwiXSxbXCJkcmFnXCIsXCJkcmFnXCJdLFtcImRyYWdlbnRlclwiLFwiZHJhZ0VudGVyXCJdLFtcImRyYWdleGl0XCIsXCJkcmFnRXhpdFwiXSxbXCJkcmFnbGVhdmVcIixcImRyYWdMZWF2ZVwiXSxbXCJkcmFnb3ZlclwiLFwiZHJhZ092ZXJcIl0sW1wiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCJdLFtcImVtcHRpZWRcIixcImVtcHRpZWRcIl0sW1wiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIl0sXG5bXCJlbmRlZFwiLFwiZW5kZWRcIl0sW1wiZXJyb3JcIixcImVycm9yXCJdLFtcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiXSxbXCJsb2FkXCIsXCJsb2FkXCJdLFtcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIl0sW1wibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCJdLFtcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCJdLFtcImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCJdLFtcIm1vdXNlbW92ZVwiLFwibW91c2VNb3ZlXCJdLFtcIm1vdXNlb3V0XCIsXCJtb3VzZU91dFwiXSxbXCJtb3VzZW92ZXJcIixcIm1vdXNlT3ZlclwiXSxbXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCJdLFtcInBvaW50ZXJtb3ZlXCIsXCJwb2ludGVyTW92ZVwiXSxbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyT3V0XCJdLFtcInBvaW50ZXJvdmVyXCIsXCJwb2ludGVyT3ZlclwiXSxbXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIl0sW1wic2Nyb2xsXCIsXCJzY3JvbGxcIl0sW1wic2Vla2luZ1wiLFwic2Vla2luZ1wiXSxbXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCJdLFxuW1wic3VzcGVuZFwiLFwic3VzcGVuZFwiXSxbXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCJdLFtcInRvZ2dsZVwiLFwidG9nZ2xlXCJdLFtcInRvdWNobW92ZVwiLFwidG91Y2hNb3ZlXCJdLFtpYixcInRyYW5zaXRpb25FbmRcIl0sW1wid2FpdGluZ1wiLFwid2FpdGluZ1wiXSxbXCJ3aGVlbFwiLFwid2hlZWxcIl1dLEFkPXt9LEJkPXt9O2Z1bmN0aW9uIENkKGEsYil7dmFyIGM9YVswXTthPWFbMV07dmFyIGQ9XCJvblwiKyhhWzBdLnRvVXBwZXJDYXNlKCkrYS5zbGljZSgxKSk7Yj17cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6ZCxjYXB0dXJlZDpkK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W2NdLGlzSW50ZXJhY3RpdmU6Yn07QWRbYV09YjtCZFtjXT1ifVxuW1tcImJsdXJcIixcImJsdXJcIl0sW1wiY2FuY2VsXCIsXCJjYW5jZWxcIl0sW1wiY2xpY2tcIixcImNsaWNrXCJdLFtcImNsb3NlXCIsXCJjbG9zZVwiXSxbXCJjb250ZXh0bWVudVwiLFwiY29udGV4dE1lbnVcIl0sW1wiY29weVwiLFwiY29weVwiXSxbXCJjdXRcIixcImN1dFwiXSxbXCJkYmxjbGlja1wiLFwiZG91YmxlQ2xpY2tcIl0sW1wiZHJhZ2VuZFwiLFwiZHJhZ0VuZFwiXSxbXCJkcmFnc3RhcnRcIixcImRyYWdTdGFydFwiXSxbXCJkcm9wXCIsXCJkcm9wXCJdLFtcImZvY3VzXCIsXCJmb2N1c1wiXSxbXCJpbnB1dFwiLFwiaW5wdXRcIl0sW1wiaW52YWxpZFwiLFwiaW52YWxpZFwiXSxbXCJrZXlkb3duXCIsXCJrZXlEb3duXCJdLFtcImtleXByZXNzXCIsXCJrZXlQcmVzc1wiXSxbXCJrZXl1cFwiLFwia2V5VXBcIl0sW1wibW91c2Vkb3duXCIsXCJtb3VzZURvd25cIl0sW1wibW91c2V1cFwiLFwibW91c2VVcFwiXSxbXCJwYXN0ZVwiLFwicGFzdGVcIl0sW1wicGF1c2VcIixcInBhdXNlXCJdLFtcInBsYXlcIixcInBsYXlcIl0sW1wicG9pbnRlcmNhbmNlbFwiLFwicG9pbnRlckNhbmNlbFwiXSxbXCJwb2ludGVyZG93blwiLFwicG9pbnRlckRvd25cIl0sXG5bXCJwb2ludGVydXBcIixcInBvaW50ZXJVcFwiXSxbXCJyYXRlY2hhbmdlXCIsXCJyYXRlQ2hhbmdlXCJdLFtcInJlc2V0XCIsXCJyZXNldFwiXSxbXCJzZWVrZWRcIixcInNlZWtlZFwiXSxbXCJzdWJtaXRcIixcInN1Ym1pdFwiXSxbXCJ0b3VjaGNhbmNlbFwiLFwidG91Y2hDYW5jZWxcIl0sW1widG91Y2hlbmRcIixcInRvdWNoRW5kXCJdLFtcInRvdWNoc3RhcnRcIixcInRvdWNoU3RhcnRcIl0sW1widm9sdW1lY2hhbmdlXCIsXCJ2b2x1bWVDaGFuZ2VcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7Q2QoYSwhMCl9KTt6ZC5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NkKGEsITEpfSk7XG52YXIgRGQ9e2V2ZW50VHlwZXM6QWQsaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlOmZ1bmN0aW9uKGEpe2E9QmRbYV07cmV0dXJuIHZvaWQgMCE9PWEmJiEwPT09YS5pc0ludGVyYWN0aXZlfSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPUJkW2FdO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09cmQoYykpcmV0dXJuIG51bGw7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjphPXVkO2JyZWFrO2Nhc2UgXCJibHVyXCI6Y2FzZSBcImZvY3VzXCI6YT1xZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjphPWZkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmE9XG52ZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjphPXdkO2JyZWFrO2Nhc2UgZmI6Y2FzZSBnYjpjYXNlIGhiOmE9b2Q7YnJlYWs7Y2FzZSBpYjphPXhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjphPWJkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOmE9eWQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6YT1wZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjphPWdkO2JyZWFrO2RlZmF1bHQ6YT1IfWI9YS5nZXRQb29sZWQoZSxiLGMsZCk7WWEoYik7cmV0dXJuIGJ9fSxFZD1EZC5pc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUsXG5GZD1bXTtmdW5jdGlvbiBHZChhKXt2YXIgYj1hLnRhcmdldEluc3Q7ZG97aWYoIWIpe2EuYW5jZXN0b3JzLnB1c2goYik7YnJlYWt9dmFyIGM7Zm9yKGM9YjtjLnJldHVybjspYz1jLnJldHVybjtjPTMhPT1jLnRhZz9udWxsOmMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoIWMpYnJlYWs7YS5hbmNlc3RvcnMucHVzaChiKTtiPU5hKGMpfXdoaWxlKGIpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKWI9YS5hbmNlc3RvcnNbY10sSmEoYS50b3BMZXZlbFR5cGUsYixhLm5hdGl2ZUV2ZW50LFpiKGEubmF0aXZlRXZlbnQpKX12YXIgSGQ9ITA7ZnVuY3Rpb24gSWQoYSl7SGQ9ISFhfWZ1bmN0aW9uIEsoYSxiKXtpZighYilyZXR1cm4gbnVsbDt2YXIgYz0oRWQoYSk/S2Q6TGQpLmJpbmQobnVsbCxhKTtiLmFkZEV2ZW50TGlzdGVuZXIoYSxjLCExKX1cbmZ1bmN0aW9uIE1kKGEsYil7aWYoIWIpcmV0dXJuIG51bGw7dmFyIGM9KEVkKGEpP0tkOkxkKS5iaW5kKG51bGwsYSk7Yi5hZGRFdmVudExpc3RlbmVyKGEsYywhMCl9ZnVuY3Rpb24gS2QoYSxiKXtUYihMZCxhLGIpfWZ1bmN0aW9uIExkKGEsYil7aWYoSGQpe3ZhciBjPVpiKGIpO2M9TmEoYyk7bnVsbD09PWN8fFwibnVtYmVyXCIhPT10eXBlb2YgYy50YWd8fDI9PT1qZChjKXx8KGM9bnVsbCk7aWYoRmQubGVuZ3RoKXt2YXIgZD1GZC5wb3AoKTtkLnRvcExldmVsVHlwZT1hO2QubmF0aXZlRXZlbnQ9YjtkLnRhcmdldEluc3Q9YzthPWR9ZWxzZSBhPXt0b3BMZXZlbFR5cGU6YSxuYXRpdmVFdmVudDpiLHRhcmdldEluc3Q6YyxhbmNlc3RvcnM6W119O3RyeXtXYihHZCxhKX1maW5hbGx5e2EudG9wTGV2ZWxUeXBlPW51bGwsYS5uYXRpdmVFdmVudD1udWxsLGEudGFyZ2V0SW5zdD1udWxsLGEuYW5jZXN0b3JzLmxlbmd0aD0wLDEwPkZkLmxlbmd0aCYmRmQucHVzaChhKX19fVxudmFyIE5kPXtnZXQgX2VuYWJsZWQoKXtyZXR1cm4gSGR9LHNldEVuYWJsZWQ6SWQsaXNFbmFibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIEhkfSx0cmFwQnViYmxlZEV2ZW50OkssdHJhcENhcHR1cmVkRXZlbnQ6TWQsZGlzcGF0Y2hFdmVudDpMZH0sT2Q9e30sUGQ9MCxRZD1cIl9yZWFjdExpc3RlbmVyc0lEXCIrKFwiXCIrTWF0aC5yYW5kb20oKSkuc2xpY2UoMik7ZnVuY3Rpb24gUmQoYSl7T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsUWQpfHwoYVtRZF09UGQrKyxPZFthW1FkXV09e30pO3JldHVybiBPZFthW1FkXV19ZnVuY3Rpb24gU2QoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gVGQoYSxiKXt2YXIgYz1TZChhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1TZChjKX19ZnVuY3Rpb24gVWQoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBWZD1tLmNhblVzZURPTSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFdkPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGZvY3VzIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX0sWGQ9bnVsbCxZZD1udWxsLFpkPW51bGwsJGQ9ITE7XG5mdW5jdGlvbiBhZShhLGIpe2lmKCRkfHxudWxsPT1YZHx8WGQhPT1kYSgpKXJldHVybiBudWxsO3ZhciBjPVhkO1wic2VsZWN0aW9uU3RhcnRcImluIGMmJlVkKGMpP2M9e3N0YXJ0OmMuc2VsZWN0aW9uU3RhcnQsZW5kOmMuc2VsZWN0aW9uRW5kfTp3aW5kb3cuZ2V0U2VsZWN0aW9uPyhjPXdpbmRvdy5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTpjPXZvaWQgMDtyZXR1cm4gWmQmJmVhKFpkLGMpP251bGw6KFpkPWMsYT1ILmdldFBvb2xlZChXZC5zZWxlY3QsWWQsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1YZCxZYShhKSxhKX1cbnZhciBiZT17ZXZlbnRUeXBlczpXZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50LGY7aWYoIShmPSFlKSl7YTp7ZT1SZChlKTtmPXNhLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKXt2YXIgaD1mW2ddO2lmKCFlLmhhc093blByb3BlcnR5KGgpfHwhZVtoXSl7ZT0hMTticmVhayBhfX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/T2EoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjppZihZYihlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSlYZD1lLFlkPWIsWmQ9bnVsbDticmVhaztjYXNlIFwiYmx1clwiOlpkPVlkPVhkPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOiRkPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6cmV0dXJuICRkPSExLGFlKGMsZCk7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFZkKWJyZWFrO1xuY2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpyZXR1cm4gYWUoYyxkKX1yZXR1cm4gbnVsbH19O0dhLmluamVjdEV2ZW50UGx1Z2luT3JkZXIoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBUYXBFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7d2E9UWEuZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZTt4YT1RYS5nZXRJbnN0YW5jZUZyb21Ob2RlO3lhPVFhLmdldE5vZGVGcm9tSW5zdGFuY2U7R2EuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtTaW1wbGVFdmVudFBsdWdpbjpEZCxFbnRlckxlYXZlRXZlbnRQbHVnaW46aWQsQ2hhbmdlRXZlbnRQbHVnaW46YWQsU2VsZWN0RXZlbnRQbHVnaW46YmUsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjpJYn0pO1xudmFyIGNlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWU/cmVxdWVzdEFuaW1hdGlvbkZyYW1lOnZvaWQgMCxkZT1EYXRlLGVlPXNldFRpbWVvdXQsZmU9Y2xlYXJUaW1lb3V0LGdlPXZvaWQgMDtpZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgaGU9cGVyZm9ybWFuY2U7Z2U9ZnVuY3Rpb24oKXtyZXR1cm4gaGUubm93KCl9fWVsc2UgZ2U9ZnVuY3Rpb24oKXtyZXR1cm4gZGUubm93KCl9O3ZhciBpZT12b2lkIDAsamU9dm9pZCAwO1xuaWYobS5jYW5Vc2VET00pe3ZhciBrZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2U/Y2U6ZnVuY3Rpb24oKXtBKFwiMjc2XCIpfSxMPW51bGwsbGU9bnVsbCxtZT0tMSxuZT0hMSxvZT0hMSxwZT0wLHFlPTMzLHJlPTMzLHNlPXtkaWRUaW1lb3V0OiExLHRpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXt2YXIgYT1wZS1nZSgpO3JldHVybiAwPGE/YTowfX0sdWU9ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnNjaGVkdWxlZENhbGxiYWNrLGQ9ITE7dHJ5e2MoYiksZD0hMH1maW5hbGx5e2plKGEpLGR8fChuZT0hMCx3aW5kb3cucG9zdE1lc3NhZ2UodGUsXCIqXCIpKX19LHRlPVwiX19yZWFjdElkbGVDYWxsYmFjayRcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixmdW5jdGlvbihhKXtpZihhLnNvdXJjZT09PXdpbmRvdyYmYS5kYXRhPT09dGUmJihuZT0hMSxudWxsIT09TCkpe2lmKG51bGwhPT1MKXt2YXIgYj1nZSgpO2lmKCEoLTE9PT1cbm1lfHxtZT5iKSl7YT0tMTtmb3IodmFyIGM9W10sZD1MO251bGwhPT1kOyl7dmFyIGU9ZC50aW1lb3V0VGltZTstMSE9PWUmJmU8PWI/Yy5wdXNoKGQpOi0xIT09ZSYmKC0xPT09YXx8ZTxhKSYmKGE9ZSk7ZD1kLm5leHR9aWYoMDxjLmxlbmd0aClmb3Ioc2UuZGlkVGltZW91dD0hMCxiPTAsZD1jLmxlbmd0aDtiPGQ7YisrKXVlKGNbYl0sc2UpO21lPWF9fWZvcihhPWdlKCk7MDxwZS1hJiZudWxsIT09TDspYT1MLHNlLmRpZFRpbWVvdXQ9ITEsdWUoYSxzZSksYT1nZSgpO251bGw9PT1MfHxvZXx8KG9lPSEwLGtlKHZlKSl9fSwhMSk7dmFyIHZlPWZ1bmN0aW9uKGEpe29lPSExO3ZhciBiPWEtcGUrcmU7YjxyZSYmcWU8cmU/KDg+YiYmKGI9OCkscmU9YjxxZT9xZTpiKTpxZT1iO3BlPWErcmU7bmV8fChuZT0hMCx3aW5kb3cucG9zdE1lc3NhZ2UodGUsXCIqXCIpKX07aWU9ZnVuY3Rpb24oYSxiKXt2YXIgYz0tMTtudWxsIT1iJiZcIm51bWJlclwiPT09dHlwZW9mIGIudGltZW91dCYmKGM9Z2UoKStcbmIudGltZW91dCk7aWYoLTE9PT1tZXx8LTEhPT1jJiZjPG1lKW1lPWM7YT17c2NoZWR1bGVkQ2FsbGJhY2s6YSx0aW1lb3V0VGltZTpjLHByZXY6bnVsbCxuZXh0Om51bGx9O251bGw9PT1MP0w9YTooYj1hLnByZXY9bGUsbnVsbCE9PWImJihiLm5leHQ9YSkpO2xlPWE7b2V8fChvZT0hMCxrZSh2ZSkpO3JldHVybiBhfTtqZT1mdW5jdGlvbihhKXtpZihudWxsIT09YS5wcmV2fHxMPT09YSl7dmFyIGI9YS5uZXh0LGM9YS5wcmV2O2EubmV4dD1udWxsO2EucHJldj1udWxsO251bGwhPT1iP251bGwhPT1jPyhjLm5leHQ9YixiLnByZXY9Yyk6KGIucHJldj1udWxsLEw9Yik6bnVsbCE9PWM/KGMubmV4dD1udWxsLGxlPWMpOmxlPUw9bnVsbH19fWVsc2V7dmFyIHdlPW5ldyBNYXA7aWU9ZnVuY3Rpb24oYSl7dmFyIGI9e3NjaGVkdWxlZENhbGxiYWNrOmEsdGltZW91dFRpbWU6MCxuZXh0Om51bGwscHJldjpudWxsfSxjPWVlKGZ1bmN0aW9uKCl7YSh7dGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3JldHVybiBJbmZpbml0eX0sXG5kaWRUaW1lb3V0OiExfSl9KTt3ZS5zZXQoYSxjKTtyZXR1cm4gYn07amU9ZnVuY3Rpb24oYSl7dmFyIGI9d2UuZ2V0KGEuc2NoZWR1bGVkQ2FsbGJhY2spO3dlLmRlbGV0ZShhKTtmZShiKX19ZnVuY3Rpb24geGUoYSl7dmFyIGI9XCJcIjtiYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbD09YXx8XCJzdHJpbmdcIiE9PXR5cGVvZiBhJiZcIm51bWJlclwiIT09dHlwZW9mIGF8fChiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIHllKGEsYil7YT1wKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9eGUoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfVxuZnVuY3Rpb24gemUoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK2M7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIEFlKGEsYil7dmFyIGM9Yi52YWx1ZTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpudWxsIT1jP2M6Yi5kZWZhdWx0VmFsdWUsd2FzTXVsdGlwbGU6ISFiLm11bHRpcGxlfX1mdW5jdGlvbiBCZShhLGIpe251bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/QShcIjkxXCIpOnZvaWQgMDtyZXR1cm4gcCh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBDZShhLGIpe3ZhciBjPWIudmFsdWU7bnVsbD09YyYmKGM9Yi5kZWZhdWx0VmFsdWUsYj1iLmNoaWxkcmVuLG51bGwhPWImJihudWxsIT1jP0EoXCI5MlwiKTp2b2lkIDAsQXJyYXkuaXNBcnJheShiKSYmKDE+PWIubGVuZ3RoP3ZvaWQgMDpBKFwiOTNcIiksYj1iWzBdKSxjPVwiXCIrYiksbnVsbD09YyYmKGM9XCJcIikpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlwiXCIrY319XG5mdW5jdGlvbiBEZShhLGIpe3ZhciBjPWIudmFsdWU7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPWIuZGVmYXVsdFZhbHVlKX1mdW5jdGlvbiBFZShhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiYoYS52YWx1ZT1iKX12YXIgRmU9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gR2UoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBIZShhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/R2UoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgSWU9dm9pZCAwLEplPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PUZlLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle0llPUllfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO0llLmlubmVySFRNTD1cIjxzdmc+XCIrYitcIjwvc3ZnPlwiO2ZvcihiPUllLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIEtlKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgTGU9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLGZsb29kT3BhY2l0eTohMCxcbnN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0sTWU9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKExlKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe01lLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7TGVbYl09TGVbYV19KX0pO1xuZnVuY3Rpb24gTmUoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpO3ZhciBlPWM7dmFyIGY9YltjXTtlPW51bGw9PWZ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGZ8fFwiXCI9PT1mP1wiXCI6ZHx8XCJudW1iZXJcIiE9PXR5cGVvZiBmfHwwPT09Znx8TGUuaGFzT3duUHJvcGVydHkoZSkmJkxlW2VdPyhcIlwiK2YpLnRyaW0oKTpmK1wicHhcIjtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIE9lPXAoe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiBQZShhLGIsYyl7YiYmKE9lW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD9BKFwiMTM3XCIsYSxjKCkpOnZvaWQgMCksbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmKG51bGwhPWIuY2hpbGRyZW4/QShcIjYwXCIpOnZvaWQgMCxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3ZvaWQgMDpBKFwiNjFcIikpLG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZT9BKFwiNjJcIixjKCkpOnZvaWQgMCl9XG5mdW5jdGlvbiBRZShhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIFJlPXYudGhhdFJldHVybnMoXCJcIik7XG5mdW5jdGlvbiBTZShhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1SZChhKTtiPXNhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdO2lmKCFjLmhhc093blByb3BlcnR5KGUpfHwhY1tlXSl7c3dpdGNoKGUpe2Nhc2UgXCJzY3JvbGxcIjpNZChcInNjcm9sbFwiLGEpO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6TWQoXCJmb2N1c1wiLGEpO01kKFwiYmx1clwiLGEpO2MuYmx1cj0hMDtjLmZvY3VzPSEwO2JyZWFrO2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xvc2VcIjokYihlLCEwKSYmTWQoZSxhKTticmVhaztjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztkZWZhdWx0Oi0xPT09amIuaW5kZXhPZihlKSYmSyhlLGEpfWNbZV09ITB9fX1cbmZ1bmN0aW9uIFRlKGEsYixjLGQpe2M9OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7ZD09PUZlLmh0bWwmJihkPUdlKGEpKTtkPT09RmUuaHRtbD9cInNjcmlwdFwiPT09YT8oYT1jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6YT1cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM/Yy5jcmVhdGVFbGVtZW50KGEse2lzOmIuaXN9KTpjLmNyZWF0ZUVsZW1lbnQoYSk6YT1jLmNyZWF0ZUVsZW1lbnROUyhkLGEpO3JldHVybiBhfWZ1bmN0aW9uIFVlKGEsYil7cmV0dXJuKDk9PT1iLm5vZGVUeXBlP2I6Yi5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShhKX1cbmZ1bmN0aW9uIFZlKGEsYixjLGQpe3ZhciBlPVFlKGIsYyk7c3dpdGNoKGIpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6SyhcImxvYWRcIixhKTt2YXIgZj1jO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihmPTA7ZjxqYi5sZW5ndGg7ZisrKUsoamJbZl0sYSk7Zj1jO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpLKFwiZXJyb3JcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6SyhcImVycm9yXCIsYSk7SyhcImxvYWRcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImZvcm1cIjpLKFwicmVzZXRcIixhKTtLKFwic3VibWl0XCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6SyhcInRvZ2dsZVwiLGEpO2Y9YzticmVhaztjYXNlIFwiaW5wdXRcIjpIYyhhLGMpO2Y9R2MoYSxjKTtLKFwiaW52YWxpZFwiLGEpO1NlKGQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj15ZShhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpBZShhLGMpO2Y9cCh7fSxjLHt2YWx1ZTp2b2lkIDB9KTtcbksoXCJpbnZhbGlkXCIsYSk7U2UoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkNlKGEsYyk7Zj1CZShhLGMpO0soXCJpbnZhbGlkXCIsYSk7U2UoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6Zj1jfVBlKGIsZixSZSk7dmFyIGc9ZixoO2ZvcihoIGluIGcpaWYoZy5oYXNPd25Qcm9wZXJ0eShoKSl7dmFyIGs9Z1toXTtcInN0eWxlXCI9PT1oP05lKGEsayxSZSk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09aD8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZKZShhLGspKTpcImNoaWxkcmVuXCI9PT1oP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09Ynx8XCJcIiE9PWspJiZLZShhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmS2UoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmXCJhdXRvRm9jdXNcIiE9PWgmJihyYS5oYXNPd25Qcm9wZXJ0eShoKT9udWxsIT1rJiZTZShkLFxuaCk6bnVsbCE9ayYmRmMoYSxoLGssZSkpfXN3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpjYyhhKTtNYyhhLGMsITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmNjKGEpO0VlKGEsYyk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWMudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixjLnZhbHVlKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWMubXVsdGlwbGU7Yj1jLnZhbHVlO251bGwhPWI/emUoYSwhIWMubXVsdGlwbGUsYiwhMSk6bnVsbCE9Yy5kZWZhdWx0VmFsdWUmJnplKGEsISFjLm11bHRpcGxlLGMuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihhLm9uY2xpY2s9dil9fVxuZnVuY3Rpb24gV2UoYSxiLGMsZCxlKXt2YXIgZj1udWxsO3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpjPUdjKGEsYyk7ZD1HYyhhLGQpO2Y9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmM9eWUoYSxjKTtkPXllKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Yz1wKHt9LGMse3ZhbHVlOnZvaWQgMH0pO2Q9cCh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmM9QmUoYSxjKTtkPUJlKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9dil9UGUoYixkLFJlKTtiPWE9dm9pZCAwO3ZhciBnPW51bGw7Zm9yKGEgaW4gYylpZighZC5oYXNPd25Qcm9wZXJ0eShhKSYmYy5oYXNPd25Qcm9wZXJ0eShhKSYmbnVsbCE9Y1thXSlpZihcInN0eWxlXCI9PT1hKXt2YXIgaD1jW2FdO2ZvcihiIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShiKSYmKGd8fFxuKGc9e30pLGdbYl09XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWEmJlwiY2hpbGRyZW5cIiE9PWEmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1hJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YSYmXCJhdXRvRm9jdXNcIiE9PWEmJihyYS5oYXNPd25Qcm9wZXJ0eShhKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2goYSxudWxsKSk7Zm9yKGEgaW4gZCl7dmFyIGs9ZFthXTtoPW51bGwhPWM/Y1thXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShhKSYmayE9PWgmJihudWxsIT1rfHxudWxsIT1oKSlpZihcInN0eWxlXCI9PT1hKWlmKGgpe2ZvcihiIGluIGgpIWguaGFzT3duUHJvcGVydHkoYil8fGsmJmsuaGFzT3duUHJvcGVydHkoYil8fChnfHwoZz17fSksZ1tiXT1cIlwiKTtmb3IoYiBpbiBrKWsuaGFzT3duUHJvcGVydHkoYikmJmhbYl0hPT1rW2JdJiYoZ3x8KGc9e30pLGdbYl09a1tiXSl9ZWxzZSBnfHwoZnx8KGY9W10pLGYucHVzaChhLGcpKSxcbmc9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09YT8oaz1rP2suX19odG1sOnZvaWQgMCxoPWg/aC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmghPT1rJiYoZj1mfHxbXSkucHVzaChhLFwiXCIraykpOlwiY2hpbGRyZW5cIj09PWE/aD09PWt8fFwic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWEmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1hJiYocmEuaGFzT3duUHJvcGVydHkoYSk/KG51bGwhPWsmJlNlKGUsYSksZnx8aD09PWt8fChmPVtdKSk6KGY9Znx8W10pLnB1c2goYSxrKSl9ZyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLGcpO3JldHVybiBmfVxuZnVuY3Rpb24gWGUoYSxiLGMsZCxlKXtcImlucHV0XCI9PT1jJiZcInJhZGlvXCI9PT1lLnR5cGUmJm51bGwhPWUubmFtZSYmSmMoYSxlKTtRZShjLGQpO2Q9UWUoYyxlKTtmb3IodmFyIGY9MDtmPGIubGVuZ3RoO2YrPTIpe3ZhciBnPWJbZl0saD1iW2YrMV07XCJzdHlsZVwiPT09Zz9OZShhLGgsUmUpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/SmUoYSxoKTpcImNoaWxkcmVuXCI9PT1nP0tlKGEsaCk6RmMoYSxnLGgsZCl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOktjKGEsZSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6RGUoYSxlKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZT12b2lkIDAsYj1hLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZS5tdWx0aXBsZSxjPWUudmFsdWUsbnVsbCE9Yz96ZShhLCEhZS5tdWx0aXBsZSxjLCExKTpiIT09ISFlLm11bHRpcGxlJiYobnVsbCE9ZS5kZWZhdWx0VmFsdWU/XG56ZShhLCEhZS5tdWx0aXBsZSxlLmRlZmF1bHRWYWx1ZSwhMCk6emUoYSwhIWUubXVsdGlwbGUsZS5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fVxuZnVuY3Rpb24gWWUoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpLKFwibG9hZFwiLGEpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihkPTA7ZDxqYi5sZW5ndGg7ZCsrKUsoamJbZF0sYSk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOksoXCJlcnJvclwiLGEpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOksoXCJlcnJvclwiLGEpO0soXCJsb2FkXCIsYSk7YnJlYWs7Y2FzZSBcImZvcm1cIjpLKFwicmVzZXRcIixhKTtLKFwic3VibWl0XCIsYSk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpLKFwidG9nZ2xlXCIsYSk7YnJlYWs7Y2FzZSBcImlucHV0XCI6SGMoYSxjKTtLKFwiaW52YWxpZFwiLGEpO1NlKGUsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwic2VsZWN0XCI6QWUoYSxjKTtLKFwiaW52YWxpZFwiLGEpO1NlKGUsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpDZShhLGMpLEsoXCJpbnZhbGlkXCIsYSksU2UoZSxcIm9uQ2hhbmdlXCIpfVBlKGIsXG5jLFJlKTtkPW51bGw7Zm9yKHZhciBmIGluIGMpaWYoYy5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGc9Y1tmXTtcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2YgZz9hLnRleHRDb250ZW50IT09ZyYmKGQ9W1wiY2hpbGRyZW5cIixnXSk6XCJudW1iZXJcIj09PXR5cGVvZiBnJiZhLnRleHRDb250ZW50IT09XCJcIitnJiYoZD1bXCJjaGlsZHJlblwiLFwiXCIrZ10pOnJhLmhhc093blByb3BlcnR5KGYpJiZudWxsIT1nJiZTZShlLGYpfXN3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpjYyhhKTtNYyhhLGMsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmNjKGEpO0VlKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLm9uQ2xpY2smJihhLm9uY2xpY2s9dil9cmV0dXJuIGR9ZnVuY3Rpb24gWmUoYSxiKXtyZXR1cm4gYS5ub2RlVmFsdWUhPT1ifVxudmFyICRlPXtjcmVhdGVFbGVtZW50OlRlLGNyZWF0ZVRleHROb2RlOlVlLHNldEluaXRpYWxQcm9wZXJ0aWVzOlZlLGRpZmZQcm9wZXJ0aWVzOldlLHVwZGF0ZVByb3BlcnRpZXM6WGUsZGlmZkh5ZHJhdGVkUHJvcGVydGllczpZZSxkaWZmSHlkcmF0ZWRUZXh0OlplLHdhcm5Gb3JVbm1hdGNoZWRUZXh0OmZ1bmN0aW9uKCl7fSx3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVFbGVtZW50OmZ1bmN0aW9uKCl7fSx3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVUZXh0OmZ1bmN0aW9uKCl7fSx3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkVGV4dDpmdW5jdGlvbigpe30scmVzdG9yZUNvbnRyb2xsZWRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOktjKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7XG5jPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPVBhKGQpO2U/dm9pZCAwOkEoXCI5MFwiKTtkYyhkKTtLYyhkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6RGUoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJnplKGEsISFjLm11bHRpcGxlLGIsITEpfX19LGFmPW51bGwsYmY9bnVsbDtmdW5jdGlvbiBjZihhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9XG5mdW5jdGlvbiBkZihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcInN0cmluZ1wiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfXZhciBlZj1nZSxmZj1pZSxnZj1qZTtmdW5jdGlvbiBoZihhKXtmb3IoYT1hLm5leHRTaWJsaW5nO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGpmKGEpe2ZvcihhPWEuZmlyc3RDaGlsZDthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX1uZXcgU2V0O3ZhciBrZj1bXSxsZj0tMTtmdW5jdGlvbiBtZihhKXtyZXR1cm57Y3VycmVudDphfX1cbmZ1bmN0aW9uIE0oYSl7MD5sZnx8KGEuY3VycmVudD1rZltsZl0sa2ZbbGZdPW51bGwsbGYtLSl9ZnVuY3Rpb24gTihhLGIpe2xmKys7a2ZbbGZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgbmY9bWYoaGEpLE89bWYoITEpLG9mPWhhO2Z1bmN0aW9uIHBmKGEpe3JldHVybiBxZihhKT9vZjpuZi5jdXJyZW50fVxuZnVuY3Rpb24gcmYoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBoYTt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBxZihhKXtyZXR1cm4gMj09PWEudGFnJiZudWxsIT1hLnR5cGUuY2hpbGRDb250ZXh0VHlwZXN9ZnVuY3Rpb24gc2YoYSl7cWYoYSkmJihNKE8sYSksTShuZixhKSl9ZnVuY3Rpb24gdGYoYSl7TShPLGEpO00obmYsYSl9XG5mdW5jdGlvbiB1ZihhLGIsYyl7bmYuY3VycmVudCE9PWhhP0EoXCIxNjhcIik6dm9pZCAwO04obmYsYixhKTtOKE8sYyxhKX1mdW5jdGlvbiB2ZihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlLGQ9YS50eXBlLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldENoaWxkQ29udGV4dClyZXR1cm4gYjtjPWMuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGMpZSBpbiBkP3ZvaWQgMDpBKFwiMTA4XCIsdWMoYSl8fFwiVW5rbm93blwiLGUpO3JldHVybiBwKHt9LGIsYyl9ZnVuY3Rpb24gd2YoYSl7aWYoIXFmKGEpKXJldHVybiExO3ZhciBiPWEuc3RhdGVOb2RlO2I9YiYmYi5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8aGE7b2Y9bmYuY3VycmVudDtOKG5mLGIsYSk7TihPLE8uY3VycmVudCxhKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIHhmKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7Yz92b2lkIDA6QShcIjE2OVwiKTtpZihiKXt2YXIgZD12ZihhLG9mKTtjLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWQ7TShPLGEpO00obmYsYSk7TihuZixkLGEpfWVsc2UgTShPLGEpO04oTyxiLGEpfVxuZnVuY3Rpb24geWYoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5lZmZlY3RUYWc9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1cbmZ1bmN0aW9uIHpmKGEsYixjKXt2YXIgZD1hLmFsdGVybmF0ZTtudWxsPT09ZD8oZD1uZXcgeWYoYS50YWcsYixhLmtleSxhLm1vZGUpLGQudHlwZT1hLnR5cGUsZC5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsZC5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1kKTooZC5wZW5kaW5nUHJvcHM9YixkLmVmZmVjdFRhZz0wLGQubmV4dEVmZmVjdD1udWxsLGQuZmlyc3RFZmZlY3Q9bnVsbCxkLmxhc3RFZmZlY3Q9bnVsbCk7ZC5leHBpcmF0aW9uVGltZT1jO2QuY2hpbGQ9YS5jaGlsZDtkLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2QubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZC51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2Quc2libGluZz1hLnNpYmxpbmc7ZC5pbmRleD1hLmluZGV4O2QucmVmPWEucmVmO3JldHVybiBkfVxuZnVuY3Rpb24gQWYoYSxiLGMpe3ZhciBkPWEudHlwZSxlPWEua2V5O2E9YS5wcm9wcztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl2YXIgZj1kLnByb3RvdHlwZSYmZC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD8yOjA7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGQpZj01O2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgaWM6cmV0dXJuIEJmKGEuY2hpbGRyZW4sYixjLGUpO2Nhc2UgcGM6Zj0xMTtifD0zO2JyZWFrO2Nhc2UgamM6Zj0xMTtifD0yO2JyZWFrO2Nhc2Uga2M6cmV0dXJuIGQ9bmV3IHlmKDE1LGEsZSxifDQpLGQudHlwZT1rYyxkLmV4cGlyYXRpb25UaW1lPWMsZDtjYXNlIHJjOmY9MTY7Ynw9MjticmVhaztkZWZhdWx0OmE6e3N3aXRjaChcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kP2QuJCR0eXBlb2Y6bnVsbCl7Y2FzZSBsYzpmPTEzO2JyZWFrIGE7Y2FzZSBtYzpmPTEyO2JyZWFrIGE7Y2FzZSBxYzpmPTE0O2JyZWFrIGE7ZGVmYXVsdDpBKFwiMTMwXCIsbnVsbD09ZD9cbmQ6dHlwZW9mIGQsXCJcIil9Zj12b2lkIDB9fWI9bmV3IHlmKGYsYSxlLGIpO2IudHlwZT1kO2IuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYn1mdW5jdGlvbiBCZihhLGIsYyxkKXthPW5ldyB5ZigxMCxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIENmKGEsYixjKXthPW5ldyB5Zig2LGEsbnVsbCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gRGYoYSxiLGMpe2I9bmV3IHlmKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gRWYoYSxiLGMpe2I9bmV3IHlmKDMsbnVsbCxudWxsLGI/MzowKTthPXtjdXJyZW50OmIsY29udGFpbmVySW5mbzphLHBlbmRpbmdDaGlsZHJlbjpudWxsLGVhcmxpZXN0UGVuZGluZ1RpbWU6MCxsYXRlc3RQZW5kaW5nVGltZTowLGVhcmxpZXN0U3VzcGVuZGVkVGltZTowLGxhdGVzdFN1c3BlbmRlZFRpbWU6MCxsYXRlc3RQaW5nZWRUaW1lOjAscGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOjAsZmluaXNoZWRXb3JrOm51bGwsY29udGV4dDpudWxsLHBlbmRpbmdDb250ZXh0Om51bGwsaHlkcmF0ZTpjLHJlbWFpbmluZ0V4cGlyYXRpb25UaW1lOjAsZmlyc3RCYXRjaDpudWxsLG5leHRTY2hlZHVsZWRSb290Om51bGx9O3JldHVybiBiLnN0YXRlTm9kZT1hfXZhciBGZj1udWxsLEdmPW51bGw7ZnVuY3Rpb24gSGYoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3RyeXtyZXR1cm4gYShiKX1jYXRjaChjKXt9fX1cbmZ1bmN0aW9uIElmKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO0ZmPUhmKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJSb290KGMsYSl9KTtHZj1IZihmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyVW5tb3VudChjLGEpfSl9Y2F0Y2goZCl7fXJldHVybiEwfWZ1bmN0aW9uIEpmKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBGZiYmRmYoYSl9ZnVuY3Rpb24gS2YoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIEdmJiZHZihhKX12YXIgTGY9ITE7XG5mdW5jdGlvbiBNZihhKXtyZXR1cm57ZXhwaXJhdGlvblRpbWU6MCxiYXNlU3RhdGU6YSxmaXJzdFVwZGF0ZTpudWxsLGxhc3RVcGRhdGU6bnVsbCxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1mdW5jdGlvbiBOZihhKXtyZXR1cm57ZXhwaXJhdGlvblRpbWU6YS5leHBpcmF0aW9uVGltZSxiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RVcGRhdGU6YS5maXJzdFVwZGF0ZSxsYXN0VXBkYXRlOmEubGFzdFVwZGF0ZSxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1cbmZ1bmN0aW9uIE9mKGEpe3JldHVybntleHBpcmF0aW9uVGltZTphLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbCxuZXh0RWZmZWN0Om51bGx9fWZ1bmN0aW9uIFBmKGEsYixjKXtudWxsPT09YS5sYXN0VXBkYXRlP2EuZmlyc3RVcGRhdGU9YS5sYXN0VXBkYXRlPWI6KGEubGFzdFVwZGF0ZS5uZXh0PWIsYS5sYXN0VXBkYXRlPWIpO2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lfHxhLmV4cGlyYXRpb25UaW1lPmMpYS5leHBpcmF0aW9uVGltZT1jfVxuZnVuY3Rpb24gUWYoYSxiLGMpe3ZhciBkPWEuYWx0ZXJuYXRlO2lmKG51bGw9PT1kKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO3ZhciBmPW51bGw7bnVsbD09PWUmJihlPWEudXBkYXRlUXVldWU9TWYoYS5tZW1vaXplZFN0YXRlKSl9ZWxzZSBlPWEudXBkYXRlUXVldWUsZj1kLnVwZGF0ZVF1ZXVlLG51bGw9PT1lP251bGw9PT1mPyhlPWEudXBkYXRlUXVldWU9TWYoYS5tZW1vaXplZFN0YXRlKSxmPWQudXBkYXRlUXVldWU9TWYoZC5tZW1vaXplZFN0YXRlKSk6ZT1hLnVwZGF0ZVF1ZXVlPU5mKGYpOm51bGw9PT1mJiYoZj1kLnVwZGF0ZVF1ZXVlPU5mKGUpKTtudWxsPT09Znx8ZT09PWY/UGYoZSxiLGMpOm51bGw9PT1lLmxhc3RVcGRhdGV8fG51bGw9PT1mLmxhc3RVcGRhdGU/KFBmKGUsYixjKSxQZihmLGIsYykpOihQZihlLGIsYyksZi5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gUmYoYSxiLGMpe3ZhciBkPWEudXBkYXRlUXVldWU7ZD1udWxsPT09ZD9hLnVwZGF0ZVF1ZXVlPU1mKGEubWVtb2l6ZWRTdGF0ZSk6U2YoYSxkKTtudWxsPT09ZC5sYXN0Q2FwdHVyZWRVcGRhdGU/ZC5maXJzdENhcHR1cmVkVXBkYXRlPWQubGFzdENhcHR1cmVkVXBkYXRlPWI6KGQubGFzdENhcHR1cmVkVXBkYXRlLm5leHQ9YixkLmxhc3RDYXB0dXJlZFVwZGF0ZT1iKTtpZigwPT09ZC5leHBpcmF0aW9uVGltZXx8ZC5leHBpcmF0aW9uVGltZT5jKWQuZXhwaXJhdGlvblRpbWU9Y31mdW5jdGlvbiBTZihhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZiPT09Yy51cGRhdGVRdWV1ZSYmKGI9YS51cGRhdGVRdWV1ZT1OZihiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBUZihhLGIsYyxkLGUsZil7c3dpdGNoKGMudGFnKXtjYXNlIDE6cmV0dXJuIGE9Yy5wYXlsb2FkLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtjYXNlIDM6YS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTEwMjV8NjQ7Y2FzZSAwOmE9Yy5wYXlsb2FkO2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2lmKG51bGw9PT1lfHx2b2lkIDA9PT1lKWJyZWFrO3JldHVybiBwKHt9LGQsZSk7Y2FzZSAyOkxmPSEwfXJldHVybiBkfVxuZnVuY3Rpb24gVWYoYSxiLGMsZCxlKXtMZj0hMTtpZighKDA9PT1iLmV4cGlyYXRpb25UaW1lfHxiLmV4cGlyYXRpb25UaW1lPmUpKXtiPVNmKGEsYik7Zm9yKHZhciBmPWIuYmFzZVN0YXRlLGc9bnVsbCxoPTAsaz1iLmZpcnN0VXBkYXRlLG49ZjtudWxsIT09azspe3ZhciByPWsuZXhwaXJhdGlvblRpbWU7aWYocj5lKXtpZihudWxsPT09ZyYmKGc9ayxmPW4pLDA9PT1ofHxoPnIpaD1yfWVsc2Ugbj1UZihhLGIsayxuLGMsZCksbnVsbCE9PWsuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9MzIsay5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdEVmZmVjdD9iLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1rOihiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1rLGIubGFzdEVmZmVjdD1rKSk7az1rLm5leHR9cj1udWxsO2ZvcihrPWIuZmlyc3RDYXB0dXJlZFVwZGF0ZTtudWxsIT09azspe3ZhciB3PWsuZXhwaXJhdGlvblRpbWU7aWYodz5lKXtpZihudWxsPT09ciYmKHI9ayxudWxsPT09XG5nJiYoZj1uKSksMD09PWh8fGg+dyloPXd9ZWxzZSBuPVRmKGEsYixrLG4sYyxkKSxudWxsIT09ay5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD0zMixrLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q/Yi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PWs6KGIubGFzdENhcHR1cmVkRWZmZWN0Lm5leHRFZmZlY3Q9ayxiLmxhc3RDYXB0dXJlZEVmZmVjdD1rKSk7az1rLm5leHR9bnVsbD09PWcmJihiLmxhc3RVcGRhdGU9bnVsbCk7bnVsbD09PXI/Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbDphLmVmZmVjdFRhZ3w9MzI7bnVsbD09PWcmJm51bGw9PT1yJiYoZj1uKTtiLmJhc2VTdGF0ZT1mO2IuZmlyc3RVcGRhdGU9ZztiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9cjtiLmV4cGlyYXRpb25UaW1lPWg7YS5tZW1vaXplZFN0YXRlPW59fVxuZnVuY3Rpb24gVmYoYSxiKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYT9BKFwiMTkxXCIsYSk6dm9pZCAwO2EuY2FsbChiKX1cbmZ1bmN0aW9uIFdmKGEsYixjKXtudWxsIT09Yi5maXJzdENhcHR1cmVkVXBkYXRlJiYobnVsbCE9PWIubGFzdFVwZGF0ZSYmKGIubGFzdFVwZGF0ZS5uZXh0PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSxiLmxhc3RVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGUpLGIuZmlyc3RDYXB0dXJlZFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsKTthPWIuZmlyc3RFZmZlY3Q7Zm9yKGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGw7bnVsbCE9PWE7KXt2YXIgZD1hLmNhbGxiYWNrO251bGwhPT1kJiYoYS5jYWxsYmFjaz1udWxsLFZmKGQsYykpO2E9YS5uZXh0RWZmZWN0fWE9Yi5maXJzdENhcHR1cmVkRWZmZWN0O2ZvcihiLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9bnVsbDtudWxsIT09YTspYj1hLmNhbGxiYWNrLG51bGwhPT1iJiYoYS5jYWxsYmFjaz1udWxsLFZmKGIsYykpLGE9YS5uZXh0RWZmZWN0fVxuZnVuY3Rpb24gWGYoYSxiKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazp2YyhiKX19dmFyIFlmPW1mKG51bGwpLFpmPW1mKG51bGwpLCRmPW1mKDApO2Z1bmN0aW9uIGFnKGEpe3ZhciBiPWEudHlwZS5fY29udGV4dDtOKCRmLGIuX2NoYW5nZWRCaXRzLGEpO04oWmYsYi5fY3VycmVudFZhbHVlLGEpO04oWWYsYSxhKTtiLl9jdXJyZW50VmFsdWU9YS5wZW5kaW5nUHJvcHMudmFsdWU7Yi5fY2hhbmdlZEJpdHM9YS5zdGF0ZU5vZGV9ZnVuY3Rpb24gYmcoYSl7dmFyIGI9JGYuY3VycmVudCxjPVpmLmN1cnJlbnQ7TShZZixhKTtNKFpmLGEpO00oJGYsYSk7YT1hLnR5cGUuX2NvbnRleHQ7YS5fY3VycmVudFZhbHVlPWM7YS5fY2hhbmdlZEJpdHM9Yn12YXIgY2c9e30sZGc9bWYoY2cpLGVnPW1mKGNnKSxmZz1tZihjZyk7ZnVuY3Rpb24gZ2coYSl7YT09PWNnP0EoXCIxNzRcIik6dm9pZCAwO3JldHVybiBhfVxuZnVuY3Rpb24gaWcoYSxiKXtOKGZnLGIsYSk7TihlZyxhLGEpO04oZGcsY2csYSk7dmFyIGM9Yi5ub2RlVHlwZTtzd2l0Y2goYyl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6SGUobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmM9OD09PWM/Yi5wYXJlbnROb2RlOmIsYj1jLm5hbWVzcGFjZVVSSXx8bnVsbCxjPWMudGFnTmFtZSxiPUhlKGIsYyl9TShkZyxhKTtOKGRnLGIsYSl9ZnVuY3Rpb24gamcoYSl7TShkZyxhKTtNKGVnLGEpO00oZmcsYSl9ZnVuY3Rpb24ga2coYSl7ZWcuY3VycmVudD09PWEmJihNKGRnLGEpLE0oZWcsYSkpfWZ1bmN0aW9uIGxnKGEsYixjKXt2YXIgZD1hLm1lbW9pemVkU3RhdGU7Yj1iKGMsZCk7ZD1udWxsPT09Ynx8dm9pZCAwPT09Yj9kOnAoe30sZCxiKTthLm1lbW9pemVkU3RhdGU9ZDthPWEudXBkYXRlUXVldWU7bnVsbCE9PWEmJjA9PT1hLmV4cGlyYXRpb25UaW1lJiYoYS5iYXNlU3RhdGU9ZCl9XG52YXIgcGc9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpPzI9PT1qZChhKTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1tZygpO2Q9bmcoZCxhKTt2YXIgZT1PZihkKTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7UWYoYSxlLGQpO29nKGEsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPW1nKCk7ZD1uZyhkLGEpO3ZhciBlPU9mKGQpO2UudGFnPTE7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO1FmKGEsZSxkKTtvZyhhLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgYz1tZygpO2M9bmcoYyxhKTt2YXIgZD1PZihjKTtkLnRhZz0yO3ZvaWQgMCE9PVxuYiYmbnVsbCE9PWImJihkLmNhbGxiYWNrPWIpO1FmKGEsZCxjKTtvZyhhLGMpfX07ZnVuY3Rpb24gcWcoYSxiLGMsZCxlLGYpe3ZhciBnPWEuc3RhdGVOb2RlO2E9YS50eXBlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLnNob3VsZENvbXBvbmVudFVwZGF0ZT9nLnNob3VsZENvbXBvbmVudFVwZGF0ZShjLGUsZik6YS5wcm90b3R5cGUmJmEucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFlYShiLGMpfHwhZWEoZCxlKTohMH1cbmZ1bmN0aW9uIHJnKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZwZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIHNnKGEsYil7dmFyIGM9YS50eXBlLGQ9YS5zdGF0ZU5vZGUsZT1hLnBlbmRpbmdQcm9wcyxmPXBmKGEpO2QucHJvcHM9ZTtkLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtkLnJlZnM9aGE7ZC5jb250ZXh0PXJmKGEsZik7Zj1hLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoVWYoYSxmLGUsZCxiKSxkLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7Zj1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYobGcoYSxmLGUpLGQuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5jb21wb25lbnRXaWxsTW91bnR8fChjPWQuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbE1vdW50JiZcbmQuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYyE9PWQuc3RhdGUmJnBnLmVucXVldWVSZXBsYWNlU3RhdGUoZCxkLnN0YXRlLG51bGwpLGY9YS51cGRhdGVRdWV1ZSxudWxsIT09ZiYmKFVmKGEsZixlLGQsYiksZC5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX12YXIgdGc9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIHVnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjt2YXIgZD12b2lkIDA7YyYmKDIhPT1jLnRhZz9BKFwiMTEwXCIpOnZvaWQgMCxkPWMuc3RhdGVOb2RlKTtkP3ZvaWQgMDpBKFwiMTQ3XCIsYSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzPT09aGE/ZC5yZWZzPXt9OmQucmVmcztudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifVwic3RyaW5nXCIhPT10eXBlb2YgYT9BKFwiMTQ4XCIpOnZvaWQgMDtjLl9vd25lcj92b2lkIDA6QShcIjI1NFwiLGEpfXJldHVybiBhfVxuZnVuY3Rpb24gdmcoYSxiKXtcInRleHRhcmVhXCIhPT1hLnR5cGUmJkEoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YixcIlwiKX1cbmZ1bmN0aW9uIHdnKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZWZmZWN0VGFnPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiLGMpe2E9emYoYSxiLGMpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1DZihjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIudHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyxkKSxkLnJlZj11ZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9QWYoYyxhLm1vZGUsZCk7ZC5yZWY9dWcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbihhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9XG5EZihjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10sZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiByKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDEwIT09Yi50YWcpcmV0dXJuIGI9QmYoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHcoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPUNmKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIGdjOnJldHVybiBjPUFmKGIsYS5tb2RlLGMpLGMucmVmPXVnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSBoYzpyZXR1cm4gYj1EZihiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYodGcoYil8fHRjKGIpKXJldHVybiBiPUJmKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49XG5hLGI7dmcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBQKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIGdjOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09aWM/cihhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIGhjOnJldHVybiBjLmtleT09PWU/bihhLGIsYyxkKTpudWxsfWlmKHRnKGMpfHx0YyhjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpyKGEsYixjLGQsbnVsbCk7dmcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBuYyhhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtcbmlmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIGdjOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1pYz9yKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSBoYzpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbihiLGEsZCxlKX1pZih0ZyhkKXx8dGMoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwscihiLGEsZCxlLG51bGwpO3ZnKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSmQoZSxnLGgsayl7Zm9yKHZhciB1PW51bGwseD1udWxsLHQ9ZyxxPWc9MCxuPW51bGw7bnVsbCE9PXQmJnE8aC5sZW5ndGg7cSsrKXt0LmluZGV4PnE/KG49dCx0PW51bGwpOm49dC5zaWJsaW5nO3ZhciBsPVAoZSx0LGhbcV0sayk7aWYobnVsbD09PWwpe251bGw9PT10JiYodD1uKTticmVha31hJiZ0JiZudWxsPT09bC5hbHRlcm5hdGUmJmIoZSxcbnQpO2c9ZihsLGcscSk7bnVsbD09PXg/dT1sOnguc2libGluZz1sO3g9bDt0PW59aWYocT09PWgubGVuZ3RoKXJldHVybiBjKGUsdCksdTtpZihudWxsPT09dCl7Zm9yKDtxPGgubGVuZ3RoO3ErKylpZih0PXcoZSxoW3FdLGspKWc9Zih0LGcscSksbnVsbD09PXg/dT10Onguc2libGluZz10LHg9dDtyZXR1cm4gdX1mb3IodD1kKGUsdCk7cTxoLmxlbmd0aDtxKyspaWYobj1uYyh0LGUscSxoW3FdLGspKWEmJm51bGwhPT1uLmFsdGVybmF0ZSYmdC5kZWxldGUobnVsbD09PW4ua2V5P3E6bi5rZXkpLGc9ZihuLGcscSksbnVsbD09PXg/dT1uOnguc2libGluZz1uLHg9bjthJiZ0LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiB1fWZ1bmN0aW9uIEUoZSxnLGgsayl7dmFyIHU9dGMoaCk7XCJmdW5jdGlvblwiIT09dHlwZW9mIHU/QShcIjE1MFwiKTp2b2lkIDA7aD11LmNhbGwoaCk7bnVsbD09aD9BKFwiMTUxXCIpOnZvaWQgMDtmb3IodmFyIHQ9dT1udWxsLG49Zyx4PVxuZz0wLHk9bnVsbCxsPWgubmV4dCgpO251bGwhPT1uJiYhbC5kb25lO3grKyxsPWgubmV4dCgpKXtuLmluZGV4Png/KHk9bixuPW51bGwpOnk9bi5zaWJsaW5nO3ZhciByPVAoZSxuLGwudmFsdWUsayk7aWYobnVsbD09PXIpe258fChuPXkpO2JyZWFrfWEmJm4mJm51bGw9PT1yLmFsdGVybmF0ZSYmYihlLG4pO2c9ZihyLGcseCk7bnVsbD09PXQ/dT1yOnQuc2libGluZz1yO3Q9cjtuPXl9aWYobC5kb25lKXJldHVybiBjKGUsbiksdTtpZihudWxsPT09bil7Zm9yKDshbC5kb25lO3grKyxsPWgubmV4dCgpKWw9dyhlLGwudmFsdWUsayksbnVsbCE9PWwmJihnPWYobCxnLHgpLG51bGw9PT10P3U9bDp0LnNpYmxpbmc9bCx0PWwpO3JldHVybiB1fWZvcihuPWQoZSxuKTshbC5kb25lO3grKyxsPWgubmV4dCgpKWw9bmMobixlLHgsbC52YWx1ZSxrKSxudWxsIT09bCYmKGEmJm51bGwhPT1sLmFsdGVybmF0ZSYmbi5kZWxldGUobnVsbD09PWwua2V5P3g6bC5rZXkpLGc9ZihsLGcseCksbnVsbD09PVxudD91PWw6dC5zaWJsaW5nPWwsdD1sKTthJiZuLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiB1fXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1pYyYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBuPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobilzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBnYzphOntuPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PW4paWYoMTA9PT1rLnRhZz9mLnR5cGU9PT1pYzprLnR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYudHlwZT09PWljP2YucHJvcHMuY2hpbGRyZW46Zi5wcm9wcyxoKTtkLnJlZj11ZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT1pYz8oZD1CZihmLnByb3BzLmNoaWxkcmVuLFxuYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1BZihmLGEubW9kZSxoKSxoLnJlZj11ZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgaGM6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdLGgpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1EZihmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZixoKSxkLnJldHVybj1cbmEsYT1kKTooYyhhLGQpLGQ9Q2YoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYodGcoZikpcmV0dXJuIEpkKGEsZCxmLGgpO2lmKHRjKGYpKXJldHVybiBFKGEsZCxmLGgpO24mJnZnKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMjpjYXNlIDE6aD1hLnR5cGUsQShcIjE1MlwiLGguZGlzcGxheU5hbWV8fGgubmFtZXx8XCJDb21wb25lbnRcIil9cmV0dXJuIGMoYSxkKX19dmFyIHhnPXdnKCEwKSx5Zz13ZyghMSksemc9bnVsbCxBZz1udWxsLEJnPSExO2Z1bmN0aW9uIENnKGEsYil7dmFyIGM9bmV3IHlmKDUsbnVsbCxudWxsLDApO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5lZmZlY3RUYWc9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfVxuZnVuY3Rpb24gRGcoYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gRWcoYSl7aWYoQmcpe3ZhciBiPUFnO2lmKGIpe3ZhciBjPWI7aWYoIURnKGEsYikpe2I9aGYoYyk7aWYoIWJ8fCFEZyhhLGIpKXthLmVmZmVjdFRhZ3w9MjtCZz0hMTt6Zz1hO3JldHVybn1DZyh6ZyxjKX16Zz1hO0FnPWpmKGIpfWVsc2UgYS5lZmZlY3RUYWd8PTIsQmc9ITEsemc9YX19XG5mdW5jdGlvbiBGZyhhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWc7KWE9YS5yZXR1cm47emc9YX1mdW5jdGlvbiBHZyhhKXtpZihhIT09emcpcmV0dXJuITE7aWYoIUJnKXJldHVybiBGZyhhKSxCZz0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIWRmKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj1BZztiOylDZyhhLGIpLGI9aGYoYik7RmcoYSk7QWc9emc/aGYoYS5zdGF0ZU5vZGUpOm51bGw7cmV0dXJuITB9ZnVuY3Rpb24gSGcoKXtBZz16Zz1udWxsO0JnPSExfWZ1bmN0aW9uIFEoYSxiLGMpe0lnKGEsYixjLGIuZXhwaXJhdGlvblRpbWUpfWZ1bmN0aW9uIElnKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/eWcoYixudWxsLGMsZCk6eGcoYixhLmNoaWxkLGMsZCl9XG5mdW5jdGlvbiBKZyhhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIEtnKGEsYixjLGQsZSl7SmcoYSxiKTt2YXIgZj0wIT09KGIuZWZmZWN0VGFnJjY0KTtpZighYyYmIWYpcmV0dXJuIGQmJnhmKGIsITEpLFIoYSxiKTtjPWIuc3RhdGVOb2RlO2VjLmN1cnJlbnQ9Yjt2YXIgZz1mP251bGw6Yy5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtmJiYoSWcoYSxiLG51bGwsZSksYi5jaGlsZD1udWxsKTtJZyhhLGIsZyxlKTtiLm1lbW9pemVkU3RhdGU9Yy5zdGF0ZTtiLm1lbW9pemVkUHJvcHM9Yy5wcm9wcztkJiZ4ZihiLCEwKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIExnKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/dWYoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmdWYoYSxiLmNvbnRleHQsITEpO2lnKGEsYi5jb250YWluZXJJbmZvKX1cbmZ1bmN0aW9uIE1nKGEsYixjLGQpe3ZhciBlPWEuY2hpbGQ7bnVsbCE9PWUmJihlLnJldHVybj1hKTtmb3IoO251bGwhPT1lOyl7c3dpdGNoKGUudGFnKXtjYXNlIDEyOnZhciBmPWUuc3RhdGVOb2RlfDA7aWYoZS50eXBlPT09YiYmMCE9PShmJmMpKXtmb3IoZj1lO251bGwhPT1mOyl7dmFyIGc9Zi5hbHRlcm5hdGU7aWYoMD09PWYuZXhwaXJhdGlvblRpbWV8fGYuZXhwaXJhdGlvblRpbWU+ZClmLmV4cGlyYXRpb25UaW1lPWQsbnVsbCE9PWcmJigwPT09Zy5leHBpcmF0aW9uVGltZXx8Zy5leHBpcmF0aW9uVGltZT5kKSYmKGcuZXhwaXJhdGlvblRpbWU9ZCk7ZWxzZSBpZihudWxsIT09ZyYmKDA9PT1nLmV4cGlyYXRpb25UaW1lfHxnLmV4cGlyYXRpb25UaW1lPmQpKWcuZXhwaXJhdGlvblRpbWU9ZDtlbHNlIGJyZWFrO2Y9Zi5yZXR1cm59Zj1udWxsfWVsc2UgZj1lLmNoaWxkO2JyZWFrO2Nhc2UgMTM6Zj1lLnR5cGU9PT1hLnR5cGU/bnVsbDplLmNoaWxkO2JyZWFrO2RlZmF1bHQ6Zj1cbmUuY2hpbGR9aWYobnVsbCE9PWYpZi5yZXR1cm49ZTtlbHNlIGZvcihmPWU7bnVsbCE9PWY7KXtpZihmPT09YSl7Zj1udWxsO2JyZWFrfWU9Zi5zaWJsaW5nO2lmKG51bGwhPT1lKXtlLnJldHVybj1mLnJldHVybjtmPWU7YnJlYWt9Zj1mLnJldHVybn1lPWZ9fVxuZnVuY3Rpb24gUWcoYSxiLGMpe3ZhciBkPWIudHlwZS5fY29udGV4dCxlPWIucGVuZGluZ1Byb3BzLGY9Yi5tZW1vaXplZFByb3BzLGc9ITA7aWYoTy5jdXJyZW50KWc9ITE7ZWxzZSBpZihmPT09ZSlyZXR1cm4gYi5zdGF0ZU5vZGU9MCxhZyhiKSxSKGEsYik7dmFyIGg9ZS52YWx1ZTtiLm1lbW9pemVkUHJvcHM9ZTtpZihudWxsPT09ZiloPTEwNzM3NDE4MjM7ZWxzZSBpZihmLnZhbHVlPT09ZS52YWx1ZSl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJmcpcmV0dXJuIGIuc3RhdGVOb2RlPTAsYWcoYiksUihhLGIpO2g9MH1lbHNle3ZhciBrPWYudmFsdWU7aWYoaz09PWgmJigwIT09a3x8MS9rPT09MS9oKXx8ayE9PWsmJmghPT1oKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmZylyZXR1cm4gYi5zdGF0ZU5vZGU9MCxhZyhiKSxSKGEsYik7aD0wfWVsc2UgaWYoaD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoayxcbmgpOjEwNzM3NDE4MjMsaHw9MCwwPT09aCl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJmcpcmV0dXJuIGIuc3RhdGVOb2RlPTAsYWcoYiksUihhLGIpfWVsc2UgTWcoYixkLGgsYyl9Yi5zdGF0ZU5vZGU9aDthZyhiKTtRKGEsYixlLmNoaWxkcmVuKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBSKGEsYil7bnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkP0EoXCIxNTNcIik6dm9pZCAwO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7dmFyIGM9emYoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9emYoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gUmcoYSxiLGMpe2lmKDA9PT1iLmV4cGlyYXRpb25UaW1lfHxiLmV4cGlyYXRpb25UaW1lPmMpe3N3aXRjaChiLnRhZyl7Y2FzZSAzOkxnKGIpO2JyZWFrO2Nhc2UgMjp3ZihiKTticmVhaztjYXNlIDQ6aWcoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEzOmFnKGIpfXJldHVybiBudWxsfXN3aXRjaChiLnRhZyl7Y2FzZSAwOm51bGwhPT1hP0EoXCIxNTVcIik6dm9pZCAwO3ZhciBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9cGYoYik7Zj1yZihiLGYpO2Q9ZChlLGYpO2IuZWZmZWN0VGFnfD0xO1wib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnJlbmRlciYmdm9pZCAwPT09ZC4kJHR5cGVvZj8oZj1iLnR5cGUsYi50YWc9MixiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWQuc3RhdGUmJnZvaWQgMCE9PWQuc3RhdGU/ZC5zdGF0ZTpudWxsLGY9Zi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsXCJmdW5jdGlvblwiPT09XG50eXBlb2YgZiYmbGcoYixmLGUpLGU9d2YoYiksZC51cGRhdGVyPXBnLGIuc3RhdGVOb2RlPWQsZC5fcmVhY3RJbnRlcm5hbEZpYmVyPWIsc2coYixjKSxhPUtnKGEsYiwhMCxlLGMpKTooYi50YWc9MSxRKGEsYixkKSxiLm1lbW9pemVkUHJvcHM9ZSxhPWIuY2hpbGQpO3JldHVybiBhO2Nhc2UgMTpyZXR1cm4gZT1iLnR5cGUsYz1iLnBlbmRpbmdQcm9wcyxPLmN1cnJlbnR8fGIubWVtb2l6ZWRQcm9wcyE9PWM/KGQ9cGYoYiksZD1yZihiLGQpLGU9ZShjLGQpLGIuZWZmZWN0VGFnfD0xLFEoYSxiLGUpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1SKGEsYiksYTtjYXNlIDI6ZT13ZihiKTtpZihudWxsPT09YSlpZihudWxsPT09Yi5zdGF0ZU5vZGUpe3ZhciBnPWIucGVuZGluZ1Byb3BzLGg9Yi50eXBlO2Q9cGYoYik7dmFyIGs9Mj09PWIudGFnJiZudWxsIT1iLnR5cGUuY29udGV4dFR5cGVzO2Y9az9yZihiLGQpOmhhO2c9bmV3IGgoZyxmKTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PVxuZy5zdGF0ZSYmdm9pZCAwIT09Zy5zdGF0ZT9nLnN0YXRlOm51bGw7Zy51cGRhdGVyPXBnO2Iuc3RhdGVOb2RlPWc7Zy5fcmVhY3RJbnRlcm5hbEZpYmVyPWI7ayYmKGs9Yi5zdGF0ZU5vZGUsay5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWQsay5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtzZyhiLGMpO2Q9ITB9ZWxzZXtoPWIudHlwZTtkPWIuc3RhdGVOb2RlO2s9Yi5tZW1vaXplZFByb3BzO2Y9Yi5wZW5kaW5nUHJvcHM7ZC5wcm9wcz1rO3ZhciBuPWQuY29udGV4dDtnPXBmKGIpO2c9cmYoYixnKTt2YXIgcj1oLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsoaD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8XG4oayE9PWZ8fG4hPT1nKSYmcmcoYixkLGYsZyk7TGY9ITE7dmFyIHc9Yi5tZW1vaXplZFN0YXRlO249ZC5zdGF0ZT13O3ZhciBQPWIudXBkYXRlUXVldWU7bnVsbCE9PVAmJihVZihiLFAsZixkLGMpLG49Yi5tZW1vaXplZFN0YXRlKTtrIT09Znx8dyE9PW58fE8uY3VycmVudHx8TGY/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiByJiYobGcoYixyLGYpLG49Yi5tZW1vaXplZFN0YXRlKSwoaz1MZnx8cWcoYixrLGYsdyxuLGcpKT8oaHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbE1vdW50JiZkLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCYmXG4oYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksYi5tZW1vaXplZFByb3BzPWYsYi5tZW1vaXplZFN0YXRlPW4pLGQucHJvcHM9ZixkLnN0YXRlPW4sZC5jb250ZXh0PWcsZD1rKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksZD0hMSl9ZWxzZSBoPWIudHlwZSxkPWIuc3RhdGVOb2RlLGY9Yi5tZW1vaXplZFByb3BzLGs9Yi5wZW5kaW5nUHJvcHMsZC5wcm9wcz1mLG49ZC5jb250ZXh0LGc9cGYoYiksZz1yZihiLGcpLHI9aC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsKGg9XCJmdW5jdGlvblwiPT09dHlwZW9mIHJ8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGQuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fFxuKGYhPT1rfHxuIT09ZykmJnJnKGIsZCxrLGcpLExmPSExLG49Yi5tZW1vaXplZFN0YXRlLHc9ZC5zdGF0ZT1uLFA9Yi51cGRhdGVRdWV1ZSxudWxsIT09UCYmKFVmKGIsUCxrLGQsYyksdz1iLm1lbW9pemVkU3RhdGUpLGYhPT1rfHxuIT09d3x8Ty5jdXJyZW50fHxMZj8oXCJmdW5jdGlvblwiPT09dHlwZW9mIHImJihsZyhiLHIsayksdz1iLm1lbW9pemVkU3RhdGUpLChyPUxmfHxxZyhiLGYsayxuLHcsZykpPyhofHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxVcGRhdGUmJmQuY29tcG9uZW50V2lsbFVwZGF0ZShrLHcsZyksXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmQuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoayx3LGcpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRVcGRhdGUmJlxuKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuY29tcG9uZW50RGlkVXBkYXRlfHxmPT09YS5tZW1vaXplZFByb3BzJiZuPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxmPT09YS5tZW1vaXplZFByb3BzJiZuPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPWssYi5tZW1vaXplZFN0YXRlPXcpLGQucHJvcHM9ayxkLnN0YXRlPXcsZC5jb250ZXh0PWcsZD1yKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuY29tcG9uZW50RGlkVXBkYXRlfHxmPT09YS5tZW1vaXplZFByb3BzJiZuPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcbmY9PT1hLm1lbW9pemVkUHJvcHMmJm49PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxkPSExKTtyZXR1cm4gS2coYSxiLGQsZSxjKTtjYXNlIDM6TGcoYik7ZT1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1lKWlmKGQ9Yi5tZW1vaXplZFN0YXRlLGQ9bnVsbCE9PWQ/ZC5lbGVtZW50Om51bGwsVWYoYixlLGIucGVuZGluZ1Byb3BzLG51bGwsYyksZT1iLm1lbW9pemVkU3RhdGUuZWxlbWVudCxlPT09ZClIZygpLGE9UihhLGIpO2Vsc2V7ZD1iLnN0YXRlTm9kZTtpZihkPShudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpJiZkLmh5ZHJhdGUpQWc9amYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksemc9YixkPUJnPSEwO2Q/KGIuZWZmZWN0VGFnfD0yLGIuY2hpbGQ9eWcoYixudWxsLGUsYykpOihIZygpLFEoYSxiLGUpKTthPWIuY2hpbGR9ZWxzZSBIZygpLGE9UihhLGIpO3JldHVybiBhO2Nhc2UgNTphOntnZyhmZy5jdXJyZW50KTtlPWdnKGRnLmN1cnJlbnQpO2Q9SGUoZSxcbmIudHlwZSk7ZSE9PWQmJihOKGVnLGIsYiksTihkZyxkLGIpKTtudWxsPT09YSYmRWcoYik7ZT1iLnR5cGU7az1iLm1lbW9pemVkUHJvcHM7ZD1iLnBlbmRpbmdQcm9wcztmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsO2lmKCFPLmN1cnJlbnQmJms9PT1kKXtpZihrPWIubW9kZSYxJiYhIWQuaGlkZGVuKWIuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMztpZigha3x8MTA3Mzc0MTgyMyE9PWMpe2E9UihhLGIpO2JyZWFrIGF9fWs9ZC5jaGlsZHJlbjtkZihlLGQpP2s9bnVsbDpmJiZkZihlLGYpJiYoYi5lZmZlY3RUYWd8PTE2KTtKZyhhLGIpOzEwNzM3NDE4MjMhPT1jJiZiLm1vZGUmMSYmZC5oaWRkZW4/KGIuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMyxiLm1lbW9pemVkUHJvcHM9ZCxhPW51bGwpOihRKGEsYixrKSxiLm1lbW9pemVkUHJvcHM9ZCxhPWIuY2hpbGQpfXJldHVybiBhO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJkVnKGIpLGIubWVtb2l6ZWRQcm9wcz1iLnBlbmRpbmdQcm9wcyxcbm51bGw7Y2FzZSAxNjpyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIGlnKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZT1iLnBlbmRpbmdQcm9wcyxPLmN1cnJlbnR8fGIubWVtb2l6ZWRQcm9wcyE9PWU/KG51bGw9PT1hP2IuY2hpbGQ9eGcoYixudWxsLGUsYyk6UShhLGIsZSksYi5tZW1vaXplZFByb3BzPWUsYT1iLmNoaWxkKTphPVIoYSxiKSxhO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLnJlbmRlcixjPWIucGVuZGluZ1Byb3BzLGQ9Yi5yZWYsTy5jdXJyZW50fHxiLm1lbW9pemVkUHJvcHMhPT1jfHxkIT09KG51bGwhPT1hP2EucmVmOm51bGwpPyhlPWUoYyxkKSxRKGEsYixlKSxiLm1lbW9pemVkUHJvcHM9YyxhPWIuY2hpbGQpOmE9UihhLGIpLGE7Y2FzZSAxMDpyZXR1cm4gYz1iLnBlbmRpbmdQcm9wcyxPLmN1cnJlbnR8fGIubWVtb2l6ZWRQcm9wcyE9PWM/KFEoYSxiLGMpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1SKGEsYiksYTtjYXNlIDExOnJldHVybiBjPVxuYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sTy5jdXJyZW50fHxudWxsIT09YyYmYi5tZW1vaXplZFByb3BzIT09Yz8oUShhLGIsYyksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPVIoYSxiKSxhO2Nhc2UgMTU6cmV0dXJuIGM9Yi5wZW5kaW5nUHJvcHMsYi5tZW1vaXplZFByb3BzPT09Yz9hPVIoYSxiKTooUShhLGIsYy5jaGlsZHJlbiksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKSxhO2Nhc2UgMTM6cmV0dXJuIFFnKGEsYixjKTtjYXNlIDEyOmE6aWYoZD1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxrPWIubWVtb2l6ZWRQcm9wcyxlPWQuX2N1cnJlbnRWYWx1ZSxnPWQuX2NoYW5nZWRCaXRzLE8uY3VycmVudHx8MCE9PWd8fGshPT1mKXtiLm1lbW9pemVkUHJvcHM9ZjtoPWYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzO2lmKHZvaWQgMD09PWh8fG51bGw9PT1oKWg9MTA3Mzc0MTgyMztiLnN0YXRlTm9kZT1oO2lmKDAhPT0oZyZoKSlNZyhiLGQsZyxjKTtlbHNlIGlmKGs9PT1mKXthPVxuUihhLGIpO2JyZWFrIGF9Yz1mLmNoaWxkcmVuO2M9YyhlKTtiLmVmZmVjdFRhZ3w9MTtRKGEsYixjKTthPWIuY2hpbGR9ZWxzZSBhPVIoYSxiKTtyZXR1cm4gYTtkZWZhdWx0OkEoXCIxNTZcIil9fWZ1bmN0aW9uIFNnKGEpe2EuZWZmZWN0VGFnfD00fXZhciBUZz12b2lkIDAsVWc9dm9pZCAwLFZnPXZvaWQgMDtUZz1mdW5jdGlvbigpe307VWc9ZnVuY3Rpb24oYSxiLGMpeyhiLnVwZGF0ZVF1ZXVlPWMpJiZTZyhiKX07Vmc9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJlNnKGIpfTtcbmZ1bmN0aW9uIFdnKGEsYil7dmFyIGM9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDE6cmV0dXJuIG51bGw7Y2FzZSAyOnJldHVybiBzZihiKSxudWxsO2Nhc2UgMzpqZyhiKTt0ZihiKTt2YXIgZD1iLnN0YXRlTm9kZTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpR2coYiksYi5lZmZlY3RUYWcmPS0zO1RnKGIpO3JldHVybiBudWxsO2Nhc2UgNTprZyhiKTtkPWdnKGZnLmN1cnJlbnQpO3ZhciBlPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcyxnPWIuc3RhdGVOb2RlLGg9Z2coZGcuY3VycmVudCk7Zz1XZShnLGUsZixjLGQpO1VnKGEsYixnLGUsZixjLGQsaCk7YS5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfWVsc2V7aWYoIWMpcmV0dXJuIG51bGw9PT1iLnN0YXRlTm9kZT9cbkEoXCIxNjZcIik6dm9pZCAwLG51bGw7YT1nZyhkZy5jdXJyZW50KTtpZihHZyhiKSljPWIuc3RhdGVOb2RlLGU9Yi50eXBlLGY9Yi5tZW1vaXplZFByb3BzLGNbQ109YixjW01hXT1mLGQ9WWUoYyxlLGYsYSxkKSxiLnVwZGF0ZVF1ZXVlPWQsbnVsbCE9PWQmJlNnKGIpO2Vsc2V7YT1UZShlLGMsZCxhKTthW0NdPWI7YVtNYV09YzthOmZvcihmPWIuY2hpbGQ7bnVsbCE9PWY7KXtpZig1PT09Zi50YWd8fDY9PT1mLnRhZylhLmFwcGVuZENoaWxkKGYuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1mLnRhZyYmbnVsbCE9PWYuY2hpbGQpe2YuY2hpbGQucmV0dXJuPWY7Zj1mLmNoaWxkO2NvbnRpbnVlfWlmKGY9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWYuc2libGluZzspe2lmKG51bGw9PT1mLnJldHVybnx8Zi5yZXR1cm49PT1iKWJyZWFrIGE7Zj1mLnJldHVybn1mLnNpYmxpbmcucmV0dXJuPWYucmV0dXJuO2Y9Zi5zaWJsaW5nfVZlKGEsZSxjLGQpO2NmKGUsYykmJlNnKGIpO2Iuc3RhdGVOb2RlPVxuYX1udWxsIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpVmcoYSxiLGEubWVtb2l6ZWRQcm9wcyxjKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgYylyZXR1cm4gbnVsbD09PWIuc3RhdGVOb2RlP0EoXCIxNjZcIik6dm9pZCAwLG51bGw7ZD1nZyhmZy5jdXJyZW50KTtnZyhkZy5jdXJyZW50KTtHZyhiKT8oZD1iLnN0YXRlTm9kZSxjPWIubWVtb2l6ZWRQcm9wcyxkW0NdPWIsWmUoZCxjKSYmU2coYikpOihkPVVlKGMsZCksZFtDXT1iLGIuc3RhdGVOb2RlPWQpfXJldHVybiBudWxsO2Nhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxNjpyZXR1cm4gbnVsbDtjYXNlIDEwOnJldHVybiBudWxsO2Nhc2UgMTE6cmV0dXJuIG51bGw7Y2FzZSAxNTpyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIGpnKGIpLFRnKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gYmcoYiksbnVsbDtjYXNlIDEyOnJldHVybiBudWxsO2Nhc2UgMDpBKFwiMTY3XCIpO1xuZGVmYXVsdDpBKFwiMTU2XCIpfX1mdW5jdGlvbiBYZyhhLGIpe3ZhciBjPWIuc291cmNlO251bGw9PT1iLnN0YWNrJiZudWxsIT09YyYmdmMoYyk7bnVsbCE9PWMmJnVjKGMpO2I9Yi52YWx1ZTtudWxsIT09YSYmMj09PWEudGFnJiZ1YyhhKTt0cnl7YiYmYi5zdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nfHxjb25zb2xlLmVycm9yKGIpfWNhdGNoKGQpe2QmJmQuc3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZ3x8Y29uc29sZS5lcnJvcihkKX19ZnVuY3Rpb24gWWcoYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7WmcoYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfVxuZnVuY3Rpb24gJGcoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIEtmJiZLZihhKTtzd2l0Y2goYS50YWcpe2Nhc2UgMjpZZyhhKTt2YXIgYj1hLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYi5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGMpe1pnKGEsYyl9YnJlYWs7Y2FzZSA1OllnKGEpO2JyZWFrO2Nhc2UgNDphaChhKX19ZnVuY3Rpb24gYmgoYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBjaChhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZihiaChiKSl7dmFyIGM9YjticmVhayBhfWI9Yi5yZXR1cm59QShcIjE2MFwiKTtjPXZvaWQgMH12YXIgZD1iPXZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpiPWMuc3RhdGVOb2RlO2Q9ITE7YnJlYWs7Y2FzZSAzOmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OkEoXCIxNjFcIil9Yy5lZmZlY3RUYWcmMTYmJihLZShiLFwiXCIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8YmgoYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnOyl7aWYoYy5lZmZlY3RUYWcmMiljb250aW51ZSBiO1xuaWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1mb3IodmFyIGU9YTs7KXtpZig1PT09ZS50YWd8fDY9PT1lLnRhZylpZihjKWlmKGQpe3ZhciBmPWIsZz1lLnN0YXRlTm9kZSxoPWM7OD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnLGgpOmYuaW5zZXJ0QmVmb3JlKGcsaCl9ZWxzZSBiLmluc2VydEJlZm9yZShlLnN0YXRlTm9kZSxjKTtlbHNlIGQ/KGY9YixnPWUuc3RhdGVOb2RlLDg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZyxmKTpmLmFwcGVuZENoaWxkKGcpKTpiLmFwcGVuZENoaWxkKGUuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1lLnRhZyYmbnVsbCE9PWUuY2hpbGQpe2UuY2hpbGQucmV0dXJuPWU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PVxuZS5zaWJsaW5nOyl7aWYobnVsbD09PWUucmV0dXJufHxlLnJldHVybj09PWEpcmV0dXJuO2U9ZS5yZXR1cm59ZS5zaWJsaW5nLnJldHVybj1lLnJldHVybjtlPWUuc2libGluZ319XG5mdW5jdGlvbiBhaChhKXtmb3IodmFyIGI9YSxjPSExLGQ9dm9pZCAwLGU9dm9pZCAwOzspe2lmKCFjKXtjPWIucmV0dXJuO2E6Zm9yKDs7KXtudWxsPT09Yz9BKFwiMTYwXCIpOnZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpkPWMuc3RhdGVOb2RlO2U9ITE7YnJlYWsgYTtjYXNlIDM6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYTtjYXNlIDQ6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYX1jPWMucmV0dXJufWM9ITB9aWYoNT09PWIudGFnfHw2PT09Yi50YWcpe2E6Zm9yKHZhciBmPWIsZz1mOzspaWYoJGcoZyksbnVsbCE9PWcuY2hpbGQmJjQhPT1nLnRhZylnLmNoaWxkLnJldHVybj1nLGc9Zy5jaGlsZDtlbHNle2lmKGc9PT1mKWJyZWFrO2Zvcig7bnVsbD09PWcuc2libGluZzspe2lmKG51bGw9PT1nLnJldHVybnx8Zy5yZXR1cm49PT1mKWJyZWFrIGE7Zz1nLnJldHVybn1nLnNpYmxpbmcucmV0dXJuPWcucmV0dXJuO2c9Zy5zaWJsaW5nfWU/XG4oZj1kLGc9Yi5zdGF0ZU5vZGUsOD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGcpOmYucmVtb3ZlQ2hpbGQoZykpOmQucmVtb3ZlQ2hpbGQoYi5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWIudGFnP2Q9Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzokZyhiKSxudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuO2I9Yi5yZXR1cm47ND09PWIudGFnJiYoYz0hMSl9Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319XG5mdW5jdGlvbiBkaChhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAyOmJyZWFrO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHM7YT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDt2YXIgZT1iLnR5cGUsZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtudWxsIT09ZiYmKGNbTWFdPWQsWGUoYyxmLGUsYSxkKSl9YnJlYWs7Y2FzZSA2Om51bGw9PT1iLnN0YXRlTm9kZT9BKFwiMTYyXCIpOnZvaWQgMDtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO2JyZWFrO2Nhc2UgMzpicmVhaztjYXNlIDE1OmJyZWFrO2Nhc2UgMTY6YnJlYWs7ZGVmYXVsdDpBKFwiMTYzXCIpfX1mdW5jdGlvbiBlaChhLGIsYyl7Yz1PZihjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtmaChkKTtYZyhhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIGdoKGEsYixjKXtjPU9mKGMpO2MudGFnPTM7dmFyIGQ9YS5zdGF0ZU5vZGU7bnVsbCE9PWQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe251bGw9PT1oaD9oaD1uZXcgU2V0KFt0aGlzXSk6aGguYWRkKHRoaXMpO3ZhciBjPWIudmFsdWUsZD1iLnN0YWNrO1hnKGEsYik7dGhpcy5jb21wb25lbnREaWRDYXRjaChjLHtjb21wb25lbnRTdGFjazpudWxsIT09ZD9kOlwiXCJ9KX0pO3JldHVybiBjfVxuZnVuY3Rpb24gaWgoYSxiLGMsZCxlLGYpe2MuZWZmZWN0VGFnfD01MTI7Yy5maXJzdEVmZmVjdD1jLmxhc3RFZmZlY3Q9bnVsbDtkPVhmKGQsYyk7YT1iO2Rve3N3aXRjaChhLnRhZyl7Y2FzZSAzOmEuZWZmZWN0VGFnfD0xMDI0O2Q9ZWgoYSxkLGYpO1JmKGEsZCxmKTtyZXR1cm47Y2FzZSAyOmlmKGI9ZCxjPWEuc3RhdGVOb2RlLDA9PT0oYS5lZmZlY3RUYWcmNjQpJiZudWxsIT09YyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09aGh8fCFoaC5oYXMoYykpKXthLmVmZmVjdFRhZ3w9MTAyNDtkPWdoKGEsYixmKTtSZihhLGQsZik7cmV0dXJufX1hPWEucmV0dXJufXdoaWxlKG51bGwhPT1hKX1cbmZ1bmN0aW9uIGpoKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAyOnNmKGEpO3ZhciBiPWEuZWZmZWN0VGFnO3JldHVybiBiJjEwMjQ/KGEuZWZmZWN0VGFnPWImLTEwMjV8NjQsYSk6bnVsbDtjYXNlIDM6cmV0dXJuIGpnKGEpLHRmKGEpLGI9YS5lZmZlY3RUYWcsYiYxMDI0PyhhLmVmZmVjdFRhZz1iJi0xMDI1fDY0LGEpOm51bGw7Y2FzZSA1OnJldHVybiBrZyhhKSxudWxsO2Nhc2UgMTY6cmV0dXJuIGI9YS5lZmZlY3RUYWcsYiYxMDI0PyhhLmVmZmVjdFRhZz1iJi0xMDI1fDY0LGEpOm51bGw7Y2FzZSA0OnJldHVybiBqZyhhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIGJnKGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19dmFyIGtoPWVmKCksbGg9MixtaD1raCxuaD0wLG9oPTAscGg9ITEsUz1udWxsLHFoPW51bGwsVD0wLHJoPS0xLHNoPSExLFU9bnVsbCx0aD0hMSx1aD0hMSxoaD1udWxsO1xuZnVuY3Rpb24gdmgoKXtpZihudWxsIT09Uylmb3IodmFyIGE9Uy5yZXR1cm47bnVsbCE9PWE7KXt2YXIgYj1hO3N3aXRjaChiLnRhZyl7Y2FzZSAyOnNmKGIpO2JyZWFrO2Nhc2UgMzpqZyhiKTt0ZihiKTticmVhaztjYXNlIDU6a2coYik7YnJlYWs7Y2FzZSA0OmpnKGIpO2JyZWFrO2Nhc2UgMTM6YmcoYil9YT1hLnJldHVybn1xaD1udWxsO1Q9MDtyaD0tMTtzaD0hMTtTPW51bGw7dWg9ITF9XG5mdW5jdGlvbiB3aChhKXtmb3IoOzspe3ZhciBiPWEuYWx0ZXJuYXRlLGM9YS5yZXR1cm4sZD1hLnNpYmxpbmc7aWYoMD09PShhLmVmZmVjdFRhZyY1MTIpKXtiPVdnKGIsYSxUKTt2YXIgZT1hO2lmKDEwNzM3NDE4MjM9PT1UfHwxMDczNzQxODIzIT09ZS5leHBpcmF0aW9uVGltZSl7dmFyIGY9MDtzd2l0Y2goZS50YWcpe2Nhc2UgMzpjYXNlIDI6dmFyIGc9ZS51cGRhdGVRdWV1ZTtudWxsIT09ZyYmKGY9Zy5leHBpcmF0aW9uVGltZSl9Zm9yKGc9ZS5jaGlsZDtudWxsIT09ZzspMCE9PWcuZXhwaXJhdGlvblRpbWUmJigwPT09Znx8Zj5nLmV4cGlyYXRpb25UaW1lKSYmKGY9Zy5leHBpcmF0aW9uVGltZSksZz1nLnNpYmxpbmc7ZS5leHBpcmF0aW9uVGltZT1mfWlmKG51bGwhPT1iKXJldHVybiBiO251bGwhPT1jJiYwPT09KGMuZWZmZWN0VGFnJjUxMikmJihudWxsPT09Yy5maXJzdEVmZmVjdCYmKGMuZmlyc3RFZmZlY3Q9YS5maXJzdEVmZmVjdCksbnVsbCE9PWEubGFzdEVmZmVjdCYmXG4obnVsbCE9PWMubGFzdEVmZmVjdCYmKGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLGMubGFzdEVmZmVjdD1hLmxhc3RFZmZlY3QpLDE8YS5lZmZlY3RUYWcmJihudWxsIT09Yy5sYXN0RWZmZWN0P2MubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE6Yy5maXJzdEVmZmVjdD1hLGMubGFzdEVmZmVjdD1hKSk7aWYobnVsbCE9PWQpcmV0dXJuIGQ7aWYobnVsbCE9PWMpYT1jO2Vsc2V7dWg9ITA7YnJlYWt9fWVsc2V7YT1qaChhLHNoLFQpO2lmKG51bGwhPT1hKXJldHVybiBhLmVmZmVjdFRhZyY9NTExLGE7bnVsbCE9PWMmJihjLmZpcnN0RWZmZWN0PWMubGFzdEVmZmVjdD1udWxsLGMuZWZmZWN0VGFnfD01MTIpO2lmKG51bGwhPT1kKXJldHVybiBkO2lmKG51bGwhPT1jKWE9YztlbHNlIGJyZWFrfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIHhoKGEpe3ZhciBiPVJnKGEuYWx0ZXJuYXRlLGEsVCk7bnVsbD09PWImJihiPXdoKGEpKTtlYy5jdXJyZW50PW51bGw7cmV0dXJuIGJ9XG5mdW5jdGlvbiB5aChhLGIsYyl7cGg/QShcIjI0M1wiKTp2b2lkIDA7cGg9ITA7aWYoYiE9PVR8fGEhPT1xaHx8bnVsbD09PVMpdmgoKSxxaD1hLFQ9YixyaD0tMSxTPXpmKHFoLmN1cnJlbnQsbnVsbCxUKSxhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO3ZhciBkPSExO3NoPSFjfHxUPD1saDtkb3t0cnl7aWYoYylmb3IoO251bGwhPT1TJiYhemgoKTspUz14aChTKTtlbHNlIGZvcig7bnVsbCE9PVM7KVM9eGgoUyl9Y2F0Y2goZil7aWYobnVsbD09PVMpZD0hMCxmaChmKTtlbHNle251bGw9PT1TP0EoXCIyNzFcIik6dm9pZCAwO2M9Uzt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSl7ZD0hMDtmaChmKTticmVha31paChhLGUsYyxmLHNoLFQsbWgpO1M9d2goYyl9fWJyZWFrfXdoaWxlKDEpO3BoPSExO2lmKGQpcmV0dXJuIG51bGw7aWYobnVsbD09PVMpe2lmKHVoKXJldHVybiBhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1iLGEuY3VycmVudC5hbHRlcm5hdGU7c2g/QShcIjI2MlwiKTpcbnZvaWQgMDswPD1yaCYmc2V0VGltZW91dChmdW5jdGlvbigpe3ZhciBiPWEuY3VycmVudC5leHBpcmF0aW9uVGltZTswIT09YiYmKDA9PT1hLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lfHxhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPGIpJiZBaChhLGIpfSxyaCk7QmgoYS5jdXJyZW50LmV4cGlyYXRpb25UaW1lKX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFpnKGEsYil7dmFyIGM7YTp7cGgmJiF0aD9BKFwiMjYzXCIpOnZvaWQgMDtmb3IoYz1hLnJldHVybjtudWxsIT09Yzspe3N3aXRjaChjLnRhZyl7Y2FzZSAyOnZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNofHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1oaHx8IWhoLmhhcyhkKSkpe2E9WGYoYixhKTthPWdoKGMsYSwxKTtRZihjLGEsMSk7b2coYywxKTtjPXZvaWQgMDticmVhayBhfWJyZWFrO2Nhc2UgMzphPVhmKGIsYSk7YT1laChjLGEsMSk7UWYoYyxhLDEpO29nKGMsMSk7Yz12b2lkIDA7YnJlYWsgYX1jPWMucmV0dXJufTM9PT1hLnRhZyYmKGM9WGYoYixhKSxjPWVoKGEsYywxKSxRZihhLGMsMSksb2coYSwxKSk7Yz12b2lkIDB9cmV0dXJuIGN9XG5mdW5jdGlvbiBDaCgpe3ZhciBhPTIrMjUqKCgobWcoKS0yKzUwMCkvMjV8MCkrMSk7YTw9bmgmJihhPW5oKzEpO3JldHVybiBuaD1hfWZ1bmN0aW9uIG5nKGEsYil7YT0wIT09b2g/b2g6cGg/dGg/MTpUOmIubW9kZSYxP0RoPzIrMTAqKCgoYS0yKzE1KS8xMHwwKSsxKToyKzI1KigoKGEtMis1MDApLzI1fDApKzEpOjE7RGgmJigwPT09RWh8fGE+RWgpJiYoRWg9YSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBvZyhhLGIpe2Zvcig7bnVsbCE9PWE7KXtpZigwPT09YS5leHBpcmF0aW9uVGltZXx8YS5leHBpcmF0aW9uVGltZT5iKWEuZXhwaXJhdGlvblRpbWU9YjtudWxsIT09YS5hbHRlcm5hdGUmJigwPT09YS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWV8fGEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lPmIpJiYoYS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWU9Yik7aWYobnVsbD09PWEucmV0dXJuKWlmKDM9PT1hLnRhZyl7dmFyIGM9YS5zdGF0ZU5vZGU7IXBoJiYwIT09VCYmYjxUJiZ2aCgpO3ZhciBkPWMuY3VycmVudC5leHBpcmF0aW9uVGltZTtwaCYmIXRoJiZxaD09PWN8fEFoKGMsZCk7Rmg+R2gmJkEoXCIxODVcIil9ZWxzZSBicmVhazthPWEucmV0dXJufX1mdW5jdGlvbiBtZygpe21oPWVmKCkta2g7cmV0dXJuIGxoPShtaC8xMHwwKSsyfVxuZnVuY3Rpb24gSGgoYSl7dmFyIGI9b2g7b2g9MisyNSooKChtZygpLTIrNTAwKS8yNXwwKSsxKTt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e29oPWJ9fWZ1bmN0aW9uIEloKGEsYixjLGQsZSl7dmFyIGY9b2g7b2g9MTt0cnl7cmV0dXJuIGEoYixjLGQsZSl9ZmluYWxseXtvaD1mfX12YXIgSmg9bnVsbCxWPW51bGwsS2g9MCxMaD12b2lkIDAsVz0hMSxYPW51bGwsWT0wLEVoPTAsTWg9ITEsTmg9ITEsT2g9bnVsbCxQaD1udWxsLFo9ITEsUWg9ITEsRGg9ITEsUmg9bnVsbCxHaD0xRTMsRmg9MCxTaD0xO2Z1bmN0aW9uIFRoKGEpe2lmKDAhPT1LaCl7aWYoYT5LaClyZXR1cm47bnVsbCE9PUxoJiZnZihMaCl9dmFyIGI9ZWYoKS1raDtLaD1hO0xoPWZmKFVoLHt0aW1lb3V0OjEwKihhLTIpLWJ9KX1cbmZ1bmN0aW9uIEFoKGEsYil7aWYobnVsbD09PWEubmV4dFNjaGVkdWxlZFJvb3QpYS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1iLG51bGw9PT1WPyhKaD1WPWEsYS5uZXh0U2NoZWR1bGVkUm9vdD1hKTooVj1WLm5leHRTY2hlZHVsZWRSb290PWEsVi5uZXh0U2NoZWR1bGVkUm9vdD1KaCk7ZWxzZXt2YXIgYz1hLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lO2lmKDA9PT1jfHxiPGMpYS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1ifVd8fChaP1FoJiYoWD1hLFk9MSxWaChhLDEsITEpKToxPT09Yj9XaCgpOlRoKGIpKX1cbmZ1bmN0aW9uIFhoKCl7dmFyIGE9MCxiPW51bGw7aWYobnVsbCE9PVYpZm9yKHZhciBjPVYsZD1KaDtudWxsIT09ZDspe3ZhciBlPWQucmVtYWluaW5nRXhwaXJhdGlvblRpbWU7aWYoMD09PWUpe251bGw9PT1jfHxudWxsPT09Vj9BKFwiMjQ0XCIpOnZvaWQgMDtpZihkPT09ZC5uZXh0U2NoZWR1bGVkUm9vdCl7Smg9Vj1kLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBpZihkPT09SmgpSmg9ZT1kLm5leHRTY2hlZHVsZWRSb290LFYubmV4dFNjaGVkdWxlZFJvb3Q9ZSxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZWxzZSBpZihkPT09Vil7Vj1jO1YubmV4dFNjaGVkdWxlZFJvb3Q9Smg7ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgYy5uZXh0U2NoZWR1bGVkUm9vdD1kLm5leHRTY2hlZHVsZWRSb290LGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtkPWMubmV4dFNjaGVkdWxlZFJvb3R9ZWxzZXtpZigwPT09YXx8ZTxhKWE9ZSxiPWQ7aWYoZD09PVYpYnJlYWs7XG5jPWQ7ZD1kLm5leHRTY2hlZHVsZWRSb290fX1jPVg7bnVsbCE9PWMmJmM9PT1iJiYxPT09YT9GaCsrOkZoPTA7WD1iO1k9YX1mdW5jdGlvbiBVaChhKXtZaCgwLCEwLGEpfWZ1bmN0aW9uIFdoKCl7WWgoMSwhMSxudWxsKX1mdW5jdGlvbiBZaChhLGIsYyl7UGg9YztYaCgpO2lmKGIpZm9yKDtudWxsIT09WCYmMCE9PVkmJigwPT09YXx8YT49WSkmJighTWh8fG1nKCk+PVkpOyltZygpLFZoKFgsWSwhTWgpLFhoKCk7ZWxzZSBmb3IoO251bGwhPT1YJiYwIT09WSYmKDA9PT1hfHxhPj1ZKTspVmgoWCxZLCExKSxYaCgpO251bGwhPT1QaCYmKEtoPTAsTGg9bnVsbCk7MCE9PVkmJlRoKFkpO1BoPW51bGw7TWg9ITE7WmgoKX1mdW5jdGlvbiAkaChhLGIpe1c/QShcIjI1M1wiKTp2b2lkIDA7WD1hO1k9YjtWaChhLGIsITEpO1doKCk7WmgoKX1cbmZ1bmN0aW9uIFpoKCl7Rmg9MDtpZihudWxsIT09Umgpe3ZhciBhPVJoO1JoPW51bGw7Zm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07dHJ5e2MuX29uQ29tcGxldGUoKX1jYXRjaChkKXtOaHx8KE5oPSEwLE9oPWQpfX19aWYoTmgpdGhyb3cgYT1PaCxPaD1udWxsLE5oPSExLGE7fWZ1bmN0aW9uIFZoKGEsYixjKXtXP0EoXCIyNDVcIik6dm9pZCAwO1c9ITA7Yz8oYz1hLmZpbmlzaGVkV29yayxudWxsIT09Yz9haShhLGMsYik6KGM9eWgoYSxiLCEwKSxudWxsIT09YyYmKHpoKCk/YS5maW5pc2hlZFdvcms9YzphaShhLGMsYikpKSk6KGM9YS5maW5pc2hlZFdvcmssbnVsbCE9PWM/YWkoYSxjLGIpOihjPXloKGEsYiwhMSksbnVsbCE9PWMmJmFpKGEsYyxiKSkpO1c9ITF9XG5mdW5jdGlvbiBhaShhLGIsYyl7dmFyIGQ9YS5maXJzdEJhdGNoO2lmKG51bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZTw9YyYmKG51bGw9PT1SaD9SaD1bZF06UmgucHVzaChkKSxkLl9kZWZlcikpe2EuZmluaXNoZWRXb3JrPWI7YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT0wO3JldHVybn1hLmZpbmlzaGVkV29yaz1udWxsO3RoPXBoPSEwO2M9Yi5zdGF0ZU5vZGU7Yy5jdXJyZW50PT09Yj9BKFwiMTc3XCIpOnZvaWQgMDtkPWMucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOzA9PT1kP0EoXCIyNjFcIik6dm9pZCAwO2MucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7bWcoKTtlYy5jdXJyZW50PW51bGw7aWYoMTxiLmVmZmVjdFRhZylpZihudWxsIT09Yi5sYXN0RWZmZWN0KXtiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iO3ZhciBlPWIuZmlyc3RFZmZlY3R9ZWxzZSBlPWI7ZWxzZSBlPWIuZmlyc3RFZmZlY3Q7YWY9SGQ7dmFyIGY9ZGEoKTtpZihVZChmKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW5cbmYpdmFyIGc9e3N0YXJ0OmYuc2VsZWN0aW9uU3RhcnQsZW5kOmYuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e3ZhciBoPXdpbmRvdy5nZXRTZWxlY3Rpb24mJndpbmRvdy5nZXRTZWxlY3Rpb24oKTtpZihoJiYwIT09aC5yYW5nZUNvdW50KXtnPWguYW5jaG9yTm9kZTt2YXIgaz1oLmFuY2hvck9mZnNldCxuPWguZm9jdXNOb2RlO2g9aC5mb2N1c09mZnNldDt0cnl7Zy5ub2RlVHlwZSxuLm5vZGVUeXBlfWNhdGNoKFdhKXtnPW51bGw7YnJlYWsgYX12YXIgcj0wLHc9LTEsUD0tMSxuYz0wLEpkPTAsRT1mLHQ9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB4Ozspe0UhPT1nfHwwIT09ayYmMyE9PUUubm9kZVR5cGV8fCh3PXIrayk7RSE9PW58fDAhPT1oJiYzIT09RS5ub2RlVHlwZXx8KFA9citoKTszPT09RS5ub2RlVHlwZSYmKHIrPUUubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh4PUUuZmlyc3RDaGlsZCkpYnJlYWs7dD1FO0U9eH1mb3IoOzspe2lmKEU9PT1mKWJyZWFrIGI7dD09PWcmJlxuKytuYz09PWsmJih3PXIpO3Q9PT1uJiYrK0pkPT09aCYmKFA9cik7aWYobnVsbCE9PSh4PUUubmV4dFNpYmxpbmcpKWJyZWFrO0U9dDt0PUUucGFyZW50Tm9kZX1FPXh9Zz0tMT09PXd8fC0xPT09UD9udWxsOntzdGFydDp3LGVuZDpQfX1lbHNlIGc9bnVsbH1nPWd8fHtzdGFydDowLGVuZDowfX1lbHNlIGc9bnVsbDtiZj17Zm9jdXNlZEVsZW06ZixzZWxlY3Rpb25SYW5nZTpnfTtJZCghMSk7Zm9yKFU9ZTtudWxsIT09VTspe2Y9ITE7Zz12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PVU7KXtpZihVLmVmZmVjdFRhZyYyNTYpe3ZhciB1PVUuYWx0ZXJuYXRlO2s9VTtzd2l0Y2goay50YWcpe2Nhc2UgMjppZihrLmVmZmVjdFRhZyYyNTYmJm51bGwhPT11KXt2YXIgeT11Lm1lbW9pemVkUHJvcHMsRD11Lm1lbW9pemVkU3RhdGUsamE9ay5zdGF0ZU5vZGU7amEucHJvcHM9ay5tZW1vaXplZFByb3BzO2phLnN0YXRlPWsubWVtb2l6ZWRTdGF0ZTt2YXIgbWk9amEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoeSxcbkQpO2phLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPW1pfWJyZWFrO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpicmVhaztkZWZhdWx0OkEoXCIxNjNcIil9fVU9VS5uZXh0RWZmZWN0fX1jYXRjaChXYSl7Zj0hMCxnPVdhfWYmJihudWxsPT09VT9BKFwiMTc4XCIpOnZvaWQgMCxaZyhVLGcpLG51bGwhPT1VJiYoVT1VLm5leHRFZmZlY3QpKX1mb3IoVT1lO251bGwhPT1VOyl7dT0hMTt5PXZvaWQgMDt0cnl7Zm9yKDtudWxsIT09VTspe3ZhciBxPVUuZWZmZWN0VGFnO3EmMTYmJktlKFUuc3RhdGVOb2RlLFwiXCIpO2lmKHEmMTI4KXt2YXIgej1VLmFsdGVybmF0ZTtpZihudWxsIT09eil7dmFyIGw9ei5yZWY7bnVsbCE9PWwmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgbD9sKG51bGwpOmwuY3VycmVudD1udWxsKX19c3dpdGNoKHEmMTQpe2Nhc2UgMjpjaChVKTtVLmVmZmVjdFRhZyY9LTM7YnJlYWs7Y2FzZSA2OmNoKFUpO1UuZWZmZWN0VGFnJj0tMztkaChVLmFsdGVybmF0ZSxcblUpO2JyZWFrO2Nhc2UgNDpkaChVLmFsdGVybmF0ZSxVKTticmVhaztjYXNlIDg6RD1VLGFoKEQpLEQucmV0dXJuPW51bGwsRC5jaGlsZD1udWxsLEQuYWx0ZXJuYXRlJiYoRC5hbHRlcm5hdGUuY2hpbGQ9bnVsbCxELmFsdGVybmF0ZS5yZXR1cm49bnVsbCl9VT1VLm5leHRFZmZlY3R9fWNhdGNoKFdhKXt1PSEwLHk9V2F9dSYmKG51bGw9PT1VP0EoXCIxNzhcIik6dm9pZCAwLFpnKFUseSksbnVsbCE9PVUmJihVPVUubmV4dEVmZmVjdCkpfWw9YmY7ej1kYSgpO3E9bC5mb2N1c2VkRWxlbTt1PWwuc2VsZWN0aW9uUmFuZ2U7aWYoeiE9PXEmJmZhKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxxKSl7bnVsbCE9PXUmJlVkKHEpJiYoej11LnN0YXJ0LGw9dS5lbmQsdm9pZCAwPT09bCYmKGw9eiksXCJzZWxlY3Rpb25TdGFydFwiaW4gcT8ocS5zZWxlY3Rpb25TdGFydD16LHEuc2VsZWN0aW9uRW5kPU1hdGgubWluKGwscS52YWx1ZS5sZW5ndGgpKTp3aW5kb3cuZ2V0U2VsZWN0aW9uJiYoej13aW5kb3cuZ2V0U2VsZWN0aW9uKCksXG55PXFbbGIoKV0ubGVuZ3RoLGw9TWF0aC5taW4odS5zdGFydCx5KSx1PXZvaWQgMD09PXUuZW5kP2w6TWF0aC5taW4odS5lbmQseSksIXouZXh0ZW5kJiZsPnUmJih5PXUsdT1sLGw9eSkseT1UZChxLGwpLEQ9VGQocSx1KSx5JiZEJiYoMSE9PXoucmFuZ2VDb3VudHx8ei5hbmNob3JOb2RlIT09eS5ub2RlfHx6LmFuY2hvck9mZnNldCE9PXkub2Zmc2V0fHx6LmZvY3VzTm9kZSE9PUQubm9kZXx8ei5mb2N1c09mZnNldCE9PUQub2Zmc2V0KSYmKGphPWRvY3VtZW50LmNyZWF0ZVJhbmdlKCksamEuc2V0U3RhcnQoeS5ub2RlLHkub2Zmc2V0KSx6LnJlbW92ZUFsbFJhbmdlcygpLGw+dT8oei5hZGRSYW5nZShqYSksei5leHRlbmQoRC5ub2RlLEQub2Zmc2V0KSk6KGphLnNldEVuZChELm5vZGUsRC5vZmZzZXQpLHouYWRkUmFuZ2UoamEpKSkpKTt6PVtdO2ZvcihsPXE7bD1sLnBhcmVudE5vZGU7KTE9PT1sLm5vZGVUeXBlJiZ6LnB1c2goe2VsZW1lbnQ6bCxsZWZ0Omwuc2Nyb2xsTGVmdCxcbnRvcDpsLnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBxLmZvY3VzJiZxLmZvY3VzKCk7Zm9yKHE9MDtxPHoubGVuZ3RoO3ErKylsPXpbcV0sbC5lbGVtZW50LnNjcm9sbExlZnQ9bC5sZWZ0LGwuZWxlbWVudC5zY3JvbGxUb3A9bC50b3B9YmY9bnVsbDtJZChhZik7YWY9bnVsbDtjLmN1cnJlbnQ9Yjtmb3IoVT1lO251bGwhPT1VOyl7ZT0hMTtxPXZvaWQgMDt0cnl7Zm9yKHo9ZDtudWxsIT09VTspe3ZhciBoZz1VLmVmZmVjdFRhZztpZihoZyYzNil7dmFyIG9jPVUuYWx0ZXJuYXRlO2w9VTt1PXo7c3dpdGNoKGwudGFnKXtjYXNlIDI6dmFyIGNhPWwuc3RhdGVOb2RlO2lmKGwuZWZmZWN0VGFnJjQpaWYobnVsbD09PW9jKWNhLnByb3BzPWwubWVtb2l6ZWRQcm9wcyxjYS5zdGF0ZT1sLm1lbW9pemVkU3RhdGUsY2EuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciB3aT1vYy5tZW1vaXplZFByb3BzLHhpPW9jLm1lbW9pemVkU3RhdGU7Y2EucHJvcHM9bC5tZW1vaXplZFByb3BzO1xuY2Euc3RhdGU9bC5tZW1vaXplZFN0YXRlO2NhLmNvbXBvbmVudERpZFVwZGF0ZSh3aSx4aSxjYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9dmFyIE5nPWwudXBkYXRlUXVldWU7bnVsbCE9PU5nJiYoY2EucHJvcHM9bC5tZW1vaXplZFByb3BzLGNhLnN0YXRlPWwubWVtb2l6ZWRTdGF0ZSxXZihsLE5nLGNhLHUpKTticmVhaztjYXNlIDM6dmFyIE9nPWwudXBkYXRlUXVldWU7aWYobnVsbCE9PU9nKXt5PW51bGw7aWYobnVsbCE9PWwuY2hpbGQpc3dpdGNoKGwuY2hpbGQudGFnKXtjYXNlIDU6eT1sLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDI6eT1sLmNoaWxkLnN0YXRlTm9kZX1XZihsLE9nLHksdSl9YnJlYWs7Y2FzZSA1OnZhciB5aT1sLnN0YXRlTm9kZTtudWxsPT09b2MmJmwuZWZmZWN0VGFnJjQmJmNmKGwudHlwZSxsLm1lbW9pemVkUHJvcHMpJiZ5aS5mb2N1cygpO2JyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxNTpicmVhaztjYXNlIDE2OmJyZWFrO1xuZGVmYXVsdDpBKFwiMTYzXCIpfX1pZihoZyYxMjgpe2w9dm9pZCAwO3ZhciB5Yz1VLnJlZjtpZihudWxsIT09eWMpe3ZhciBQZz1VLnN0YXRlTm9kZTtzd2l0Y2goVS50YWcpe2Nhc2UgNTpsPVBnO2JyZWFrO2RlZmF1bHQ6bD1QZ31cImZ1bmN0aW9uXCI9PT10eXBlb2YgeWM/eWMobCk6eWMuY3VycmVudD1sfX12YXIgemk9VS5uZXh0RWZmZWN0O1UubmV4dEVmZmVjdD1udWxsO1U9eml9fWNhdGNoKFdhKXtlPSEwLHE9V2F9ZSYmKG51bGw9PT1VP0EoXCIxNzhcIik6dm9pZCAwLFpnKFUscSksbnVsbCE9PVUmJihVPVUubmV4dEVmZmVjdCkpfXBoPXRoPSExO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBKZiYmSmYoYi5zdGF0ZU5vZGUpO2I9Yy5jdXJyZW50LmV4cGlyYXRpb25UaW1lOzA9PT1iJiYoaGg9bnVsbCk7YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1ifWZ1bmN0aW9uIHpoKCl7cmV0dXJuIG51bGw9PT1QaHx8UGgudGltZVJlbWFpbmluZygpPlNoPyExOk1oPSEwfVxuZnVuY3Rpb24gZmgoYSl7bnVsbD09PVg/QShcIjI0NlwiKTp2b2lkIDA7WC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT0wO05ofHwoTmg9ITAsT2g9YSl9ZnVuY3Rpb24gQmgoYSl7bnVsbD09PVg/QShcIjI0NlwiKTp2b2lkIDA7WC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1hfWZ1bmN0aW9uIGJpKGEsYil7dmFyIGM9WjtaPSEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5eyhaPWMpfHxXfHxXaCgpfX1mdW5jdGlvbiBjaShhLGIpe2lmKFomJiFRaCl7UWg9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7UWg9ITF9fXJldHVybiBhKGIpfWZ1bmN0aW9uIGRpKGEsYil7Vz9BKFwiMTg3XCIpOnZvaWQgMDt2YXIgYz1aO1o9ITA7dHJ5e3JldHVybiBJaChhLGIpfWZpbmFsbHl7Wj1jLFdoKCl9fVxuZnVuY3Rpb24gZWkoYSxiLGMpe2lmKERoKXJldHVybiBhKGIsYyk7Wnx8V3x8MD09PUVofHwoWWgoRWgsITEsbnVsbCksRWg9MCk7dmFyIGQ9RGgsZT1aO1o9RGg9ITA7dHJ5e3JldHVybiBhKGIsYyl9ZmluYWxseXtEaD1kLChaPWUpfHxXfHxXaCgpfX1mdW5jdGlvbiBmaShhKXt2YXIgYj1aO1o9ITA7dHJ5e0loKGEpfWZpbmFsbHl7KFo9Yil8fFd8fFloKDEsITEsbnVsbCl9fVxuZnVuY3Rpb24gZ2koYSxiLGMsZCxlKXt2YXIgZj1iLmN1cnJlbnQ7aWYoYyl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGc7Yjp7Mj09PWpkKGMpJiYyPT09Yy50YWc/dm9pZCAwOkEoXCIxNzBcIik7Zm9yKGc9YzszIT09Zy50YWc7KXtpZihxZihnKSl7Zz1nLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifShnPWcucmV0dXJuKT92b2lkIDA6QShcIjE3MVwiKX1nPWcuc3RhdGVOb2RlLmNvbnRleHR9Yz1xZihjKT92ZihjLGcpOmd9ZWxzZSBjPWhhO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9ZTtlPU9mKGQpO2UucGF5bG9hZD17ZWxlbWVudDphfTtiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiYoZS5jYWxsYmFjaz1iKTtRZihmLGUsZCk7b2coZixkKTtyZXR1cm4gZH1cbmZ1bmN0aW9uIGhpKGEpe3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2b2lkIDA9PT1iJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyP0EoXCIxODhcIik6QShcIjI2OFwiLE9iamVjdC5rZXlzKGEpKSk7YT1tZChiKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX1mdW5jdGlvbiBpaShhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1tZygpO2U9bmcoZixlKTtyZXR1cm4gZ2koYSxiLGMsZSxkKX1mdW5jdGlvbiBqaShhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fVxuZnVuY3Rpb24ga2koYSl7dmFyIGI9YS5maW5kRmliZXJCeUhvc3RJbnN0YW5jZTtyZXR1cm4gSWYocCh7fSxhLHtmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPW1kKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYj9iKGEpOm51bGx9fSkpfVxudmFyIGxpPXt1cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lOmdpLGNyZWF0ZUNvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIEVmKGEsYixjKX0sdXBkYXRlQ29udGFpbmVyOmlpLGZsdXNoUm9vdDokaCxyZXF1ZXN0V29yazpBaCxjb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uOkNoLGJhdGNoZWRVcGRhdGVzOmJpLHVuYmF0Y2hlZFVwZGF0ZXM6Y2ksZGVmZXJyZWRVcGRhdGVzOkhoLHN5bmNVcGRhdGVzOkloLGludGVyYWN0aXZlVXBkYXRlczplaSxmbHVzaEludGVyYWN0aXZlVXBkYXRlczpmdW5jdGlvbigpe1d8fDA9PT1FaHx8KFloKEVoLCExLG51bGwpLEVoPTApfSxmbHVzaENvbnRyb2xsZWQ6ZmksZmx1c2hTeW5jOmRpLGdldFB1YmxpY1Jvb3RJbnN0YW5jZTpqaSxmaW5kSG9zdEluc3RhbmNlOmhpLGZpbmRIb3N0SW5zdGFuY2VXaXRoTm9Qb3J0YWxzOmZ1bmN0aW9uKGEpe2E9bmQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGluamVjdEludG9EZXZUb29sczpraX07XG5mdW5jdGlvbiBuaShhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOmhjLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fUtiLmluamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQoJGUpO2Z1bmN0aW9uIG9pKGEpe3RoaXMuX2V4cGlyYXRpb25UaW1lPUNoKCk7dGhpcy5fcm9vdD1hO3RoaXMuX2NhbGxiYWNrcz10aGlzLl9uZXh0PW51bGw7dGhpcy5faGFzQ2hpbGRyZW49dGhpcy5fZGlkQ29tcGxldGU9ITE7dGhpcy5fY2hpbGRyZW49bnVsbDt0aGlzLl9kZWZlcj0hMH1cbm9pLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dGhpcy5fZGVmZXI/dm9pZCAwOkEoXCIyNTBcIik7dGhpcy5faGFzQ2hpbGRyZW49ITA7dGhpcy5fY2hpbGRyZW49YTt2YXIgYj10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYz10aGlzLl9leHBpcmF0aW9uVGltZSxkPW5ldyBwaTtnaShhLGIsbnVsbCxjLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07b2kucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tcGxldGUpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xub2kucHJvdG90eXBlLmNvbW1pdD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxiPWEuZmlyc3RCYXRjaDt0aGlzLl9kZWZlciYmbnVsbCE9PWI/dm9pZCAwOkEoXCIyNTFcIik7aWYodGhpcy5faGFzQ2hpbGRyZW4pe3ZhciBjPXRoaXMuX2V4cGlyYXRpb25UaW1lO2lmKGIhPT10aGlzKXt0aGlzLl9oYXNDaGlsZHJlbiYmKGM9dGhpcy5fZXhwaXJhdGlvblRpbWU9Yi5fZXhwaXJhdGlvblRpbWUsdGhpcy5yZW5kZXIodGhpcy5fY2hpbGRyZW4pKTtmb3IodmFyIGQ9bnVsbCxlPWI7ZSE9PXRoaXM7KWQ9ZSxlPWUuX25leHQ7bnVsbD09PWQ/QShcIjI1MVwiKTp2b2lkIDA7ZC5fbmV4dD1lLl9uZXh0O3RoaXMuX25leHQ9YjthLmZpcnN0QmF0Y2g9dGhpc310aGlzLl9kZWZlcj0hMTskaChhLGMpO2I9dGhpcy5fbmV4dDt0aGlzLl9uZXh0PW51bGw7Yj1hLmZpcnN0QmF0Y2g9YjtudWxsIT09YiYmYi5faGFzQ2hpbGRyZW4mJmIucmVuZGVyKGIuX2NoaWxkcmVuKX1lbHNlIHRoaXMuX25leHQ9XG5udWxsLHRoaXMuX2RlZmVyPSExfTtvaS5wcm90b3R5cGUuX29uQ29tcGxldGU9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tcGxldGUpe3RoaXMuX2RpZENvbXBsZXRlPSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKykoMCxhW2JdKSgpfX07ZnVuY3Rpb24gcGkoKXt0aGlzLl9jYWxsYmFja3M9bnVsbDt0aGlzLl9kaWRDb21taXQ9ITE7dGhpcy5fb25Db21taXQ9dGhpcy5fb25Db21taXQuYmluZCh0aGlzKX1waS5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21taXQpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xucGkucHJvdG90eXBlLl9vbkNvbW1pdD1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21taXQpe3RoaXMuX2RpZENvbW1pdD0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07XCJmdW5jdGlvblwiIT09dHlwZW9mIGM/QShcIjE5MVwiLGMpOnZvaWQgMDtjKCl9fX07ZnVuY3Rpb24gcWkoYSxiLGMpe3RoaXMuX2ludGVybmFsUm9vdD1FZihhLGIsYyl9cWkucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuX2ludGVybmFsUm9vdCxkPW5ldyBwaTtiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiZkLnRoZW4oYik7aWkoYSxjLG51bGwsZC5fb25Db21taXQpO3JldHVybiBkfTtcbnFpLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2ludGVybmFsUm9vdCxjPW5ldyBwaTthPXZvaWQgMD09PWE/bnVsbDphO251bGwhPT1hJiZjLnRoZW4oYSk7aWkobnVsbCxiLG51bGwsYy5fb25Db21taXQpO3JldHVybiBjfTtxaS5wcm90b3R5cGUubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLl9pbnRlcm5hbFJvb3QsZT1uZXcgcGk7Yz12b2lkIDA9PT1jP251bGw6YztudWxsIT09YyYmZS50aGVuKGMpO2lpKGIsZCxhLGUuX29uQ29tbWl0KTtyZXR1cm4gZX07XG5xaS5wcm90b3R5cGUuY3JlYXRlQmF0Y2g9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgb2kodGhpcyksYj1hLl9leHBpcmF0aW9uVGltZSxjPXRoaXMuX2ludGVybmFsUm9vdCxkPWMuZmlyc3RCYXRjaDtpZihudWxsPT09ZCljLmZpcnN0QmF0Y2g9YSxhLl9uZXh0PW51bGw7ZWxzZXtmb3IoYz1udWxsO251bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZTw9YjspYz1kLGQ9ZC5fbmV4dDthLl9uZXh0PWQ7bnVsbCE9PWMmJihjLl9uZXh0PWEpfXJldHVybiBhfTtmdW5jdGlvbiByaShhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9U2I9bGkuYmF0Y2hlZFVwZGF0ZXM7VGI9bGkuaW50ZXJhY3RpdmVVcGRhdGVzO1ViPWxpLmZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzO1xuZnVuY3Rpb24gc2koYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBxaShhLCExLGIpfVxuZnVuY3Rpb24gdGkoYSxiLGMsZCxlKXtyaShjKT92b2lkIDA6QShcIjIwMFwiKTt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBnPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWppKGYuX2ludGVybmFsUm9vdCk7Zy5jYWxsKGEpfX1udWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9c2koYyxkKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9amkoZi5faW50ZXJuYWxSb290KTtoLmNhbGwoYSl9fWNpKGZ1bmN0aW9uKCl7bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX0pfXJldHVybiBqaShmLl9pbnRlcm5hbFJvb3QpfVxuZnVuY3Rpb24gdWkoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtyaShiKT92b2lkIDA6QShcIjIwMFwiKTtyZXR1cm4gbmkoYSxiLG51bGwsYyl9XG52YXIgdmk9e2NyZWF0ZVBvcnRhbDp1aSxmaW5kRE9NTm9kZTpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT9udWxsOjE9PT1hLm5vZGVUeXBlP2E6aGkoYSl9LGh5ZHJhdGU6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiB0aShudWxsLGEsYiwhMCxjKX0scmVuZGVyOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gdGkobnVsbCxhLGIsITEsYyl9LHVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOmZ1bmN0aW9uKGEsYixjLGQpe251bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxGaWJlcj9BKFwiMzhcIik6dm9pZCAwO3JldHVybiB0aShhLGIsYywhMSxkKX0sdW5tb3VudENvbXBvbmVudEF0Tm9kZTpmdW5jdGlvbihhKXtyaShhKT92b2lkIDA6QShcIjQwXCIpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KGNpKGZ1bmN0aW9uKCl7dGkobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbH0pfSksITApOiExfSx1bnN0YWJsZV9jcmVhdGVQb3J0YWw6ZnVuY3Rpb24oKXtyZXR1cm4gdWkuYXBwbHkodm9pZCAwLFxuYXJndW1lbnRzKX0sdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6YmksdW5zdGFibGVfZGVmZXJyZWRVcGRhdGVzOkhoLHVuc3RhYmxlX2ludGVyYWN0aXZlVXBkYXRlczplaSxmbHVzaFN5bmM6ZGksdW5zdGFibGVfZmx1c2hDb250cm9sbGVkOmZpLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntFdmVudFBsdWdpbkh1YjpLYSxFdmVudFBsdWdpblJlZ2lzdHJ5OnZhLEV2ZW50UHJvcGFnYXRvcnM6JGEsUmVhY3RDb250cm9sbGVkQ29tcG9uZW50OlJiLFJlYWN0RE9NQ29tcG9uZW50VHJlZTpRYSxSZWFjdERPTUV2ZW50TGlzdGVuZXI6TmR9LHVuc3RhYmxlX2NyZWF0ZVJvb3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbmV3IHFpKGEsITAsbnVsbCE9YiYmITA9PT1iLmh5ZHJhdGUpfX07a2koe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOk5hLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuNC4xXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7XG52YXIgQWk9e2RlZmF1bHQ6dml9LEJpPUFpJiZ2aXx8QWk7bW9kdWxlLmV4cG9ydHM9QmkuZGVmYXVsdD9CaS5kZWZhdWx0OkJpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi40LjFcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBrPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSxwPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eU9iamVjdFwiKSxxPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLHI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcix0PXI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsdT1yP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsdj1yP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx3PXI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHg9cj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQseT1yP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx6PXI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsQT1yP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLEI9XG5yP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMjtyJiZTeW1ib2wuZm9yKFwicmVhY3QudGltZW91dFwiKTt2YXIgQz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gRChhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGU9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MDtjPGI7YysrKWUrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2MrMV0pO24oITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixlKX1cbnZhciBFPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fTtmdW5jdGlvbiBGKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPXA7dGhpcy51cGRhdGVyPWV8fEV9Ri5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtGLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe1wib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWE/RChcIjg1XCIpOnZvaWQgMDt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0YucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEcoKXt9XG5HLnByb3RvdHlwZT1GLnByb3RvdHlwZTtmdW5jdGlvbiBIKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPXA7dGhpcy51cGRhdGVyPWV8fEV9dmFyIEk9SC5wcm90b3R5cGU9bmV3IEc7SS5jb25zdHJ1Y3Rvcj1IO2soSSxGLnByb3RvdHlwZSk7SS5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgSj17Y3VycmVudDpudWxsfSxLPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsZSl7dmFyIGM9dm9pZCAwLGQ9e30sZz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihjIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSy5jYWxsKGIsYykmJiFMLmhhc093blByb3BlcnR5KGMpJiYoZFtjXT1iW2NdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGw9QXJyYXkoZiksbT0wO208ZjttKyspbFttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWx9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGMgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWRbY10mJihkW2NdPWZbY10pO3JldHVybnskJHR5cGVvZjp0LHR5cGU6YSxrZXk6ZyxyZWY6aCxwcm9wczpkLF9vd25lcjpKLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09dH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBPPS9cXC8rL2csUD1bXTtmdW5jdGlvbiBRKGEsYixlLGMpe2lmKFAubGVuZ3RoKXt2YXIgZD1QLnBvcCgpO2QucmVzdWx0PWE7ZC5rZXlQcmVmaXg9YjtkLmZ1bmM9ZTtkLmNvbnRleHQ9YztkLmNvdW50PTA7cmV0dXJuIGR9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6ZSxjb250ZXh0OmMsY291bnQ6MH19ZnVuY3Rpb24gUihhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlAubGVuZ3RoJiZQLnB1c2goYSl9XG5mdW5jdGlvbiBTKGEsYixlLGMpe3ZhciBkPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1kfHxcImJvb2xlYW5cIj09PWQpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB0OmNhc2UgdTpnPSEwfX1pZihnKXJldHVybiBlKGMsYSxcIlwiPT09Yj9cIi5cIitUKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBoPTA7aDxhLmxlbmd0aDtoKyspe2Q9YVtoXTt2YXIgZj1iK1QoZCxoKTtnKz1TKGQsZixlLGMpfWVsc2UgaWYobnVsbD09PWF8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYT9mPW51bGw6KGY9QyYmYVtDXXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxcbmg9MDshKGQ9YS5uZXh0KCkpLmRvbmU7KWQ9ZC52YWx1ZSxmPWIrVChkLGgrKyksZys9UyhkLGYsZSxjKTtlbHNlXCJvYmplY3RcIj09PWQmJihlPVwiXCIrYSxEKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09ZT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjplLFwiXCIpKTtyZXR1cm4gZ31mdW5jdGlvbiBUKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBVKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIFYoYSxiLGUpe3ZhciBjPWEucmVzdWx0LGQ9YS5rZXlQcmVmaXg7YT1hLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspO0FycmF5LmlzQXJyYXkoYSk/VyhhLGMsZSxxLnRoYXRSZXR1cm5zQXJndW1lbnQpOm51bGwhPWEmJihOKGEpJiYoYj1kKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKStlLGE9eyQkdHlwZW9mOnQsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfSksYy5wdXNoKGEpKX1mdW5jdGlvbiBXKGEsYixlLGMsZCl7dmFyIGc9XCJcIjtudWxsIT1lJiYoZz0oXCJcIitlKS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpO2I9UShiLGcsYyxkKTtudWxsPT1hfHxTKGEsXCJcIixWLGIpO1IoYil9XG52YXIgWD17Q2hpbGRyZW46e21hcDpmdW5jdGlvbihhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgYz1bXTtXKGEsYyxudWxsLGIsZSk7cmV0dXJuIGN9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1RKG51bGwsbnVsbCxiLGUpO251bGw9PWF8fFMoYSxcIlwiLFUsYik7UihiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/MDpTKGEsXCJcIixxLnRoYXRSZXR1cm5zTnVsbCxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtXKGEsYixudWxsLHEudGhhdFJldHVybnNBcmd1bWVudCk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7TihhKT92b2lkIDA6RChcIjE0M1wiKTtyZXR1cm4gYX19LGNyZWF0ZVJlZjpmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fSxDb21wb25lbnQ6RixQdXJlQ29tcG9uZW50OkgsY3JlYXRlQ29udGV4dDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOnosXG5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfZGVmYXVsdFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX2NoYW5nZWRCaXRzOjAsX2NoYW5nZWRCaXRzMjowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6eSxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpCLHJlbmRlcjphfX0sRnJhZ21lbnQ6dixTdHJpY3RNb2RlOncsdW5zdGFibGVfQXN5bmNNb2RlOkEsdW5zdGFibGVfUHJvZmlsZXI6eCxjcmVhdGVFbGVtZW50Ok0sY2xvbmVFbGVtZW50OmZ1bmN0aW9uKGEsYixlKXtudWxsPT09YXx8dm9pZCAwPT09YT9EKFwiMjY3XCIsYSk6dm9pZCAwO3ZhciBjPXZvaWQgMCxkPWsoe30sYS5wcm9wcyksZz1hLmtleSxoPWEucmVmLGY9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihoPWIucmVmLGY9Si5jdXJyZW50KTt2b2lkIDAhPT1cbmIua2V5JiYoZz1cIlwiK2Iua2V5KTt2YXIgbD12b2lkIDA7YS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzJiYobD1hLnR5cGUuZGVmYXVsdFByb3BzKTtmb3IoYyBpbiBiKUsuY2FsbChiLGMpJiYhTC5oYXNPd25Qcm9wZXJ0eShjKSYmKGRbY109dm9pZCAwPT09YltjXSYmdm9pZCAwIT09bD9sW2NdOmJbY10pfWM9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1jKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Yyl7bD1BcnJheShjKTtmb3IodmFyIG09MDttPGM7bSsrKWxbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1sfXJldHVybnskJHR5cGVvZjp0LHR5cGU6YS50eXBlLGtleTpnLHJlZjpoLHByb3BzOmQsX293bmVyOmZ9fSxjcmVhdGVGYWN0b3J5OmZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifSxpc1ZhbGlkRWxlbWVudDpOLHZlcnNpb246XCIxNi40LjFcIixfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7UmVhY3RDdXJyZW50T3duZXI6SixcbmFzc2lnbjprfX0sWT17ZGVmYXVsdDpYfSxaPVkmJlh8fFk7bW9kdWxlLmV4cG9ydHM9Wi5kZWZhdWx0P1ouZGVmYXVsdDpaO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgQXBwIGZyb20gJy4vY29tcG9uZW50cy9hcHAvQXBwJztcbmltcG9ydCBzdG9yZSBmcm9tICcuL3N0b3JlL3N0b3JlJztcbmltcG9ydCAnbm9ybWFsaXplLmNzcyc7XG5cblJlYWN0RE9NLnJlbmRlcihcbiAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4gICAgPEFwcC8+XG4gIDwvUHJvdmlkZXI+LFxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpXG4pOyJdLCJzb3VyY2VSb290IjoiIn0=